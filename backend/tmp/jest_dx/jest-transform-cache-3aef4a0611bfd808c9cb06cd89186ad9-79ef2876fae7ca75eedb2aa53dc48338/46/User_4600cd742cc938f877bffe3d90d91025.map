{"version":3,"names":["cov_1qzh2tdd74","actualCoverage","typeorm_1","s","require","User","id","username","created_at","updated_at","lastActiveAt","email","password","confirmed_mail","roles","description","photo","photoContentType","status","attributes","eloRating","gameStats","rooms","gamesWon","gamesLost","guessAccuracy","winRate","calculateStats","f","b","totalGames","length","filter","stat","isWinner","totalGuesses","reduce","sum","correctGuesses","incorrectGuesses","toJSON","undefined","Math","round","toString","exports","__decorate","PrimaryGeneratedColumn","Column","nullable","type","default","Date","select","onUpdate","Buffer","enum","OneToMany","stats","user","eager","ManyToMany","room","players","AfterLoad","Entity"],"sources":["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/entities/User.ts"],"sourcesContent":["import {\n  AfterLoad,\n  Column,\n  Entity,\n  ManyToMany,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport type { Room } from \"./Room\";\nimport type { GameStats } from \"./GameStats\";\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @Column(\"text\", { nullable: true })\n  username!: string;\n\n  @Column({ type: \"timestamp\", default: () => \"CURRENT_TIMESTAMP\" })\n  created_at!: Date;\n\n  @Column({\n    type: \"timestamp\",\n    select: false,\n    default: () => \"CURRENT_TIMESTAMP\",\n    onUpdate: \"CURRENT_TIMESTAMP\",\n  })\n  updated_at!: Date;\n\n  @Column({ type: \"timestamp\", default: () => \"CURRENT_TIMESTAMP\" })\n  lastActiveAt!: Date;\n\n  @Column(\"text\")\n  email!: string;\n\n  @Column(\"text\", { select: false })\n  password!: string;\n\n  @Column(\"boolean\", { default: false, select: false })\n  confirmed_mail!: boolean;\n\n  @Column(\"simple-array\", { default: [\"user\"] })\n  roles!: string[];\n\n  @Column(\"text\", { nullable: true })\n  description?: string;\n\n  @Column(\"bytea\", { nullable: true })\n  photo?: Buffer;\n\n  @Column(\"text\", { nullable: true })\n  photoContentType?: string;\n\n  @Column(\"enum\", { enum: [\"online\", \"offline\"], default: \"offline\" })\n  status!: \"online\" | \"offline\";\n\n  @Column(\"simple-json\", { nullable: true, select: false })\n  attributes?: { key: string; value: string }[];\n\n  @Column({ type: \"integer\", default: 1200 })\n  eloRating!: number;\n\n  // @ts-ignore\n  @OneToMany(\"GameStats\", (stats) => stats.user, { eager: true })\n  gameStats!: GameStats[];\n\n  // @ts-ignore\n  @ManyToMany(\"Room\", (room) => room.players)\n  rooms!: Room[];\n\n  // Virtual properties for statistics\n  gamesWon!: number;\n  gamesLost!: number;\n  guessAccuracy!: number;\n  winRate!: number;\n\n  @AfterLoad()\n  async calculateStats() {\n    if (!this.gameStats) return;\n\n    // Calculate games won and lost\n    const totalGames = this.gameStats.length;\n    this.gamesWon = this.gameStats.filter((stat) => stat.isWinner).length;\n    this.gamesLost = totalGames - this.gamesWon;\n\n    // Calculate guess accuracy\n    const totalGuesses = this.gameStats.reduce(\n      (sum, stat) => sum + stat.correctGuesses + stat.incorrectGuesses,\n      0,\n    );\n    const correctGuesses = this.gameStats.reduce(\n      (sum, stat) => sum + stat.correctGuesses,\n      0,\n    );\n    this.guessAccuracy = totalGuesses > 0\n      ? (correctGuesses / totalGuesses) * 100\n      : 0;\n\n    // Calculate win rate\n    this.winRate = totalGames > 0 ? (this.gamesWon / totalGames) * 100 : 0;\n  }\n\n  toJSON() {\n    return {\n      ...this,\n      gameStats: undefined,\n      gamesWon: this.gamesWon || 0,\n      gamesLost: this.gamesLost || 0,\n      guessAccuracy: Math.round(this.guessAccuracy || 0),\n      winRate: Math.round(this.winRate || 0),\n      photo: this.photo\n        ? `data:${this.photoContentType};base64,${\n          this.photo.toString(\"base64\")\n        }`\n        : null,\n      photoContentType: undefined,\n      status: this.status || \"offline\",\n    };\n  }\n}\n"],"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","ignoreList":[]}
