1369397e204ff00ea5c68cd4e61667f3
"use strict";

/* istanbul ignore next */
function cov_1vej2511ap() {
  var path = "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/EloService.ts";
  var hash = "a269e5cb933029af5f443b2269f6811ccb0809a5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/EloService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 9,
          column: 20
        },
        end: {
          line: 9,
          column: 56
        }
      },
      "4": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 72
        }
      },
      "5": {
        start: {
          line: 11,
          column: 27
        },
        end: {
          line: 11,
          column: 69
        }
      },
      "6": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 12,
          column: 74
        }
      },
      "7": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 45
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 45
        }
      },
      "9": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 55
        }
      },
      "10": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 77
        }
      },
      "11": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 32,
          column: 23
        }
      },
      "12": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 21
        }
      },
      "13": {
        start: {
          line: 39,
          column: 28
        },
        end: {
          line: 39,
          column: 61
        }
      },
      "14": {
        start: {
          line: 40,
          column: 26
        },
        end: {
          line: 40,
          column: 47
        }
      },
      "15": {
        start: {
          line: 42,
          column: 31
        },
        end: {
          line: 43,
          column: 56
        }
      },
      "16": {
        start: {
          line: 45,
          column: 31
        },
        end: {
          line: 45,
          column: 106
        }
      },
      "17": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 74
        }
      },
      "18": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "19": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 21
        }
      },
      "20": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 56,
          column: 31
        }
      },
      "21": {
        start: {
          line: 55,
          column: 51
        },
        end: {
          line: 55,
          column: 73
        }
      },
      "22": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "23": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 29
        }
      },
      "24": {
        start: {
          line: 62,
          column: 33
        },
        end: {
          line: 62,
          column: 88
        }
      },
      "25": {
        start: {
          line: 62,
          column: 65
        },
        end: {
          line: 62,
          column: 87
        }
      },
      "26": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "27": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 36
        }
      },
      "28": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "29": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 71,
          column: 13
        }
      },
      "30": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 35
        }
      },
      "31": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 25
        }
      },
      "32": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "33": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 75,
          column: 17
        }
      },
      "34": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 39
        }
      },
      "35": {
        start: {
          line: 77,
          column: 17
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "36": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 35
        }
      },
      "37": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 27
        }
      },
      "38": {
        start: {
          line: 84,
          column: 22
        },
        end: {
          line: 89,
          column: 47
        }
      },
      "39": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "40": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 75
        }
      },
      "41": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "42": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 71
        }
      },
      "43": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 31
        }
      },
      "44": {
        start: {
          line: 102,
          column: 24
        },
        end: {
          line: 106,
          column: 12
        }
      },
      "45": {
        start: {
          line: 102,
          column: 71
        },
        end: {
          line: 106,
          column: 10
        }
      },
      "46": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "47": {
        start: {
          line: 107,
          column: 32
        },
        end: {
          line: 107,
          column: 34
        }
      },
      "48": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 54
        }
      },
      "49": {
        start: {
          line: 110,
          column: 32
        },
        end: {
          line: 110,
          column: 65
        }
      },
      "50": {
        start: {
          line: 110,
          column: 54
        },
        end: {
          line: 110,
          column: 64
        }
      },
      "51": {
        start: {
          line: 112,
          column: 25
        },
        end: {
          line: 112,
          column: 64
        }
      },
      "52": {
        start: {
          line: 113,
          column: 24
        },
        end: {
          line: 113,
          column: 85
        }
      },
      "53": {
        start: {
          line: 113,
          column: 54
        },
        end: {
          line: 113,
          column: 84
        }
      },
      "54": {
        start: {
          line: 114,
          column: 23
        },
        end: {
          line: 114,
          column: 82
        }
      },
      "55": {
        start: {
          line: 114,
          column: 53
        },
        end: {
          line: 114,
          column: 81
        }
      },
      "56": {
        start: {
          line: 115,
          column: 23
        },
        end: {
          line: 116,
          column: 53
        }
      },
      "57": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 117,
          column: 36
        }
      },
      "58": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "59": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 122,
          column: 17
        }
      },
      "60": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 69
        }
      },
      "61": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 74
        }
      },
      "62": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "63": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 79
        }
      },
      "64": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 68
        }
      },
      "65": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 75
        }
      },
      "66": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 53
        }
      },
      "67": {
        start: {
          line: 139,
          column: 36
        },
        end: {
          line: 139,
          column: 98
        }
      },
      "68": {
        start: {
          line: 140,
          column: 35
        },
        end: {
          line: 140,
          column: 97
        }
      },
      "69": {
        start: {
          line: 141,
          column: 28
        },
        end: {
          line: 141,
          column: 65
        }
      },
      "70": {
        start: {
          line: 142,
          column: 27
        },
        end: {
          line: 142,
          column: 63
        }
      },
      "71": {
        start: {
          line: 143,
          column: 34
        },
        end: {
          line: 146,
          column: 10
        }
      },
      "72": {
        start: {
          line: 147,
          column: 32
        },
        end: {
          line: 147,
          column: 126
        }
      },
      "73": {
        start: {
          line: 148,
          column: 31
        },
        end: {
          line: 148,
          column: 94
        }
      },
      "74": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 152,
          column: 11
        }
      },
      "75": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 156,
          column: 11
        }
      },
      "76": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "77": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 65
        }
      },
      "78": {
        start: {
          line: 162,
          column: 35
        },
        end: {
          line: 162,
          column: 42
        }
      },
      "79": {
        start: {
          line: 163,
          column: 26
        },
        end: {
          line: 163,
          column: 91
        }
      },
      "80": {
        start: {
          line: 164,
          column: 26
        },
        end: {
          line: 164,
          column: 91
        }
      },
      "81": {
        start: {
          line: 165,
          column: 23
        },
        end: {
          line: 165,
          column: 61
        }
      },
      "82": {
        start: {
          line: 166,
          column: 23
        },
        end: {
          line: 166,
          column: 61
        }
      },
      "83": {
        start: {
          line: 167,
          column: 25
        },
        end: {
          line: 170,
          column: 10
        }
      },
      "84": {
        start: {
          line: 171,
          column: 27
        },
        end: {
          line: 171,
          column: 81
        }
      },
      "85": {
        start: {
          line: 172,
          column: 27
        },
        end: {
          line: 172,
          column: 81
        }
      },
      "86": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 176,
          column: 11
        }
      },
      "87": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "88": {
        start: {
          line: 187,
          column: 22
        },
        end: {
          line: 187,
          column: 29
        }
      },
      "89": {
        start: {
          line: 188,
          column: 22
        },
        end: {
          line: 188,
          column: 28
        }
      },
      "90": {
        start: {
          line: 189,
          column: 28
        },
        end: {
          line: 189,
          column: 59
        }
      },
      "91": {
        start: {
          line: 190,
          column: 28
        },
        end: {
          line: 190,
          column: 59
        }
      },
      "92": {
        start: {
          line: 191,
          column: 35
        },
        end: {
          line: 191,
          column: 88
        }
      },
      "93": {
        start: {
          line: 192,
          column: 35
        },
        end: {
          line: 192,
          column: 88
        }
      },
      "94": {
        start: {
          line: 193,
          column: 27
        },
        end: {
          line: 193,
          column: 36
        }
      },
      "95": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "96": {
        start: {
          line: 196,
          column: 26
        },
        end: {
          line: 196,
          column: 63
        }
      },
      "97": {
        start: {
          line: 197,
          column: 28
        },
        end: {
          line: 197,
          column: 73
        }
      },
      "98": {
        start: {
          line: 198,
          column: 30
        },
        end: {
          line: 198,
          column: 123
        }
      },
      "99": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 49
        }
      },
      "100": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "101": {
        start: {
          line: 203,
          column: 26
        },
        end: {
          line: 203,
          column: 63
        }
      },
      "102": {
        start: {
          line: 204,
          column: 28
        },
        end: {
          line: 204,
          column: 73
        }
      },
      "103": {
        start: {
          line: 205,
          column: 30
        },
        end: {
          line: 205,
          column: 95
        }
      },
      "104": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 49
        }
      },
      "105": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 149
        }
      },
      "106": {
        start: {
          line: 209,
          column: 87
        },
        end: {
          line: 209,
          column: 146
        }
      },
      "107": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 26
        }
      },
      "108": {
        start: {
          line: 216,
          column: 27
        },
        end: {
          line: 216,
          column: 36
        }
      },
      "109": {
        start: {
          line: 217,
          column: 25
        },
        end: {
          line: 217,
          column: 64
        }
      },
      "110": {
        start: {
          line: 219,
          column: 30
        },
        end: {
          line: 219,
          column: 96
        }
      },
      "111": {
        start: {
          line: 219,
          column: 58
        },
        end: {
          line: 219,
          column: 95
        }
      },
      "112": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "113": {
        start: {
          line: 221,
          column: 21
        },
        end: {
          line: 221,
          column: 22
        }
      },
      "114": {
        start: {
          line: 222,
          column: 27
        },
        end: {
          line: 222,
          column: 43
        }
      },
      "115": {
        start: {
          line: 223,
          column: 32
        },
        end: {
          line: 223,
          column: 33
        }
      },
      "116": {
        start: {
          line: 224,
          column: 30
        },
        end: {
          line: 224,
          column: 31
        }
      },
      "117": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "118": {
        start: {
          line: 226,
          column: 25
        },
        end: {
          line: 226,
          column: 26
        }
      },
      "119": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 228,
          column: 29
        }
      },
      "120": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 29
        }
      },
      "121": {
        start: {
          line: 229,
          column: 33
        },
        end: {
          line: 229,
          column: 49
        }
      },
      "122": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 99
        }
      },
      "123": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 237,
          column: 17
        }
      },
      "124": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 37
        }
      },
      "125": {
        start: {
          line: 235,
          column: 21
        },
        end: {
          line: 237,
          column: 17
        }
      },
      "126": {
        start: {
          line: 236,
          column: 20
        },
        end: {
          line: 236,
          column: 39
        }
      },
      "127": {
        start: {
          line: 240,
          column: 44
        },
        end: {
          line: 241,
          column: 42
        }
      },
      "128": {
        start: {
          line: 242,
          column: 42
        },
        end: {
          line: 242,
          column: 82
        }
      },
      "129": {
        start: {
          line: 244,
          column: 26
        },
        end: {
          line: 244,
          column: 63
        }
      },
      "130": {
        start: {
          line: 245,
          column: 28
        },
        end: {
          line: 245,
          column: 73
        }
      },
      "131": {
        start: {
          line: 246,
          column: 30
        },
        end: {
          line: 247,
          column: 76
        }
      },
      "132": {
        start: {
          line: 248,
          column: 35
        },
        end: {
          line: 250,
          column: 27
        }
      },
      "133": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 54
        }
      },
      "134": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 149
        }
      },
      "135": {
        start: {
          line: 254,
          column: 87
        },
        end: {
          line: 254,
          column: 146
        }
      },
      "136": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 26
        }
      },
      "137": {
        start: {
          line: 258,
          column: 0
        },
        end: {
          line: 258,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 69
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 57
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 33
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 42
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 37
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 51
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 55,
            column: 34
          },
          end: {
            line: 55,
            column: 35
          }
        },
        loc: {
          start: {
            line: 55,
            column: 51
          },
          end: {
            line: 55,
            column: 73
          }
        },
        line: 55
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 36
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 58
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 62,
            column: 55
          },
          end: {
            line: 62,
            column: 56
          }
        },
        loc: {
          start: {
            line: 62,
            column: 65
          },
          end: {
            line: 62,
            column: 87
          }
        },
        line: 62
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 55
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 83
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 33
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 101
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 102,
            column: 59
          },
          end: {
            line: 102,
            column: 60
          }
        },
        loc: {
          start: {
            line: 102,
            column: 71
          },
          end: {
            line: 106,
            column: 10
          }
        },
        line: 102
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 107,
            column: 25
          },
          end: {
            line: 107,
            column: 26
          }
        },
        loc: {
          start: {
            line: 107,
            column: 32
          },
          end: {
            line: 107,
            column: 34
          }
        },
        line: 107
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 110,
            column: 47
          },
          end: {
            line: 110,
            column: 48
          }
        },
        loc: {
          start: {
            line: 110,
            column: 54
          },
          end: {
            line: 110,
            column: 64
          }
        },
        line: 110
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 113,
            column: 47
          },
          end: {
            line: 113,
            column: 48
          }
        },
        loc: {
          start: {
            line: 113,
            column: 54
          },
          end: {
            line: 113,
            column: 84
          }
        },
        line: 113
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 114,
            column: 46
          },
          end: {
            line: 114,
            column: 47
          }
        },
        loc: {
          start: {
            line: 114,
            column: 53
          },
          end: {
            line: 114,
            column: 81
          }
        },
        line: 114
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 48
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 138
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 39
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 158
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 50
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 185
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 209,
            column: 63
          },
          end: {
            line: 209,
            column: 64
          }
        },
        loc: {
          start: {
            line: 209,
            column: 87
          },
          end: {
            line: 209,
            column: 146
          }
        },
        line: 209
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 49
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 215
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 219,
            column: 48
          },
          end: {
            line: 219,
            column: 49
          }
        },
        loc: {
          start: {
            line: 219,
            column: 58
          },
          end: {
            line: 219,
            column: 95
          }
        },
        line: 219
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 254,
            column: 63
          },
          end: {
            line: 254,
            column: 64
          }
        },
        loc: {
          start: {
            line: 254,
            column: 87
          },
          end: {
            line: 254,
            column: 146
          }
        },
        line: 254
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 26
          },
          end: {
            line: 40,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 26
          },
          end: {
            line: 40,
            column: 42
          }
        }, {
          start: {
            line: 40,
            column: 46
          },
          end: {
            line: 40,
            column: 47
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 29
          }
        }, {
          start: {
            line: 59,
            column: 33
          },
          end: {
            line: 59,
            column: 62
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: 77,
            column: 17
          },
          end: {
            line: 79,
            column: 13
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 72,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 72,
            column: 30
          }
        }, {
          start: {
            line: 72,
            column: 34
          },
          end: {
            line: 72,
            column: 55
          }
        }],
        line: 72
      },
      "8": {
        loc: {
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 75,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 75,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "9": {
        loc: {
          start: {
            line: 77,
            column: 17
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 17
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "10": {
        loc: {
          start: {
            line: 77,
            column: 21
          },
          end: {
            line: 77,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 21
          },
          end: {
            line: 77,
            column: 35
          }
        }, {
          start: {
            line: 77,
            column: 39
          },
          end: {
            line: 77,
            column: 61
          }
        }],
        line: 77
      },
      "11": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "12": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "13": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "14": {
        loc: {
          start: {
            line: 115,
            column: 23
          },
          end: {
            line: 116,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 23
          },
          end: {
            line: 115,
            column: 42
          }
        }, {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 116,
            column: 53
          }
        }],
        line: 115
      },
      "15": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 123,
            column: 74
          }
        }, {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 128,
            column: 68
          }
        }, {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 130,
            column: 75
          }
        }, {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 132,
            column: 53
          }
        }],
        line: 118
      },
      "16": {
        loc: {
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "17": {
        loc: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "18": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "19": {
        loc: {
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 228,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 228,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "20": {
        loc: {
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 237,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 237,
            column: 17
          }
        }, {
          start: {
            line: 235,
            column: 21
          },
          end: {
            line: 237,
            column: 17
          }
        }],
        line: 232
      },
      "21": {
        loc: {
          start: {
            line: 235,
            column: 21
          },
          end: {
            line: 237,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 21
          },
          end: {
            line: 237,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "22": {
        loc: {
          start: {
            line: 248,
            column: 35
          },
          end: {
            line: 250,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 249,
            column: 18
          },
          end: {
            line: 249,
            column: 55
          }
        }, {
          start: {
            line: 250,
            column: 18
          },
          end: {
            line: 250,
            column: 27
          }
        }],
        line: 248
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/EloService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/EloService.ts"],
      sourcesContent: ["import { User } from \"../entities/User\";\nimport { Repository } from \"typeorm\";\nimport { config } from \"../config/config\";\nimport { Room } from \"../entities/Room\";\nimport { GameStats } from \"../entities/GameStats\";\n\nexport class EloService {\n  private readonly K_FACTOR_BASE = config.game.elo.kFactorBase;\n  private readonly WIN_STREAK_MULTIPLIER = config.game.elo.winStreakMultiplier;\n  private readonly MAX_WIN_STREAK_BONUS = config.game.elo.maxWinStreakBonus;\n  private readonly GAMES_PLAYED_DAMPENING =\n    config.game.elo.gamesPlayedDampening;\n\n  constructor(\n    private userRepository: Repository<User>,\n    private roomRepository: Repository<Room>,\n    private gameStatsRepository: Repository<GameStats>,\n  ) {}\n\n  /**\n   * Calculate the expected score (probability of winning)\n   */\n  private calculateExpectedScore(\n    playerRating: number,\n    opponentRating: number,\n  ): number {\n    return 1 / (1 + Math.pow(10, (opponentRating - playerRating) / 400));\n  }\n\n  /**\n   * Get the number of games played by a user\n   */\n  private async getGamesPlayed(userId: number): Promise<number> {\n    const count = await this.roomRepository.createQueryBuilder(\"room\")\n      .innerJoin(\"room_players\", \"rp\", \"rp.room_id = room.id\")\n      .where(\"room.status = :status\", { status: \"finished\" })\n      .andWhere(\"rp.user_id = :userId\", { userId })\n      .getCount();\n    return count;\n  }\n\n  /**\n   * Calculate the K-factor based on games played and win streak\n   */\n  private async calculateKFactor(\n    stats: GameStats | undefined,\n    userId: number,\n  ): Promise<number> {\n    const gamesPlayed = await this.getGamesPlayed(userId);\n    const winStreak = stats?.winStreak || 0;\n\n    // Dampen K-factor based on games played\n    const gamesDampening = Math.max(\n      0.5,\n      this.GAMES_PLAYED_DAMPENING /\n        (gamesPlayed + this.GAMES_PLAYED_DAMPENING),\n    );\n\n    // Calculate win streak bonus (capped at MAX_WIN_STREAK_BONUS)\n    const winStreakBonus = Math.min(\n      this.MAX_WIN_STREAK_BONUS,\n      winStreak * this.WIN_STREAK_MULTIPLIER,\n    );\n\n    return this.K_FACTOR_BASE * gamesDampening * (1 + winStreakBonus);\n  }\n\n  /**\n   * Calculate team rating by averaging member ratings\n   */\n  private calculateTeamRating(teamMembers: User[]): number {\n    if (teamMembers.length === 0) {\n      return 0;\n    }\n    return teamMembers.reduce((sum, player) => sum + player.eloRating, 0) /\n      teamMembers.length;\n  }\n\n  private getStatsForRoom(player: User, roomId: number): GameStats | undefined {\n    if (!player.gameStats || player.gameStats.length === 0) {\n      return undefined;\n    }\n\n    const currentGameStats = player.gameStats.find((stat) =>\n      stat.roomId === roomId\n    );\n    if (currentGameStats) {\n      return currentGameStats;\n    }\n\n    let latestStats: GameStats | undefined;\n\n    for (const stat of player.gameStats) {\n      if (!latestStats) {\n        latestStats = stat;\n        continue;\n      }\n\n      if (stat.createdAt && latestStats.createdAt) {\n        if (stat.createdAt > latestStats.createdAt) {\n          latestStats = stat;\n        }\n      } else if (stat.createdAt && !latestStats.createdAt) {\n        latestStats = stat;\n      }\n    }\n\n    return latestStats;\n  }\n\n  async getUserGameStats(\n    userId: number,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<GameStats[]> {\n    const query = this.gameStatsRepository\n      .createQueryBuilder(\"stats\")\n      .leftJoinAndSelect(\"stats.room\", \"room\")\n      .where(\"stats.userId = :userId\", { userId })\n      .andWhere(\"room.status = :status\", { status: \"finished\" })\n      .orderBy(\"stats.createdAt\", \"DESC\");\n\n    if (startDate) {\n      query.andWhere(\"stats.createdAt >= :startDate\", { startDate });\n    }\n\n    if (endDate) {\n      query.andWhere(\"stats.createdAt <= :endDate\", { endDate });\n    }\n\n    return query.getMany();\n  }\n\n  /**\n   * Update ELO ratings for a finished game room\n   */\n  async updateEloRatings(room: Room): Promise<Map<number, number>> {\n    const players = await Promise.all(\n      room.players.map((player) =>\n        this.userRepository.findOne({\n          where: { id: player.id },\n          select: [\"id\", \"eloRating\"],\n          relations: [\"gameStats\"],\n        })\n      ),\n    );\n\n    if (players.some((p) => !p)) {\n      throw new Error(\"Some players not found\");\n    }\n\n    const resolvedPlayers = players.filter((p): p is User => Boolean(p));\n\n    // Get winners based on highest score\n    const maxScore = Math.max(...Object.values(room.scores));\n    const winners = resolvedPlayers.filter((p) =>\n      room.scores[p.id] === maxScore\n    );\n    const losers = resolvedPlayers.filter((p) => room.scores[p.id] < maxScore);\n\n    const isDraw = losers.length === 0 ||\n      winners.length === resolvedPlayers.length;\n\n    const newRatings = new Map<number, number>();\n\n    switch (room.type) {\n      case \"1v1\":\n        if (isDraw) {\n          return this.update1v1Draw(room, resolvedPlayers);\n        }\n        return this.update1v1Ratings(room, winners[0], losers[0]);\n      case \"2v2\":\n        if (isDraw) {\n          return this.updateFreeForAllRatings(room, resolvedPlayers);\n        }\n        return this.update2v2Ratings(room, winners, losers);\n      case \"free4all\":\n        return this.updateFreeForAllRatings(room, resolvedPlayers);\n      default:\n        throw new Error(\"Invalid game type\");\n    }\n  }\n\n  /**\n   * Update ratings for 1v1 games\n   */\n  private async update1v1Ratings(\n    room: Room,\n    winner: User,\n    loser: User,\n  ): Promise<Map<number, number>> {\n    const expectedWinnerScore = this.calculateExpectedScore(\n      winner.eloRating,\n      loser.eloRating,\n    );\n    const expectedLoserScore = this.calculateExpectedScore(\n      loser.eloRating,\n      winner.eloRating,\n    );\n\n    const winnerStats = this.getStatsForRoom(winner, room.id);\n    const loserStats = this.getStatsForRoom(loser, room.id);\n\n    const [winnerK, loserK] = await Promise.all([\n      this.calculateKFactor(winnerStats, winner.id),\n      this.calculateKFactor(loserStats, loser.id),\n    ]);\n\n    const winnerNewRating = Math.max(\n      winner.eloRating,\n      Math.round(winner.eloRating + winnerK * (1 - expectedWinnerScore)),\n    );\n    const loserNewRating = Math.round(\n      loser.eloRating + loserK * (0 - expectedLoserScore),\n    );\n\n    await Promise.all([\n      this.userRepository.update(winner.id, { eloRating: winnerNewRating }),\n      this.userRepository.update(loser.id, { eloRating: loserNewRating }),\n    ]);\n\n    return new Map([\n      [winner.id, winnerNewRating],\n      [loser.id, loserNewRating],\n    ]);\n  }\n\n  private async update1v1Draw(\n    room: Room,\n    players: User[],\n  ): Promise<Map<number, number>> {\n    if (players.length !== 2) {\n      throw new Error(\"Invalid player count for 1v1 draw\");\n    }\n    const [playerA, playerB] = players;\n\n    const expectedA = this.calculateExpectedScore(\n      playerA.eloRating,\n      playerB.eloRating,\n    );\n    const expectedB = this.calculateExpectedScore(\n      playerB.eloRating,\n      playerA.eloRating,\n    );\n\n    const statsA = this.getStatsForRoom(playerA, room.id);\n    const statsB = this.getStatsForRoom(playerB, room.id);\n\n    const [kA, kB] = await Promise.all([\n      this.calculateKFactor(statsA, playerA.id),\n      this.calculateKFactor(statsB, playerB.id),\n    ]);\n\n    const newRatingA = Math.round(\n      playerA.eloRating + kA * (0.5 - expectedA),\n    );\n    const newRatingB = Math.round(\n      playerB.eloRating + kB * (0.5 - expectedB),\n    );\n\n    await Promise.all([\n      this.userRepository.update(playerA.id, { eloRating: newRatingA }),\n      this.userRepository.update(playerB.id, { eloRating: newRatingB }),\n    ]);\n\n    return new Map([\n      [playerA.id, newRatingA],\n      [playerB.id, newRatingB],\n    ]);\n  }\n\n  /**\n   * Update ratings for 2v2 team games\n   */\n  private async update2v2Ratings(\n    room: Room,\n    winners: User[],\n    losers: User[],\n  ): Promise<Map<number, number>> {\n    // Split players into teams based on their scores\n    const team1 = winners;\n    const team2 = losers;\n\n    const team1Rating = this.calculateTeamRating(team1);\n    const team2Rating = this.calculateTeamRating(team2);\n\n    const expectedTeam1Score = this.calculateExpectedScore(\n      team1Rating,\n      team2Rating,\n    );\n    const expectedTeam2Score = this.calculateExpectedScore(\n      team2Rating,\n      team1Rating,\n    );\n\n    const newRatings = new Map<number, number>();\n\n    // Update ratings for team 1 (winners)\n    for (const player of team1) {\n      const stats = this.getStatsForRoom(player, room.id);\n      const kFactor = await this.calculateKFactor(stats, player.id);\n      const newRating = Math.max(\n        player.eloRating,\n        Math.round(player.eloRating + kFactor * (1 - expectedTeam1Score)),\n      );\n      newRatings.set(player.id, newRating);\n    }\n\n    // Update ratings for team 2 (losers)\n    for (const player of team2) {\n      const stats = this.getStatsForRoom(player, room.id);\n      const kFactor = await this.calculateKFactor(stats, player.id);\n      const newRating = Math.round(\n        player.eloRating + kFactor * (0 - expectedTeam2Score),\n      );\n      newRatings.set(player.id, newRating);\n    }\n\n    // Save all new ratings\n    await Promise.all(\n      Array.from(newRatings.entries()).map(([playerId, rating]) =>\n        this.userRepository.update(playerId, { eloRating: rating })\n      ),\n    );\n\n    return newRatings;\n  }\n\n  /**\n   * Update ratings for free-for-all games using a modified multi-player ELO system\n   */\n  private async updateFreeForAllRatings(\n    room: Room,\n    players: User[],\n  ): Promise<Map<number, number>> {\n    const newRatings = new Map<number, number>();\n    const maxScore = Math.max(...Object.values(room.scores));\n\n    // Sort players by score in descending order\n    const sortedPlayers = [...players].sort(\n      (a, b) => room.scores[b.id] - room.scores[a.id],\n    );\n\n    // Calculate expected scores for each player against every other player\n    for (let i = 0; i < sortedPlayers.length; i++) {\n      const player = sortedPlayers[i];\n      let expectedScore = 0;\n      let actualScore = 0;\n\n      // Calculate expected and actual scores against each opponent\n      for (let j = 0; j < sortedPlayers.length; j++) {\n        if (i === j) continue;\n\n        const opponent = sortedPlayers[j];\n        expectedScore += this.calculateExpectedScore(\n          player.eloRating,\n          opponent.eloRating,\n        );\n\n        // Actual score is 1 if player scored higher, 0.5 if tied, 0 if lower\n        if (room.scores[player.id] > room.scores[opponent.id]) {\n          actualScore += 1;\n        } else if (room.scores[player.id] === room.scores[opponent.id]) {\n          actualScore += 0.5;\n        }\n      }\n\n      // Normalize scores by number of opponents\n      const normalizedExpectedScore = expectedScore /\n        (sortedPlayers.length - 1);\n      const normalizedActualScore = actualScore / (sortedPlayers.length - 1);\n\n      // Calculate new rating\n      const stats = this.getStatsForRoom(player, room.id);\n      const kFactor = await this.calculateKFactor(stats, player.id);\n\n      const newRating = Math.round(\n        player.eloRating +\n          kFactor * (normalizedActualScore - normalizedExpectedScore),\n      );\n      const adjustedRating = room.scores[player.id] === maxScore\n        ? Math.max(player.eloRating, newRating)\n        : newRating;\n      newRatings.set(player.id, adjustedRating);\n    }\n\n    // Save all new ratings\n    await Promise.all(\n      Array.from(newRatings.entries()).map(([playerId, rating]) =>\n        this.userRepository.update(playerId, { eloRating: rating })\n      ),\n    );\n\n    return newRatings;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a269e5cb933029af5f443b2269f6811ccb0809a5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vej2511ap = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vej2511ap();
cov_1vej2511ap().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1vej2511ap().s[1]++;
exports.EloService = void 0;
const config_1 =
/* istanbul ignore next */
(cov_1vej2511ap().s[2]++, require("../config/config"));
class EloService {
  userRepository;
  roomRepository;
  gameStatsRepository;
  K_FACTOR_BASE =
  /* istanbul ignore next */
  (cov_1vej2511ap().s[3]++, config_1.config.game.elo.kFactorBase);
  WIN_STREAK_MULTIPLIER =
  /* istanbul ignore next */
  (cov_1vej2511ap().s[4]++, config_1.config.game.elo.winStreakMultiplier);
  MAX_WIN_STREAK_BONUS =
  /* istanbul ignore next */
  (cov_1vej2511ap().s[5]++, config_1.config.game.elo.maxWinStreakBonus);
  GAMES_PLAYED_DAMPENING =
  /* istanbul ignore next */
  (cov_1vej2511ap().s[6]++, config_1.config.game.elo.gamesPlayedDampening);
  constructor(userRepository, roomRepository, gameStatsRepository) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[0]++;
    cov_1vej2511ap().s[7]++;
    this.userRepository = userRepository;
    /* istanbul ignore next */
    cov_1vej2511ap().s[8]++;
    this.roomRepository = roomRepository;
    /* istanbul ignore next */
    cov_1vej2511ap().s[9]++;
    this.gameStatsRepository = gameStatsRepository;
  }
  /**
   * Calculate the expected score (probability of winning)
   */
  calculateExpectedScore(playerRating, opponentRating) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[1]++;
    cov_1vej2511ap().s[10]++;
    return 1 / (1 + Math.pow(10, (opponentRating - playerRating) / 400));
  }
  /**
   * Get the number of games played by a user
   */
  async getGamesPlayed(userId) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[2]++;
    const count =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[11]++, await this.roomRepository.createQueryBuilder("room").innerJoin("room_players", "rp", "rp.room_id = room.id").where("room.status = :status", {
      status: "finished"
    }).andWhere("rp.user_id = :userId", {
      userId
    }).getCount());
    /* istanbul ignore next */
    cov_1vej2511ap().s[12]++;
    return count;
  }
  /**
   * Calculate the K-factor based on games played and win streak
   */
  async calculateKFactor(stats, userId) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[3]++;
    const gamesPlayed =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[13]++, await this.getGamesPlayed(userId));
    const winStreak =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[14]++,
    /* istanbul ignore next */
    (cov_1vej2511ap().b[0][0]++, stats?.winStreak) ||
    /* istanbul ignore next */
    (cov_1vej2511ap().b[0][1]++, 0));
    // Dampen K-factor based on games played
    const gamesDampening =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[15]++, Math.max(0.5, this.GAMES_PLAYED_DAMPENING / (gamesPlayed + this.GAMES_PLAYED_DAMPENING)));
    // Calculate win streak bonus (capped at MAX_WIN_STREAK_BONUS)
    const winStreakBonus =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[16]++, Math.min(this.MAX_WIN_STREAK_BONUS, winStreak * this.WIN_STREAK_MULTIPLIER));
    /* istanbul ignore next */
    cov_1vej2511ap().s[17]++;
    return this.K_FACTOR_BASE * gamesDampening * (1 + winStreakBonus);
  }
  /**
   * Calculate team rating by averaging member ratings
   */
  calculateTeamRating(teamMembers) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[4]++;
    cov_1vej2511ap().s[18]++;
    if (teamMembers.length === 0) {
      /* istanbul ignore next */
      cov_1vej2511ap().b[1][0]++;
      cov_1vej2511ap().s[19]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1vej2511ap().b[1][1]++;
    }
    cov_1vej2511ap().s[20]++;
    return teamMembers.reduce((sum, player) => {
      /* istanbul ignore next */
      cov_1vej2511ap().f[5]++;
      cov_1vej2511ap().s[21]++;
      return sum + player.eloRating;
    }, 0) / teamMembers.length;
  }
  getStatsForRoom(player, roomId) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[6]++;
    cov_1vej2511ap().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_1vej2511ap().b[3][0]++, !player.gameStats) ||
    /* istanbul ignore next */
    (cov_1vej2511ap().b[3][1]++, player.gameStats.length === 0)) {
      /* istanbul ignore next */
      cov_1vej2511ap().b[2][0]++;
      cov_1vej2511ap().s[23]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_1vej2511ap().b[2][1]++;
    }
    const currentGameStats =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[24]++, player.gameStats.find(stat => {
      /* istanbul ignore next */
      cov_1vej2511ap().f[7]++;
      cov_1vej2511ap().s[25]++;
      return stat.roomId === roomId;
    }));
    /* istanbul ignore next */
    cov_1vej2511ap().s[26]++;
    if (currentGameStats) {
      /* istanbul ignore next */
      cov_1vej2511ap().b[4][0]++;
      cov_1vej2511ap().s[27]++;
      return currentGameStats;
    } else
    /* istanbul ignore next */
    {
      cov_1vej2511ap().b[4][1]++;
    }
    let latestStats;
    /* istanbul ignore next */
    cov_1vej2511ap().s[28]++;
    for (const stat of player.gameStats) {
      /* istanbul ignore next */
      cov_1vej2511ap().s[29]++;
      if (!latestStats) {
        /* istanbul ignore next */
        cov_1vej2511ap().b[5][0]++;
        cov_1vej2511ap().s[30]++;
        latestStats = stat;
        /* istanbul ignore next */
        cov_1vej2511ap().s[31]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1vej2511ap().b[5][1]++;
      }
      cov_1vej2511ap().s[32]++;
      if (
      /* istanbul ignore next */
      (cov_1vej2511ap().b[7][0]++, stat.createdAt) &&
      /* istanbul ignore next */
      (cov_1vej2511ap().b[7][1]++, latestStats.createdAt)) {
        /* istanbul ignore next */
        cov_1vej2511ap().b[6][0]++;
        cov_1vej2511ap().s[33]++;
        if (stat.createdAt > latestStats.createdAt) {
          /* istanbul ignore next */
          cov_1vej2511ap().b[8][0]++;
          cov_1vej2511ap().s[34]++;
          latestStats = stat;
        } else
        /* istanbul ignore next */
        {
          cov_1vej2511ap().b[8][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_1vej2511ap().b[6][1]++;
        cov_1vej2511ap().s[35]++;
        if (
        /* istanbul ignore next */
        (cov_1vej2511ap().b[10][0]++, stat.createdAt) &&
        /* istanbul ignore next */
        (cov_1vej2511ap().b[10][1]++, !latestStats.createdAt)) {
          /* istanbul ignore next */
          cov_1vej2511ap().b[9][0]++;
          cov_1vej2511ap().s[36]++;
          latestStats = stat;
        } else
        /* istanbul ignore next */
        {
          cov_1vej2511ap().b[9][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_1vej2511ap().s[37]++;
    return latestStats;
  }
  async getUserGameStats(userId, startDate, endDate) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[8]++;
    const query =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[38]++, this.gameStatsRepository.createQueryBuilder("stats").leftJoinAndSelect("stats.room", "room").where("stats.userId = :userId", {
      userId
    }).andWhere("room.status = :status", {
      status: "finished"
    }).orderBy("stats.createdAt", "DESC"));
    /* istanbul ignore next */
    cov_1vej2511ap().s[39]++;
    if (startDate) {
      /* istanbul ignore next */
      cov_1vej2511ap().b[11][0]++;
      cov_1vej2511ap().s[40]++;
      query.andWhere("stats.createdAt >= :startDate", {
        startDate
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vej2511ap().b[11][1]++;
    }
    cov_1vej2511ap().s[41]++;
    if (endDate) {
      /* istanbul ignore next */
      cov_1vej2511ap().b[12][0]++;
      cov_1vej2511ap().s[42]++;
      query.andWhere("stats.createdAt <= :endDate", {
        endDate
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vej2511ap().b[12][1]++;
    }
    cov_1vej2511ap().s[43]++;
    return query.getMany();
  }
  /**
   * Update ELO ratings for a finished game room
   */
  async updateEloRatings(room) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[9]++;
    const players =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[44]++, await Promise.all(room.players.map(player => {
      /* istanbul ignore next */
      cov_1vej2511ap().f[10]++;
      cov_1vej2511ap().s[45]++;
      return this.userRepository.findOne({
        where: {
          id: player.id
        },
        select: ["id", "eloRating"],
        relations: ["gameStats"]
      });
    })));
    /* istanbul ignore next */
    cov_1vej2511ap().s[46]++;
    if (players.some(p => {
      /* istanbul ignore next */
      cov_1vej2511ap().f[11]++;
      cov_1vej2511ap().s[47]++;
      return !p;
    })) {
      /* istanbul ignore next */
      cov_1vej2511ap().b[13][0]++;
      cov_1vej2511ap().s[48]++;
      throw new Error("Some players not found");
    } else
    /* istanbul ignore next */
    {
      cov_1vej2511ap().b[13][1]++;
    }
    const resolvedPlayers =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[49]++, players.filter(p => {
      /* istanbul ignore next */
      cov_1vej2511ap().f[12]++;
      cov_1vej2511ap().s[50]++;
      return Boolean(p);
    }));
    // Get winners based on highest score
    const maxScore =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[51]++, Math.max(...Object.values(room.scores)));
    const winners =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[52]++, resolvedPlayers.filter(p => {
      /* istanbul ignore next */
      cov_1vej2511ap().f[13]++;
      cov_1vej2511ap().s[53]++;
      return room.scores[p.id] === maxScore;
    }));
    const losers =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[54]++, resolvedPlayers.filter(p => {
      /* istanbul ignore next */
      cov_1vej2511ap().f[14]++;
      cov_1vej2511ap().s[55]++;
      return room.scores[p.id] < maxScore;
    }));
    const isDraw =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[56]++,
    /* istanbul ignore next */
    (cov_1vej2511ap().b[14][0]++, losers.length === 0) ||
    /* istanbul ignore next */
    (cov_1vej2511ap().b[14][1]++, winners.length === resolvedPlayers.length));
    const newRatings =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[57]++, new Map());
    /* istanbul ignore next */
    cov_1vej2511ap().s[58]++;
    switch (room.type) {
      case "1v1":
        /* istanbul ignore next */
        cov_1vej2511ap().b[15][0]++;
        cov_1vej2511ap().s[59]++;
        if (isDraw) {
          /* istanbul ignore next */
          cov_1vej2511ap().b[16][0]++;
          cov_1vej2511ap().s[60]++;
          return this.update1v1Draw(room, resolvedPlayers);
        } else
        /* istanbul ignore next */
        {
          cov_1vej2511ap().b[16][1]++;
        }
        cov_1vej2511ap().s[61]++;
        return this.update1v1Ratings(room, winners[0], losers[0]);
      case "2v2":
        /* istanbul ignore next */
        cov_1vej2511ap().b[15][1]++;
        cov_1vej2511ap().s[62]++;
        if (isDraw) {
          /* istanbul ignore next */
          cov_1vej2511ap().b[17][0]++;
          cov_1vej2511ap().s[63]++;
          return this.updateFreeForAllRatings(room, resolvedPlayers);
        } else
        /* istanbul ignore next */
        {
          cov_1vej2511ap().b[17][1]++;
        }
        cov_1vej2511ap().s[64]++;
        return this.update2v2Ratings(room, winners, losers);
      case "free4all":
        /* istanbul ignore next */
        cov_1vej2511ap().b[15][2]++;
        cov_1vej2511ap().s[65]++;
        return this.updateFreeForAllRatings(room, resolvedPlayers);
      default:
        /* istanbul ignore next */
        cov_1vej2511ap().b[15][3]++;
        cov_1vej2511ap().s[66]++;
        throw new Error("Invalid game type");
    }
  }
  /**
   * Update ratings for 1v1 games
   */
  async update1v1Ratings(room, winner, loser) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[15]++;
    const expectedWinnerScore =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[67]++, this.calculateExpectedScore(winner.eloRating, loser.eloRating));
    const expectedLoserScore =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[68]++, this.calculateExpectedScore(loser.eloRating, winner.eloRating));
    const winnerStats =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[69]++, this.getStatsForRoom(winner, room.id));
    const loserStats =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[70]++, this.getStatsForRoom(loser, room.id));
    const [winnerK, loserK] =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[71]++, await Promise.all([this.calculateKFactor(winnerStats, winner.id), this.calculateKFactor(loserStats, loser.id)]));
    const winnerNewRating =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[72]++, Math.max(winner.eloRating, Math.round(winner.eloRating + winnerK * (1 - expectedWinnerScore))));
    const loserNewRating =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[73]++, Math.round(loser.eloRating + loserK * (0 - expectedLoserScore)));
    /* istanbul ignore next */
    cov_1vej2511ap().s[74]++;
    await Promise.all([this.userRepository.update(winner.id, {
      eloRating: winnerNewRating
    }), this.userRepository.update(loser.id, {
      eloRating: loserNewRating
    })]);
    /* istanbul ignore next */
    cov_1vej2511ap().s[75]++;
    return new Map([[winner.id, winnerNewRating], [loser.id, loserNewRating]]);
  }
  async update1v1Draw(room, players) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[16]++;
    cov_1vej2511ap().s[76]++;
    if (players.length !== 2) {
      /* istanbul ignore next */
      cov_1vej2511ap().b[18][0]++;
      cov_1vej2511ap().s[77]++;
      throw new Error("Invalid player count for 1v1 draw");
    } else
    /* istanbul ignore next */
    {
      cov_1vej2511ap().b[18][1]++;
    }
    const [playerA, playerB] =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[78]++, players);
    const expectedA =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[79]++, this.calculateExpectedScore(playerA.eloRating, playerB.eloRating));
    const expectedB =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[80]++, this.calculateExpectedScore(playerB.eloRating, playerA.eloRating));
    const statsA =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[81]++, this.getStatsForRoom(playerA, room.id));
    const statsB =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[82]++, this.getStatsForRoom(playerB, room.id));
    const [kA, kB] =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[83]++, await Promise.all([this.calculateKFactor(statsA, playerA.id), this.calculateKFactor(statsB, playerB.id)]));
    const newRatingA =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[84]++, Math.round(playerA.eloRating + kA * (0.5 - expectedA)));
    const newRatingB =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[85]++, Math.round(playerB.eloRating + kB * (0.5 - expectedB)));
    /* istanbul ignore next */
    cov_1vej2511ap().s[86]++;
    await Promise.all([this.userRepository.update(playerA.id, {
      eloRating: newRatingA
    }), this.userRepository.update(playerB.id, {
      eloRating: newRatingB
    })]);
    /* istanbul ignore next */
    cov_1vej2511ap().s[87]++;
    return new Map([[playerA.id, newRatingA], [playerB.id, newRatingB]]);
  }
  /**
   * Update ratings for 2v2 team games
   */
  async update2v2Ratings(room, winners, losers) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[17]++;
    // Split players into teams based on their scores
    const team1 =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[88]++, winners);
    const team2 =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[89]++, losers);
    const team1Rating =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[90]++, this.calculateTeamRating(team1));
    const team2Rating =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[91]++, this.calculateTeamRating(team2));
    const expectedTeam1Score =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[92]++, this.calculateExpectedScore(team1Rating, team2Rating));
    const expectedTeam2Score =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[93]++, this.calculateExpectedScore(team2Rating, team1Rating));
    const newRatings =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[94]++, new Map());
    // Update ratings for team 1 (winners)
    /* istanbul ignore next */
    cov_1vej2511ap().s[95]++;
    for (const player of team1) {
      const stats =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[96]++, this.getStatsForRoom(player, room.id));
      const kFactor =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[97]++, await this.calculateKFactor(stats, player.id));
      const newRating =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[98]++, Math.max(player.eloRating, Math.round(player.eloRating + kFactor * (1 - expectedTeam1Score))));
      /* istanbul ignore next */
      cov_1vej2511ap().s[99]++;
      newRatings.set(player.id, newRating);
    }
    // Update ratings for team 2 (losers)
    /* istanbul ignore next */
    cov_1vej2511ap().s[100]++;
    for (const player of team2) {
      const stats =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[101]++, this.getStatsForRoom(player, room.id));
      const kFactor =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[102]++, await this.calculateKFactor(stats, player.id));
      const newRating =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[103]++, Math.round(player.eloRating + kFactor * (0 - expectedTeam2Score)));
      /* istanbul ignore next */
      cov_1vej2511ap().s[104]++;
      newRatings.set(player.id, newRating);
    }
    // Save all new ratings
    /* istanbul ignore next */
    cov_1vej2511ap().s[105]++;
    await Promise.all(Array.from(newRatings.entries()).map(([playerId, rating]) => {
      /* istanbul ignore next */
      cov_1vej2511ap().f[18]++;
      cov_1vej2511ap().s[106]++;
      return this.userRepository.update(playerId, {
        eloRating: rating
      });
    }));
    /* istanbul ignore next */
    cov_1vej2511ap().s[107]++;
    return newRatings;
  }
  /**
   * Update ratings for free-for-all games using a modified multi-player ELO system
   */
  async updateFreeForAllRatings(room, players) {
    /* istanbul ignore next */
    cov_1vej2511ap().f[19]++;
    const newRatings =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[108]++, new Map());
    const maxScore =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[109]++, Math.max(...Object.values(room.scores)));
    // Sort players by score in descending order
    const sortedPlayers =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[110]++, [...players].sort((a, b) => {
      /* istanbul ignore next */
      cov_1vej2511ap().f[20]++;
      cov_1vej2511ap().s[111]++;
      return room.scores[b.id] - room.scores[a.id];
    }));
    // Calculate expected scores for each player against every other player
    /* istanbul ignore next */
    cov_1vej2511ap().s[112]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1vej2511ap().s[113]++, 0); i < sortedPlayers.length; i++) {
      const player =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[114]++, sortedPlayers[i]);
      let expectedScore =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[115]++, 0);
      let actualScore =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[116]++, 0);
      // Calculate expected and actual scores against each opponent
      /* istanbul ignore next */
      cov_1vej2511ap().s[117]++;
      for (let j =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[118]++, 0); j < sortedPlayers.length; j++) {
        /* istanbul ignore next */
        cov_1vej2511ap().s[119]++;
        if (i === j) {
          /* istanbul ignore next */
          cov_1vej2511ap().b[19][0]++;
          cov_1vej2511ap().s[120]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1vej2511ap().b[19][1]++;
        }
        const opponent =
        /* istanbul ignore next */
        (cov_1vej2511ap().s[121]++, sortedPlayers[j]);
        /* istanbul ignore next */
        cov_1vej2511ap().s[122]++;
        expectedScore += this.calculateExpectedScore(player.eloRating, opponent.eloRating);
        // Actual score is 1 if player scored higher, 0.5 if tied, 0 if lower
        /* istanbul ignore next */
        cov_1vej2511ap().s[123]++;
        if (room.scores[player.id] > room.scores[opponent.id]) {
          /* istanbul ignore next */
          cov_1vej2511ap().b[20][0]++;
          cov_1vej2511ap().s[124]++;
          actualScore += 1;
        } else {
          /* istanbul ignore next */
          cov_1vej2511ap().b[20][1]++;
          cov_1vej2511ap().s[125]++;
          if (room.scores[player.id] === room.scores[opponent.id]) {
            /* istanbul ignore next */
            cov_1vej2511ap().b[21][0]++;
            cov_1vej2511ap().s[126]++;
            actualScore += 0.5;
          } else
          /* istanbul ignore next */
          {
            cov_1vej2511ap().b[21][1]++;
          }
        }
      }
      // Normalize scores by number of opponents
      const normalizedExpectedScore =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[127]++, expectedScore / (sortedPlayers.length - 1));
      const normalizedActualScore =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[128]++, actualScore / (sortedPlayers.length - 1));
      // Calculate new rating
      const stats =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[129]++, this.getStatsForRoom(player, room.id));
      const kFactor =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[130]++, await this.calculateKFactor(stats, player.id));
      const newRating =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[131]++, Math.round(player.eloRating + kFactor * (normalizedActualScore - normalizedExpectedScore)));
      const adjustedRating =
      /* istanbul ignore next */
      (cov_1vej2511ap().s[132]++, room.scores[player.id] === maxScore ?
      /* istanbul ignore next */
      (cov_1vej2511ap().b[22][0]++, Math.max(player.eloRating, newRating)) :
      /* istanbul ignore next */
      (cov_1vej2511ap().b[22][1]++, newRating));
      /* istanbul ignore next */
      cov_1vej2511ap().s[133]++;
      newRatings.set(player.id, adjustedRating);
    }
    // Save all new ratings
    /* istanbul ignore next */
    cov_1vej2511ap().s[134]++;
    await Promise.all(Array.from(newRatings.entries()).map(([playerId, rating]) => {
      /* istanbul ignore next */
      cov_1vej2511ap().f[21]++;
      cov_1vej2511ap().s[135]++;
      return this.userRepository.update(playerId, {
        eloRating: rating
      });
    }));
    /* istanbul ignore next */
    cov_1vej2511ap().s[136]++;
    return newRatings;
  }
}
/* istanbul ignore next */
cov_1vej2511ap().s[137]++;
exports.EloService = EloService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
