{"version":3,"names":["cov_1vej2511ap","actualCoverage","s","config_1","require","EloService","userRepository","roomRepository","gameStatsRepository","K_FACTOR_BASE","config","game","elo","kFactorBase","WIN_STREAK_MULTIPLIER","winStreakMultiplier","MAX_WIN_STREAK_BONUS","maxWinStreakBonus","GAMES_PLAYED_DAMPENING","gamesPlayedDampening","constructor","f","calculateExpectedScore","playerRating","opponentRating","Math","pow","getGamesPlayed","userId","count","createQueryBuilder","innerJoin","where","status","andWhere","getCount","calculateKFactor","stats","gamesPlayed","winStreak","b","gamesDampening","max","winStreakBonus","min","calculateTeamRating","teamMembers","length","reduce","sum","player","eloRating","getStatsForRoom","roomId","gameStats","undefined","currentGameStats","find","stat","latestStats","createdAt","getUserGameStats","startDate","endDate","query","leftJoinAndSelect","orderBy","getMany","updateEloRatings","room","players","Promise","all","map","findOne","id","select","relations","some","p","Error","resolvedPlayers","filter","Boolean","maxScore","Object","values","scores","winners","losers","isDraw","newRatings","Map","type","update1v1Draw","update1v1Ratings","updateFreeForAllRatings","update2v2Ratings","winner","loser","expectedWinnerScore","expectedLoserScore","winnerStats","loserStats","winnerK","loserK","winnerNewRating","round","loserNewRating","update","playerA","playerB","expectedA","expectedB","statsA","statsB","kA","kB","newRatingA","newRatingB","team1","team2","team1Rating","team2Rating","expectedTeam1Score","expectedTeam2Score","kFactor","newRating","set","Array","from","entries","playerId","rating","sortedPlayers","sort","a","i","expectedScore","actualScore","j","opponent","normalizedExpectedScore","normalizedActualScore","adjustedRating","exports"],"sources":["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/EloService.ts"],"sourcesContent":["import { User } from \"../entities/User\";\nimport { Repository } from \"typeorm\";\nimport { config } from \"../config/config\";\nimport { Room } from \"../entities/Room\";\nimport { GameStats } from \"../entities/GameStats\";\n\nexport class EloService {\n  private readonly K_FACTOR_BASE = config.game.elo.kFactorBase;\n  private readonly WIN_STREAK_MULTIPLIER = config.game.elo.winStreakMultiplier;\n  private readonly MAX_WIN_STREAK_BONUS = config.game.elo.maxWinStreakBonus;\n  private readonly GAMES_PLAYED_DAMPENING =\n    config.game.elo.gamesPlayedDampening;\n\n  constructor(\n    private userRepository: Repository<User>,\n    private roomRepository: Repository<Room>,\n    private gameStatsRepository: Repository<GameStats>,\n  ) {}\n\n  /**\n   * Calculate the expected score (probability of winning)\n   */\n  private calculateExpectedScore(\n    playerRating: number,\n    opponentRating: number,\n  ): number {\n    return 1 / (1 + Math.pow(10, (opponentRating - playerRating) / 400));\n  }\n\n  /**\n   * Get the number of games played by a user\n   */\n  private async getGamesPlayed(userId: number): Promise<number> {\n    const count = await this.roomRepository.createQueryBuilder(\"room\")\n      .innerJoin(\"room_players\", \"rp\", \"rp.room_id = room.id\")\n      .where(\"room.status = :status\", { status: \"finished\" })\n      .andWhere(\"rp.user_id = :userId\", { userId })\n      .getCount();\n    return count;\n  }\n\n  /**\n   * Calculate the K-factor based on games played and win streak\n   */\n  private async calculateKFactor(\n    stats: GameStats | undefined,\n    userId: number,\n  ): Promise<number> {\n    const gamesPlayed = await this.getGamesPlayed(userId);\n    const winStreak = stats?.winStreak || 0;\n\n    // Dampen K-factor based on games played\n    const gamesDampening = Math.max(\n      0.5,\n      this.GAMES_PLAYED_DAMPENING /\n        (gamesPlayed + this.GAMES_PLAYED_DAMPENING),\n    );\n\n    // Calculate win streak bonus (capped at MAX_WIN_STREAK_BONUS)\n    const winStreakBonus = Math.min(\n      this.MAX_WIN_STREAK_BONUS,\n      winStreak * this.WIN_STREAK_MULTIPLIER,\n    );\n\n    return this.K_FACTOR_BASE * gamesDampening * (1 + winStreakBonus);\n  }\n\n  /**\n   * Calculate team rating by averaging member ratings\n   */\n  private calculateTeamRating(teamMembers: User[]): number {\n    if (teamMembers.length === 0) {\n      return 0;\n    }\n    return teamMembers.reduce((sum, player) => sum + player.eloRating, 0) /\n      teamMembers.length;\n  }\n\n  private getStatsForRoom(player: User, roomId: number): GameStats | undefined {\n    if (!player.gameStats || player.gameStats.length === 0) {\n      return undefined;\n    }\n\n    const currentGameStats = player.gameStats.find((stat) =>\n      stat.roomId === roomId\n    );\n    if (currentGameStats) {\n      return currentGameStats;\n    }\n\n    let latestStats: GameStats | undefined;\n\n    for (const stat of player.gameStats) {\n      if (!latestStats) {\n        latestStats = stat;\n        continue;\n      }\n\n      if (stat.createdAt && latestStats.createdAt) {\n        if (stat.createdAt > latestStats.createdAt) {\n          latestStats = stat;\n        }\n      } else if (stat.createdAt && !latestStats.createdAt) {\n        latestStats = stat;\n      }\n    }\n\n    return latestStats;\n  }\n\n  async getUserGameStats(\n    userId: number,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<GameStats[]> {\n    const query = this.gameStatsRepository\n      .createQueryBuilder(\"stats\")\n      .leftJoinAndSelect(\"stats.room\", \"room\")\n      .where(\"stats.userId = :userId\", { userId })\n      .andWhere(\"room.status = :status\", { status: \"finished\" })\n      .orderBy(\"stats.createdAt\", \"DESC\");\n\n    if (startDate) {\n      query.andWhere(\"stats.createdAt >= :startDate\", { startDate });\n    }\n\n    if (endDate) {\n      query.andWhere(\"stats.createdAt <= :endDate\", { endDate });\n    }\n\n    return query.getMany();\n  }\n\n  /**\n   * Update ELO ratings for a finished game room\n   */\n  async updateEloRatings(room: Room): Promise<Map<number, number>> {\n    const players = await Promise.all(\n      room.players.map((player) =>\n        this.userRepository.findOne({\n          where: { id: player.id },\n          select: [\"id\", \"eloRating\"],\n          relations: [\"gameStats\"],\n        })\n      ),\n    );\n\n    if (players.some((p) => !p)) {\n      throw new Error(\"Some players not found\");\n    }\n\n    const resolvedPlayers = players.filter((p): p is User => Boolean(p));\n\n    // Get winners based on highest score\n    const maxScore = Math.max(...Object.values(room.scores));\n    const winners = resolvedPlayers.filter((p) =>\n      room.scores[p.id] === maxScore\n    );\n    const losers = resolvedPlayers.filter((p) => room.scores[p.id] < maxScore);\n\n    const isDraw = losers.length === 0 ||\n      winners.length === resolvedPlayers.length;\n\n    const newRatings = new Map<number, number>();\n\n    switch (room.type) {\n      case \"1v1\":\n        if (isDraw) {\n          return this.update1v1Draw(room, resolvedPlayers);\n        }\n        return this.update1v1Ratings(room, winners[0], losers[0]);\n      case \"2v2\":\n        if (isDraw) {\n          return this.updateFreeForAllRatings(room, resolvedPlayers);\n        }\n        return this.update2v2Ratings(room, winners, losers);\n      case \"free4all\":\n        return this.updateFreeForAllRatings(room, resolvedPlayers);\n      default:\n        throw new Error(\"Invalid game type\");\n    }\n  }\n\n  /**\n   * Update ratings for 1v1 games\n   */\n  private async update1v1Ratings(\n    room: Room,\n    winner: User,\n    loser: User,\n  ): Promise<Map<number, number>> {\n    const expectedWinnerScore = this.calculateExpectedScore(\n      winner.eloRating,\n      loser.eloRating,\n    );\n    const expectedLoserScore = this.calculateExpectedScore(\n      loser.eloRating,\n      winner.eloRating,\n    );\n\n    const winnerStats = this.getStatsForRoom(winner, room.id);\n    const loserStats = this.getStatsForRoom(loser, room.id);\n\n    const [winnerK, loserK] = await Promise.all([\n      this.calculateKFactor(winnerStats, winner.id),\n      this.calculateKFactor(loserStats, loser.id),\n    ]);\n\n    const winnerNewRating = Math.max(\n      winner.eloRating,\n      Math.round(winner.eloRating + winnerK * (1 - expectedWinnerScore)),\n    );\n    const loserNewRating = Math.round(\n      loser.eloRating + loserK * (0 - expectedLoserScore),\n    );\n\n    await Promise.all([\n      this.userRepository.update(winner.id, { eloRating: winnerNewRating }),\n      this.userRepository.update(loser.id, { eloRating: loserNewRating }),\n    ]);\n\n    return new Map([\n      [winner.id, winnerNewRating],\n      [loser.id, loserNewRating],\n    ]);\n  }\n\n  private async update1v1Draw(\n    room: Room,\n    players: User[],\n  ): Promise<Map<number, number>> {\n    if (players.length !== 2) {\n      throw new Error(\"Invalid player count for 1v1 draw\");\n    }\n    const [playerA, playerB] = players;\n\n    const expectedA = this.calculateExpectedScore(\n      playerA.eloRating,\n      playerB.eloRating,\n    );\n    const expectedB = this.calculateExpectedScore(\n      playerB.eloRating,\n      playerA.eloRating,\n    );\n\n    const statsA = this.getStatsForRoom(playerA, room.id);\n    const statsB = this.getStatsForRoom(playerB, room.id);\n\n    const [kA, kB] = await Promise.all([\n      this.calculateKFactor(statsA, playerA.id),\n      this.calculateKFactor(statsB, playerB.id),\n    ]);\n\n    const newRatingA = Math.round(\n      playerA.eloRating + kA * (0.5 - expectedA),\n    );\n    const newRatingB = Math.round(\n      playerB.eloRating + kB * (0.5 - expectedB),\n    );\n\n    await Promise.all([\n      this.userRepository.update(playerA.id, { eloRating: newRatingA }),\n      this.userRepository.update(playerB.id, { eloRating: newRatingB }),\n    ]);\n\n    return new Map([\n      [playerA.id, newRatingA],\n      [playerB.id, newRatingB],\n    ]);\n  }\n\n  /**\n   * Update ratings for 2v2 team games\n   */\n  private async update2v2Ratings(\n    room: Room,\n    winners: User[],\n    losers: User[],\n  ): Promise<Map<number, number>> {\n    // Split players into teams based on their scores\n    const team1 = winners;\n    const team2 = losers;\n\n    const team1Rating = this.calculateTeamRating(team1);\n    const team2Rating = this.calculateTeamRating(team2);\n\n    const expectedTeam1Score = this.calculateExpectedScore(\n      team1Rating,\n      team2Rating,\n    );\n    const expectedTeam2Score = this.calculateExpectedScore(\n      team2Rating,\n      team1Rating,\n    );\n\n    const newRatings = new Map<number, number>();\n\n    // Update ratings for team 1 (winners)\n    for (const player of team1) {\n      const stats = this.getStatsForRoom(player, room.id);\n      const kFactor = await this.calculateKFactor(stats, player.id);\n      const newRating = Math.max(\n        player.eloRating,\n        Math.round(player.eloRating + kFactor * (1 - expectedTeam1Score)),\n      );\n      newRatings.set(player.id, newRating);\n    }\n\n    // Update ratings for team 2 (losers)\n    for (const player of team2) {\n      const stats = this.getStatsForRoom(player, room.id);\n      const kFactor = await this.calculateKFactor(stats, player.id);\n      const newRating = Math.round(\n        player.eloRating + kFactor * (0 - expectedTeam2Score),\n      );\n      newRatings.set(player.id, newRating);\n    }\n\n    // Save all new ratings\n    await Promise.all(\n      Array.from(newRatings.entries()).map(([playerId, rating]) =>\n        this.userRepository.update(playerId, { eloRating: rating })\n      ),\n    );\n\n    return newRatings;\n  }\n\n  /**\n   * Update ratings for free-for-all games using a modified multi-player ELO system\n   */\n  private async updateFreeForAllRatings(\n    room: Room,\n    players: User[],\n  ): Promise<Map<number, number>> {\n    const newRatings = new Map<number, number>();\n    const maxScore = Math.max(...Object.values(room.scores));\n\n    // Sort players by score in descending order\n    const sortedPlayers = [...players].sort(\n      (a, b) => room.scores[b.id] - room.scores[a.id],\n    );\n\n    // Calculate expected scores for each player against every other player\n    for (let i = 0; i < sortedPlayers.length; i++) {\n      const player = sortedPlayers[i];\n      let expectedScore = 0;\n      let actualScore = 0;\n\n      // Calculate expected and actual scores against each opponent\n      for (let j = 0; j < sortedPlayers.length; j++) {\n        if (i === j) continue;\n\n        const opponent = sortedPlayers[j];\n        expectedScore += this.calculateExpectedScore(\n          player.eloRating,\n          opponent.eloRating,\n        );\n\n        // Actual score is 1 if player scored higher, 0.5 if tied, 0 if lower\n        if (room.scores[player.id] > room.scores[opponent.id]) {\n          actualScore += 1;\n        } else if (room.scores[player.id] === room.scores[opponent.id]) {\n          actualScore += 0.5;\n        }\n      }\n\n      // Normalize scores by number of opponents\n      const normalizedExpectedScore = expectedScore /\n        (sortedPlayers.length - 1);\n      const normalizedActualScore = actualScore / (sortedPlayers.length - 1);\n\n      // Calculate new rating\n      const stats = this.getStatsForRoom(player, room.id);\n      const kFactor = await this.calculateKFactor(stats, player.id);\n\n      const newRating = Math.round(\n        player.eloRating +\n          kFactor * (normalizedActualScore - normalizedExpectedScore),\n      );\n      const adjustedRating = room.scores[player.id] === maxScore\n        ? Math.max(player.eloRating, newRating)\n        : newRating;\n      newRatings.set(player.id, adjustedRating);\n    }\n\n    // Save all new ratings\n    await Promise.all(\n      Array.from(newRatings.entries()).map(([playerId, rating]) =>\n        this.userRepository.update(playerId, { eloRating: rating })\n      ),\n    );\n\n    return newRatings;\n  }\n}\n"],"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","ignoreList":[]}
