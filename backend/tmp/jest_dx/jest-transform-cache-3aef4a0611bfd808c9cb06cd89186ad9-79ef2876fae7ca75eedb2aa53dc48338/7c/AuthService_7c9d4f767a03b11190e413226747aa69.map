{"version":3,"names":["cov_1kkymvlueo","actualCoverage","User_1","s","require","api_1","jsonwebtoken_1","__importDefault","bcrypt_1","config_1","EmailService_1","crypto_1","AuthService","ormConnection","constructor","f","generateAccessToken","user","default","sign","sub","id","roles","config","auth","secretAccessToken","expiresIn","authTokenExpiry","generateRefreshToken","aud","authRefreshTokenExpiry","signup","app","body","email","password","username","uniqueValues","getRepository","User","findOne","select","where","b","errors","push","UniqueConstraintError","map","error","join","hashedPassword","hash","save","confirmed_mail","description","attributes","accessToken","refreshToken","token_type","user_id","access_token","refresh_token","signin","credential","NotFoundError","isPasswordValid","compare","Error","verify","token","decoded","err","ForbiddenError","refresh","findOneBy","forgotPassword","userRepository","resetToken","randomBytes","toString","resetTokenExpiry","Date","now","update","filter","attr","key","value","toISOString","emailService","sendPasswordResetEmail","updatePassword","userId","newPassword","exports"],"sources":["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/AuthService.ts"],"sourcesContent":["import { DataSource } from \"typeorm\";\nimport { User } from \"../entities/User\";\nimport {\n  ForbiddenError,\n  NotFoundError,\n  UniqueConstraintError,\n} from \"../errors/api\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nimport { config } from \"../config/config\";\nimport fastify, { FastifyInstance } from \"fastify\";\nimport { emailService } from \"./EmailService\";\nimport crypto from \"crypto\";\n\nexport class AuthService {\n  private ormConnection: DataSource;\n\n  constructor(ormConnection: DataSource) {\n    this.ormConnection = ormConnection;\n  }\n\n  private generateAccessToken(user: User) {\n    return jwt.sign(\n      { sub: user.id, roles: user.roles },\n      config.auth.secretAccessToken,\n      { expiresIn: config.auth.authTokenExpiry } as jwt.SignOptions,\n    );\n  }\n\n  private generateRefreshToken(user: User) {\n    return jwt.sign(\n      { sub: user.id, roles: user.roles, aud: \"/refresh\" },\n      config.auth.secretAccessToken,\n      { expiresIn: config.auth.authRefreshTokenExpiry } as jwt.SignOptions,\n    );\n  }\n\n  async signup(app: FastifyInstance, body: any) {\n    const { email, password, username } = body;\n\n    // Checks if the user and emails are unique\n    const uniqueValues = await this.ormConnection.getRepository(User).findOne({\n      select: {\n        id: true,\n        email: true,\n        username: true,\n      },\n      where: [\n        { email: email },\n        { username: username },\n      ],\n    });\n\n    if (uniqueValues) {\n      let errors = [];\n      if (uniqueValues.email === email) {\n        errors.push(\"auth/email-already-exists\");\n      }\n      if (uniqueValues.username === username) {\n        errors.push(\"auth/username-already-exists\");\n      }\n      throw new UniqueConstraintError(errors.map((error) => error).join(\", \"));\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create a new user in the database\n    const user = await this.ormConnection.getRepository(User).save({\n      email,\n      password: hashedPassword,\n      confirmed_mail: false,\n      roles: [\"user\"],\n      description: \"\",\n      username,\n      attributes: [],\n    });\n\n    const accessToken = this.generateAccessToken(user);\n    const refreshToken = this.generateRefreshToken(user);\n\n    return {\n      token_type: \"Bearer\",\n      user_id: user.id,\n      access_token: accessToken,\n      refresh_token: refreshToken,\n      user,\n    };\n  }\n\n  async signin(app: FastifyInstance, body: any) {\n    const { credential, password } = body;\n\n    const user = await this.ormConnection.getRepository(User).findOne({\n      where: [\n        { email: credential },\n        { username: credential },\n      ],\n      select: [\n        \"id\",\n        \"email\",\n        \"password\",\n        \"confirmed_mail\",\n        \"roles\",\n        \"username\",\n        \"attributes\",\n        \"created_at\",\n        \"description\",\n        \"eloRating\",\n      ],\n    });\n\n    if (!user) {\n      throw new NotFoundError(\"auth/user-not-found\");\n    }\n\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n\n    if (!isPasswordValid) {\n      throw new Error(\"auth/invalid-password\");\n    }\n\n    const accessToken = this.generateAccessToken(user);\n    const refreshToken = this.generateRefreshToken(user);\n\n    return {\n      token_type: \"Bearer\",\n      user_id: user.id,\n      access_token: accessToken,\n      refresh_token: refreshToken,\n      user,\n    };\n  }\n\n  verify(app: FastifyInstance, body: any) {\n    const { token } = body;\n    try {\n      const decoded = jwt.verify(token, config.auth.secretAccessToken);\n      return decoded;\n    } catch (err) {\n      throw new ForbiddenError(\"auth/invalid-token\");\n    }\n  }\n\n  async refresh(app: FastifyInstance, body: any) {\n    const { refresh_token } = body;\n\n    try {\n      const decoded = jwt.verify(\n        refresh_token,\n        config.auth.secretAccessToken,\n      );\n      const user = await this.ormConnection.getRepository(User).findOneBy({\n        // @ts-ignore  this is always an int we're gonna hope. refer to generate methods\n        id: decoded.sub,\n      });\n\n      if (!user) {\n        throw new NotFoundError(\"auth/user-not-found\");\n      }\n\n      const accessToken = this.generateAccessToken(user);\n\n      return {\n        token_type: \"Bearer\",\n        access_token: accessToken,\n      };\n    } catch (err) {\n      throw new Error(\"auth/invalid-refresh-token\");\n    }\n  }\n\n  async forgotPassword(email: string): Promise<void> {\n    const userRepository = this.ormConnection.getRepository(User);\n    const user = await userRepository.findOne({ where: { email } });\n\n    if (!user) {\n      // Return silently to prevent email enumeration\n      return;\n    }\n\n    // Generate reset token\n    const resetToken = crypto.randomBytes(32).toString(\"hex\");\n    const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hour from now\n\n    // Save reset token to user\n    await userRepository.update(user.id, {\n      attributes: [\n        ...(user.attributes || []).filter((attr) =>\n          attr.key !== \"resetToken\" && attr.key !== \"resetTokenExpiry\"\n        ),\n        { key: \"resetToken\", value: resetToken },\n        { key: \"resetTokenExpiry\", value: resetTokenExpiry.toISOString() },\n      ],\n    });\n\n    // Send reset email\n    await emailService.sendPasswordResetEmail(\n      user.email,\n      user.username || \"User\",\n      resetToken,\n    );\n  }\n\n  async updatePassword(userId: number, newPassword: string): Promise<void> {\n    const userRepository = this.ormConnection.getRepository(User);\n    const user = await userRepository.findOne({\n      where: { id: userId },\n      select: [\"id\", \"password\"],\n    });\n\n    if (!user) {\n      throw new NotFoundError(\"auth/user-not-found\");\n    }\n\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    await userRepository.update(userId, { password: hashedPassword });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}
