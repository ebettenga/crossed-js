6b58061968f7dd36e99a9b3a56e1de7a
"use strict";

/* istanbul ignore next */
function cov_1vwa2u1pxb() {
  var path = "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/config/config-ci.ts";
  var hash = "b0086a52687b00c4c4fd1c9df488f464ff731ec4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/config/config-ci.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 24
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 38,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/config/config-ci.ts",
      mappings: ";;;AAEa,QAAA,MAAM,GAAG;IACpB,MAAM,EAAE;QACN,SAAS,EAAE;YACT,MAAM,EAAE,aAAa;YACrB,OAAO,EAAE;gBACP,aAAa,EAAE,YAAY;gBAC3B,MAAM,EAAE,cAAc;aACvB;SACF;QACD,IAAI,EAAE,IAAI;KACX;IACD,EAAE,EAAE;QACF,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,WAAW;QACjB,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,WAAW;QACrB,QAAQ,EAAE,eAAe;QACzB,QAAQ,EAAE,SAAS;QACnB,WAAW,EAAE,IAAI;QACjB,OAAO,EAAE,KAAK;QACd,QAAQ,EAAE,CAAC,wBAAwB,CAAC;QACpC,UAAU,EAAE,CAAC,0BAA0B,CAAC;QACxC,WAAW,EAAE,CAAC,2BAA2B,CAAC;KACd;IAC9B,MAAM,EAAE;QACN,QAAQ,EAAE,sBAAsB;QAChC,YAAY,EAAE,0CAA0C;KACzD;IACD,IAAI,EAAE;QACJ,iBAAiB,EAAE,mBAAmB;QACtC,sBAAsB,EAAE,IAAI;QAC5B,eAAe,EAAE,IAAI;KACtB;IACD,aAAa,EAAE,qBAAqB;CACrC,CAAC",
      names: [],
      sources: ["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/config/config-ci.ts"],
      sourcesContent: ["import { PostgresConnectionOptions } from \"typeorm/driver/postgres/PostgresConnectionOptions\";\n\nexport const config = {\n  logger: {\n    transport: {\n      target: \"pino-pretty\",\n      options: {\n        translateTime: \"HH:MM:ss Z\",\n        ignore: \"pid,hostname\",\n      },\n    },\n    test: true,\n  },\n  db: {\n    type: \"postgres\",\n    host: \"localhost\",\n    port: 5432,\n    username: \"test_user\",\n    password: \"test_password\",\n    database: \"test_db\",\n    synchronize: true,\n    logging: false,\n    entities: [\"./src/entities/**/*.ts\"],\n    migrations: [\"./src/migrations/**/*.ts\"],\n    subscribers: [\"./src/subscribers/**/*.ts\"],\n  } as PostgresConnectionOptions,\n  github: {\n    clientId: \"Ov23liJAlQZgHCZ4JvUk\",\n    clientSecret: \"45177a38fd0112b9799da692e5a9d8caa97ed42c\",\n  },\n  auth: {\n    secretAccessToken: \"aljksdghae4334nmb\",\n    authRefreshTokenExpiry: \"7d\",\n    authTokenExpiry: \"1h\",\n  },\n  secretKeyPath: \"./config/secret-key\",\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b0086a52687b00c4c4fd1c9df488f464ff731ec4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vwa2u1pxb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vwa2u1pxb();
cov_1vwa2u1pxb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1vwa2u1pxb().s[1]++;
exports.config = void 0;
/* istanbul ignore next */
cov_1vwa2u1pxb().s[2]++;
exports.config = {
  logger: {
    transport: {
      target: "pino-pretty",
      options: {
        translateTime: "HH:MM:ss Z",
        ignore: "pid,hostname"
      }
    },
    test: true
  },
  db: {
    type: "postgres",
    host: "localhost",
    port: 5432,
    username: "test_user",
    password: "test_password",
    database: "test_db",
    synchronize: true,
    logging: false,
    entities: ["./src/entities/**/*.ts"],
    migrations: ["./src/migrations/**/*.ts"],
    subscribers: ["./src/subscribers/**/*.ts"]
  },
  github: {
    clientId: "Ov23liJAlQZgHCZ4JvUk",
    clientSecret: "45177a38fd0112b9799da692e5a9d8caa97ed42c"
  },
  auth: {
    secretAccessToken: "aljksdghae4334nmb",
    authRefreshTokenExpiry: "7d",
    authTokenExpiry: "1h"
  },
  secretKeyPath: "./config/secret-key"
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXZ3YTJ1MXB4YiIsImFjdHVhbENvdmVyYWdlIiwicyIsImV4cG9ydHMiLCJjb25maWciLCJsb2dnZXIiLCJ0cmFuc3BvcnQiLCJ0YXJnZXQiLCJvcHRpb25zIiwidHJhbnNsYXRlVGltZSIsImlnbm9yZSIsInRlc3QiLCJkYiIsInR5cGUiLCJob3N0IiwicG9ydCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJkYXRhYmFzZSIsInN5bmNocm9uaXplIiwibG9nZ2luZyIsImVudGl0aWVzIiwibWlncmF0aW9ucyIsInN1YnNjcmliZXJzIiwiZ2l0aHViIiwiY2xpZW50SWQiLCJjbGllbnRTZWNyZXQiLCJhdXRoIiwic2VjcmV0QWNjZXNzVG9rZW4iLCJhdXRoUmVmcmVzaFRva2VuRXhwaXJ5IiwiYXV0aFRva2VuRXhwaXJ5Iiwic2VjcmV0S2V5UGF0aCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmJldHQvRG9jdW1lbnRzL1JlcG9zL2Nyb3NzZWQtanMvYmFja2VuZC9zcmMvY29uZmlnL2NvbmZpZy1jaS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb3N0Z3Jlc0Nvbm5lY3Rpb25PcHRpb25zIH0gZnJvbSBcInR5cGVvcm0vZHJpdmVyL3Bvc3RncmVzL1Bvc3RncmVzQ29ubmVjdGlvbk9wdGlvbnNcIjtcblxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgbG9nZ2VyOiB7XG4gICAgdHJhbnNwb3J0OiB7XG4gICAgICB0YXJnZXQ6IFwicGluby1wcmV0dHlcIixcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdHJhbnNsYXRlVGltZTogXCJISDpNTTpzcyBaXCIsXG4gICAgICAgIGlnbm9yZTogXCJwaWQsaG9zdG5hbWVcIixcbiAgICAgIH0sXG4gICAgfSxcbiAgICB0ZXN0OiB0cnVlLFxuICB9LFxuICBkYjoge1xuICAgIHR5cGU6IFwicG9zdGdyZXNcIixcbiAgICBob3N0OiBcImxvY2FsaG9zdFwiLFxuICAgIHBvcnQ6IDU0MzIsXG4gICAgdXNlcm5hbWU6IFwidGVzdF91c2VyXCIsXG4gICAgcGFzc3dvcmQ6IFwidGVzdF9wYXNzd29yZFwiLFxuICAgIGRhdGFiYXNlOiBcInRlc3RfZGJcIixcbiAgICBzeW5jaHJvbml6ZTogdHJ1ZSxcbiAgICBsb2dnaW5nOiBmYWxzZSxcbiAgICBlbnRpdGllczogW1wiLi9zcmMvZW50aXRpZXMvKiovKi50c1wiXSxcbiAgICBtaWdyYXRpb25zOiBbXCIuL3NyYy9taWdyYXRpb25zLyoqLyoudHNcIl0sXG4gICAgc3Vic2NyaWJlcnM6IFtcIi4vc3JjL3N1YnNjcmliZXJzLyoqLyoudHNcIl0sXG4gIH0gYXMgUG9zdGdyZXNDb25uZWN0aW9uT3B0aW9ucyxcbiAgZ2l0aHViOiB7XG4gICAgY2xpZW50SWQ6IFwiT3YyM2xpSkFsUVpnSENaNEp2VWtcIixcbiAgICBjbGllbnRTZWNyZXQ6IFwiNDUxNzdhMzhmZDAxMTJiOTc5OWRhNjkyZTVhOWQ4Y2FhOTdlZDQyY1wiLFxuICB9LFxuICBhdXRoOiB7XG4gICAgc2VjcmV0QWNjZXNzVG9rZW46IFwiYWxqa3NkZ2hhZTQzMzRubWJcIixcbiAgICBhdXRoUmVmcmVzaFRva2VuRXhwaXJ5OiBcIjdkXCIsXG4gICAgYXV0aFRva2VuRXhwaXJ5OiBcIjFoXCIsXG4gIH0sXG4gIHNlY3JldEtleVBhdGg6IFwiLi9jb25maWcvc2VjcmV0LWtleVwiLFxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFjUTtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBQUFBLGNBQUEsR0FBQUUsQ0FBQTs7Ozs7Ozs7O0FBWktDLE9BQUEsQ0FBQUMsTUFBTSxHQUFHO0VBQ3BCQyxNQUFNLEVBQUU7SUFDTkMsU0FBUyxFQUFFO01BQ1RDLE1BQU0sRUFBRSxhQUFhO01BQ3JCQyxPQUFPLEVBQUU7UUFDUEMsYUFBYSxFQUFFLFlBQVk7UUFDM0JDLE1BQU0sRUFBRTs7S0FFWDtJQUNEQyxJQUFJLEVBQUU7R0FDUDtFQUNEQyxFQUFFLEVBQUU7SUFDRkMsSUFBSSxFQUFFLFVBQVU7SUFDaEJDLElBQUksRUFBRSxXQUFXO0lBQ2pCQyxJQUFJLEVBQUUsSUFBSTtJQUNWQyxRQUFRLEVBQUUsV0FBVztJQUNyQkMsUUFBUSxFQUFFLGVBQWU7SUFDekJDLFFBQVEsRUFBRSxTQUFTO0lBQ25CQyxXQUFXLEVBQUUsSUFBSTtJQUNqQkMsT0FBTyxFQUFFLEtBQUs7SUFDZEMsUUFBUSxFQUFFLENBQUMsd0JBQXdCLENBQUM7SUFDcENDLFVBQVUsRUFBRSxDQUFDLDBCQUEwQixDQUFDO0lBQ3hDQyxXQUFXLEVBQUUsQ0FBQywyQkFBMkI7R0FDYjtFQUM5QkMsTUFBTSxFQUFFO0lBQ05DLFFBQVEsRUFBRSxzQkFBc0I7SUFDaENDLFlBQVksRUFBRTtHQUNmO0VBQ0RDLElBQUksRUFBRTtJQUNKQyxpQkFBaUIsRUFBRSxtQkFBbUI7SUFDdENDLHNCQUFzQixFQUFFLElBQUk7SUFDNUJDLGVBQWUsRUFBRTtHQUNsQjtFQUNEQyxhQUFhLEVBQUU7Q0FDaEIiLCJpZ25vcmVMaXN0IjpbXX0=
