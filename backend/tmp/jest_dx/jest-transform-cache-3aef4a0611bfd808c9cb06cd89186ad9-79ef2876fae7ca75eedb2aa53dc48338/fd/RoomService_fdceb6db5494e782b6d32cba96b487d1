752438b7062716ea5b68330a3901dc1a
"use strict";

/* istanbul ignore next */
function cov_2e5g1etrdb() {
  var path = "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/RoomService.ts";
  var hash = "8527791f76f010f9f8c7b9e8bc786b5074add060";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/RoomService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 42
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 42
        }
      },
      "5": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "6": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "7": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "8": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 10,
          column: 39
        }
      },
      "9": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 52
        }
      },
      "10": {
        start: {
          line: 12,
          column: 14
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "11": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "12": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 30
        }
      },
      "13": {
        start: {
          line: 15,
          column: 23
        },
        end: {
          line: 15,
          column: 48
        }
      },
      "14": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "15": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 87
        }
      },
      "16": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 190
        }
      },
      "17": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 62
        }
      },
      "18": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 85
        }
      },
      "19": {
        start: {
          line: 29,
          column: 20
        },
        end: {
          line: 31,
          column: 10
        }
      },
      "20": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "21": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 44,
          column: 15
        }
      },
      "22": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 52
        }
      },
      "23": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 21
        }
      },
      "24": {
        start: {
          line: 50,
          column: 24
        },
        end: {
          line: 52,
          column: 47
        }
      },
      "25": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "26": {
        start: {
          line: 54,
          column: 33
        },
        end: {
          line: 54,
          column: 87
        }
      },
      "27": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "28": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 68
        }
      },
      "29": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 55
        }
      },
      "30": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 23
        }
      },
      "31": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 65,
          column: 58
        }
      },
      "32": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "33": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 68
        }
      },
      "34": {
        start: {
          line: 72,
          column: 19
        },
        end: {
          line: 72,
          column: 79
        }
      },
      "35": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "36": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 73
        }
      },
      "37": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 55
        }
      },
      "38": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 24
        }
      },
      "39": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 68
        }
      },
      "40": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 90
        }
      },
      "41": {
        start: {
          line: 84,
          column: 23
        },
        end: {
          line: 86,
          column: 38
        }
      },
      "42": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 88,
          column: 46
        }
      },
      "43": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 46
        }
      },
      "44": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 34
        }
      },
      "45": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 28
        }
      },
      "46": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 45
        }
      },
      "47": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 54
        }
      },
      "48": {
        start: {
          line: 96,
          column: 31
        },
        end: {
          line: 96,
          column: 82
        }
      },
      "49": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "50": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "51": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 102,
          column: 18
        }
      },
      "52": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "53": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 56
        }
      },
      "54": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "55": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 67
        }
      },
      "56": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 82
        }
      },
      "57": {
        start: {
          line: 113,
          column: 27
        },
        end: {
          line: 113,
          column: 69
        }
      },
      "58": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "59": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 36
        }
      },
      "60": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 78
        }
      },
      "61": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 85
        }
      },
      "62": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "63": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "64": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 71
        }
      },
      "65": {
        start: {
          line: 140,
          column: 26
        },
        end: {
          line: 140,
          column: 90
        }
      },
      "66": {
        start: {
          line: 141,
          column: 23
        },
        end: {
          line: 143,
          column: 38
        }
      },
      "67": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 145,
          column: 46
        }
      },
      "68": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 46
        }
      },
      "69": {
        start: {
          line: 146,
          column: 21
        },
        end: {
          line: 146,
          column: 38
        }
      },
      "70": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 32
        }
      },
      "71": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 35
        }
      },
      "72": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 37
        }
      },
      "73": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 25
        }
      },
      "74": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 41
        }
      },
      "75": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 45
        }
      },
      "76": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 98
        }
      },
      "77": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "78": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 36
        }
      },
      "79": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 47
        }
      },
      "80": {
        start: {
          line: 159,
          column: 26
        },
        end: {
          line: 159,
          column: 88
        }
      },
      "81": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 163,
          column: 50
        }
      },
      "82": {
        start: {
          line: 164,
          column: 22
        },
        end: {
          line: 164,
          column: 72
        }
      },
      "83": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 34
        }
      },
      "84": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "85": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 87
        }
      },
      "86": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 172,
          column: 15
        }
      },
      "87": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 86
        }
      },
      "88": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 101
        }
      },
      "89": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "90": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 25
        }
      },
      "91": {
        start: {
          line: 189,
          column: 21
        },
        end: {
          line: 189,
          column: 51
        }
      },
      "92": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 191,
          column: 60
        }
      },
      "93": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 60
        }
      },
      "94": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "95": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 83
        }
      },
      "96": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "97": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 105
        }
      },
      "98": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "99": {
        start: {
          line: 199,
          column: 34
        },
        end: {
          line: 199,
          column: 95
        }
      },
      "100": {
        start: {
          line: 199,
          column: 64
        },
        end: {
          line: 199,
          column: 94
        }
      },
      "101": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "102": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 89
        }
      },
      "103": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 34
        }
      },
      "104": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 28
        }
      },
      "105": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 71
        }
      },
      "106": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 20
        }
      },
      "107": {
        start: {
          line: 210,
          column: 26
        },
        end: {
          line: 210,
          column: 28
        }
      },
      "108": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "109": {
        start: {
          line: 213,
          column: 30
        },
        end: {
          line: 219,
          column: 26
        }
      },
      "110": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 59
        }
      },
      "111": {
        start: {
          line: 220,
          column: 50
        },
        end: {
          line: 220,
          column: 57
        }
      },
      "112": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 231,
          column: 11
        }
      },
      "113": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 241,
          column: 23
        }
      },
      "114": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 33
        }
      },
      "115": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 39
        }
      },
      "116": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "117": {
        start: {
          line: 248,
          column: 29
        },
        end: {
          line: 249,
          column: 51
        }
      },
      "118": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 48
        }
      },
      "119": {
        start: {
          line: 253,
          column: 29
        },
        end: {
          line: 253,
          column: 68
        }
      },
      "120": {
        start: {
          line: 254,
          column: 26
        },
        end: {
          line: 256,
          column: 48
        }
      },
      "121": {
        start: {
          line: 255,
          column: 41
        },
        end: {
          line: 255,
          column: 63
        }
      },
      "122": {
        start: {
          line: 256,
          column: 31
        },
        end: {
          line: 256,
          column: 47
        }
      },
      "123": {
        start: {
          line: 258,
          column: 30
        },
        end: {
          line: 258,
          column: 85
        }
      },
      "124": {
        start: {
          line: 259,
          column: 29
        },
        end: {
          line: 263,
          column: 10
        }
      },
      "125": {
        start: {
          line: 264,
          column: 31
        },
        end: {
          line: 264,
          column: 82
        }
      },
      "126": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "127": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 105
        }
      },
      "128": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 56
        }
      },
      "129": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "130": {
        start: {
          line: 272,
          column: 32
        },
        end: {
          line: 272,
          column: 135
        }
      },
      "131": {
        start: {
          line: 272,
          column: 60
        },
        end: {
          line: 272,
          column: 85
        }
      },
      "132": {
        start: {
          line: 273,
          column: 32
        },
        end: {
          line: 276,
          column: 13
        }
      },
      "133": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 61
        }
      },
      "134": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 65
        }
      },
      "135": {
        start: {
          line: 279,
          column: 33
        },
        end: {
          line: 280,
          column: 18
        }
      },
      "136": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 284,
          column: 16
        }
      },
      "137": {
        start: {
          line: 281,
          column: 76
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "138": {
        start: {
          line: 286,
          column: 29
        },
        end: {
          line: 288,
          column: 56
        }
      },
      "139": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 306,
          column: 13
        }
      },
      "140": {
        start: {
          line: 291,
          column: 38
        },
        end: {
          line: 299,
          column: 29
        }
      },
      "141": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 44
        }
      },
      "142": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 76
        }
      },
      "143": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 45
        }
      },
      "144": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 305,
          column: 42
        }
      },
      "145": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 86
        }
      },
      "146": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 50
        }
      },
      "147": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "148": {
        start: {
          line: 312,
          column: 31
        },
        end: {
          line: 312,
          column: 75
        }
      },
      "149": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 322,
          column: 13
        }
      },
      "150": {
        start: {
          line: 315,
          column: 34
        },
        end: {
          line: 315,
          column: 93
        }
      },
      "151": {
        start: {
          line: 315,
          column: 59
        },
        end: {
          line: 315,
          column: 76
        }
      },
      "152": {
        start: {
          line: 316,
          column: 37
        },
        end: {
          line: 316,
          column: 58
        }
      },
      "153": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 321,
          column: 19
        }
      },
      "154": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 88
        }
      },
      "155": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 71
        }
      },
      "156": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "157": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 334,
          column: 15
        }
      },
      "158": {
        start: {
          line: 338,
          column: 21
        },
        end: {
          line: 338,
          column: 51
        }
      },
      "159": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 339,
          column: 92
        }
      },
      "160": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "161": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 46
        }
      },
      "162": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "163": {
        start: {
          line: 343,
          column: 43
        },
        end: {
          line: 343,
          column: 63
        }
      },
      "164": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 70
        }
      },
      "165": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "166": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 58
        }
      },
      "167": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 350,
          column: 28
        }
      },
      "168": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 351,
          column: 43
        }
      },
      "169": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 20
        }
      },
      "170": {
        start: {
          line: 355,
          column: 22
        },
        end: {
          line: 360,
          column: 54
        }
      },
      "171": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "172": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 64
        }
      },
      "173": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 31
        }
      },
      "174": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 369,
          column: 25
        }
      },
      "175": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 25
        }
      },
      "176": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 372,
          column: 49
        }
      },
      "177": {
        start: {
          line: 375,
          column: 24
        },
        end: {
          line: 375,
          column: 67
        }
      },
      "178": {
        start: {
          line: 377,
          column: 19
        },
        end: {
          line: 379,
          column: 10
        }
      },
      "179": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 381,
          column: 60
        }
      },
      "180": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 60
        }
      },
      "181": {
        start: {
          line: 383,
          column: 29
        },
        end: {
          line: 383,
          column: 80
        }
      },
      "182": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "183": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 52
        }
      },
      "184": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "185": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 82
        }
      },
      "186": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 394,
          column: 9
        }
      },
      "187": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 52
        }
      },
      "188": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 397,
          column: 9
        }
      },
      "189": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 60
        }
      },
      "190": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 400,
          column: 9
        }
      },
      "191": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 46
        }
      },
      "192": {
        start: {
          line: 402,
          column: 28
        },
        end: {
          line: 402,
          column: 59
        }
      },
      "193": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 405,
          column: 9
        }
      },
      "194": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 24
        }
      },
      "195": {
        start: {
          line: 406,
          column: 26
        },
        end: {
          line: 406,
          column: 97
        }
      },
      "196": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 427,
          column: 9
        }
      },
      "197": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 55
        }
      },
      "198": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 61
        }
      },
      "199": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 417,
          column: 15
        }
      },
      "200": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 61
        }
      },
      "201": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 421,
          column: 52
        }
      },
      "202": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 63
        }
      },
      "203": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 426,
          column: 54
        }
      },
      "204": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 57
        }
      },
      "205": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 430,
          column: 44
        }
      },
      "206": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "207": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 432,
          column: 76
        }
      },
      "208": {
        start: {
          line: 435,
          column: 25
        },
        end: {
          line: 435,
          column: 67
        }
      },
      "209": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 444,
          column: 9
        }
      },
      "210": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 438,
          column: 32
        }
      },
      "211": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 439,
          column: 39
        }
      },
      "212": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 64
        }
      },
      "213": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 446,
          column: 78
        }
      },
      "214": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 448,
          column: 28
        }
      },
      "215": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 20
        }
      },
      "216": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 57
        }
      },
      "217": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 453,
          column: 44
        }
      },
      "218": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 20
        }
      },
      "219": {
        start: {
          line: 457,
          column: 22
        },
        end: {
          line: 464,
          column: 47
        }
      },
      "220": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 467,
          column: 9
        }
      },
      "221": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 75
        }
      },
      "222": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "223": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 469,
          column: 71
        }
      },
      "224": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 473,
          column: 9
        }
      },
      "225": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 30
        }
      },
      "226": {
        start: {
          line: 474,
          column: 26
        },
        end: {
          line: 474,
          column: 47
        }
      },
      "227": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 493,
          column: 12
        }
      },
      "228": {
        start: {
          line: 475,
          column: 41
        },
        end: {
          line: 493,
          column: 9
        }
      },
      "229": {
        start: {
          line: 496,
          column: 41
        },
        end: {
          line: 499,
          column: 10
        }
      },
      "230": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 502,
          column: 9
        }
      },
      "231": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 501,
          column: 60
        }
      },
      "232": {
        start: {
          line: 503,
          column: 26
        },
        end: {
          line: 503,
          column: 90
        }
      },
      "233": {
        start: {
          line: 504,
          column: 21
        },
        end: {
          line: 504,
          column: 38
        }
      },
      "234": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 505,
          column: 48
        }
      },
      "235": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 506,
          column: 35
        }
      },
      "236": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 507,
          column: 37
        }
      },
      "237": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 508,
          column: 26
        }
      },
      "238": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 509,
          column: 32
        }
      },
      "239": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 510,
          column: 65
        }
      },
      "240": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 511,
          column: 48
        }
      },
      "241": {
        start: {
          line: 512,
          column: 8
        },
        end: {
          line: 512,
          column: 98
        }
      },
      "242": {
        start: {
          line: 513,
          column: 26
        },
        end: {
          line: 513,
          column: 88
        }
      },
      "243": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 522,
          column: 11
        }
      },
      "244": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 523,
          column: 25
        }
      },
      "245": {
        start: {
          line: 526,
          column: 21
        },
        end: {
          line: 526,
          column: 51
        }
      },
      "246": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 528,
          column: 60
        }
      },
      "247": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 528,
          column: 60
        }
      },
      "248": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 529,
          column: 50
        }
      },
      "249": {
        start: {
          line: 531,
          column: 8
        },
        end: {
          line: 538,
          column: 11
        }
      },
      "250": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 539,
          column: 20
        }
      },
      "251": {
        start: {
          line: 542,
          column: 21
        },
        end: {
          line: 542,
          column: 51
        }
      },
      "252": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 544,
          column: 60
        }
      },
      "253": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 544,
          column: 60
        }
      },
      "254": {
        start: {
          line: 545,
          column: 8
        },
        end: {
          line: 545,
          column: 34
        }
      },
      "255": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 546,
          column: 28
        }
      },
      "256": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 547,
          column: 71
        }
      },
      "257": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 548,
          column: 20
        }
      },
      "258": {
        start: {
          line: 551,
          column: 22
        },
        end: {
          line: 571,
          column: 10
        }
      },
      "259": {
        start: {
          line: 559,
          column: 29
        },
        end: {
          line: 564,
          column: 27
        }
      },
      "260": {
        start: {
          line: 565,
          column: 12
        },
        end: {
          line: 565,
          column: 44
        }
      },
      "261": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 31
        }
      },
      "262": {
        start: {
          line: 575,
          column: 21
        },
        end: {
          line: 575,
          column: 51
        }
      },
      "263": {
        start: {
          line: 576,
          column: 8
        },
        end: {
          line: 578,
          column: 9
        }
      },
      "264": {
        start: {
          line: 577,
          column: 12
        },
        end: {
          line: 577,
          column: 60
        }
      },
      "265": {
        start: {
          line: 579,
          column: 28
        },
        end: {
          line: 579,
          column: 45
        }
      },
      "266": {
        start: {
          line: 580,
          column: 32
        },
        end: {
          line: 582,
          column: 18
        }
      },
      "267": {
        start: {
          line: 584,
          column: 22
        },
        end: {
          line: 591,
          column: 10
        }
      },
      "268": {
        start: {
          line: 593,
          column: 24
        },
        end: {
          line: 615,
          column: 10
        }
      },
      "269": {
        start: {
          line: 594,
          column: 30
        },
        end: {
          line: 594,
          column: 44
        }
      },
      "270": {
        start: {
          line: 595,
          column: 32
        },
        end: {
          line: 595,
          column: 56
        }
      },
      "271": {
        start: {
          line: 596,
          column: 26
        },
        end: {
          line: 596,
          column: 79
        }
      },
      "272": {
        start: {
          line: 597,
          column: 27
        },
        end: {
          line: 597,
          column: 82
        }
      },
      "273": {
        start: {
          line: 598,
          column: 32
        },
        end: {
          line: 600,
          column: 22
        }
      },
      "274": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 614,
          column: 14
        }
      },
      "275": {
        start: {
          line: 617,
          column: 8
        },
        end: {
          line: 623,
          column: 11
        }
      },
      "276": {
        start: {
          line: 618,
          column: 12
        },
        end: {
          line: 619,
          column: 41
        }
      },
      "277": {
        start: {
          line: 619,
          column: 16
        },
        end: {
          line: 619,
          column: 41
        }
      },
      "278": {
        start: {
          line: 620,
          column: 23
        },
        end: {
          line: 620,
          column: 63
        }
      },
      "279": {
        start: {
          line: 621,
          column: 23
        },
        end: {
          line: 621,
          column: 63
        }
      },
      "280": {
        start: {
          line: 622,
          column: 12
        },
        end: {
          line: 622,
          column: 27
        }
      },
      "281": {
        start: {
          line: 625,
          column: 30
        },
        end: {
          line: 633,
          column: 11
        }
      },
      "282": {
        start: {
          line: 625,
          column: 55
        },
        end: {
          line: 633,
          column: 9
        }
      },
      "283": {
        start: {
          line: 635,
          column: 27
        },
        end: {
          line: 635,
          column: 56
        }
      },
      "284": {
        start: {
          line: 638,
          column: 8
        },
        end: {
          line: 643,
          column: 9
        }
      },
      "285": {
        start: {
          line: 639,
          column: 33
        },
        end: {
          line: 639,
          column: 79
        }
      },
      "286": {
        start: {
          line: 639,
          column: 59
        },
        end: {
          line: 639,
          column: 78
        }
      },
      "287": {
        start: {
          line: 640,
          column: 12
        },
        end: {
          line: 642,
          column: 13
        }
      },
      "288": {
        start: {
          line: 641,
          column: 16
        },
        end: {
          line: 641,
          column: 50
        }
      },
      "289": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 647,
          column: 10
        }
      },
      "290": {
        start: {
          line: 650,
          column: 31
        },
        end: {
          line: 650,
          column: 76
        }
      },
      "291": {
        start: {
          line: 651,
          column: 22
        },
        end: {
          line: 657,
          column: 10
        }
      },
      "292": {
        start: {
          line: 658,
          column: 24
        },
        end: {
          line: 682,
          column: 10
        }
      },
      "293": {
        start: {
          line: 659,
          column: 30
        },
        end: {
          line: 659,
          column: 47
        }
      },
      "294": {
        start: {
          line: 660,
          column: 32
        },
        end: {
          line: 660,
          column: 56
        }
      },
      "295": {
        start: {
          line: 661,
          column: 26
        },
        end: {
          line: 661,
          column: 79
        }
      },
      "296": {
        start: {
          line: 662,
          column: 27
        },
        end: {
          line: 664,
          column: 22
        }
      },
      "297": {
        start: {
          line: 665,
          column: 32
        },
        end: {
          line: 667,
          column: 22
        }
      },
      "298": {
        start: {
          line: 668,
          column: 12
        },
        end: {
          line: 681,
          column: 14
        }
      },
      "299": {
        start: {
          line: 683,
          column: 27
        },
        end: {
          line: 683,
          column: 36
        }
      },
      "300": {
        start: {
          line: 684,
          column: 8
        },
        end: {
          line: 701,
          column: 9
        }
      },
      "301": {
        start: {
          line: 685,
          column: 12
        },
        end: {
          line: 686,
          column: 25
        }
      },
      "302": {
        start: {
          line: 686,
          column: 16
        },
        end: {
          line: 686,
          column: 25
        }
      },
      "303": {
        start: {
          line: 687,
          column: 29
        },
        end: {
          line: 687,
          column: 58
        }
      },
      "304": {
        start: {
          line: 688,
          column: 12
        },
        end: {
          line: 691,
          column: 13
        }
      },
      "305": {
        start: {
          line: 689,
          column: 16
        },
        end: {
          line: 689,
          column: 53
        }
      },
      "306": {
        start: {
          line: 690,
          column: 16
        },
        end: {
          line: 690,
          column: 25
        }
      },
      "307": {
        start: {
          line: 692,
          column: 12
        },
        end: {
          line: 695,
          column: 13
        }
      },
      "308": {
        start: {
          line: 693,
          column: 16
        },
        end: {
          line: 693,
          column: 53
        }
      },
      "309": {
        start: {
          line: 694,
          column: 16
        },
        end: {
          line: 694,
          column: 25
        }
      },
      "310": {
        start: {
          line: 696,
          column: 12
        },
        end: {
          line: 700,
          column: 13
        }
      },
      "311": {
        start: {
          line: 699,
          column: 16
        },
        end: {
          line: 699,
          column: 53
        }
      },
      "312": {
        start: {
          line: 702,
          column: 30
        },
        end: {
          line: 722,
          column: 11
        }
      },
      "313": {
        start: {
          line: 704,
          column: 12
        },
        end: {
          line: 706,
          column: 13
        }
      },
      "314": {
        start: {
          line: 705,
          column: 16
        },
        end: {
          line: 705,
          column: 41
        }
      },
      "315": {
        start: {
          line: 707,
          column: 26
        },
        end: {
          line: 707,
          column: 66
        }
      },
      "316": {
        start: {
          line: 708,
          column: 26
        },
        end: {
          line: 708,
          column: 66
        }
      },
      "317": {
        start: {
          line: 709,
          column: 12
        },
        end: {
          line: 709,
          column: 33
        }
      },
      "318": {
        start: {
          line: 712,
          column: 36
        },
        end: {
          line: 722,
          column: 9
        }
      },
      "319": {
        start: {
          line: 723,
          column: 8
        },
        end: {
          line: 723,
          column: 29
        }
      },
      "320": {
        start: {
          line: 726,
          column: 0
        },
        end: {
          line: 726,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 21
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 43
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 30
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 35
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 62
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 51
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 67
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 41
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 82
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 55
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 139
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 47
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 188
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 199,
            column: 52
          },
          end: {
            line: 199,
            column: 53
          }
        },
        loc: {
          start: {
            line: 199,
            column: 64
          },
          end: {
            line: 199,
            column: 94
          }
        },
        line: 199
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 60
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 209
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 220,
            column: 40
          },
          end: {
            line: 220,
            column: 41
          }
        },
        loc: {
          start: {
            line: 220,
            column: 50
          },
          end: {
            line: 220,
            column: 57
          }
        },
        line: 220
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 40
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 233
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 39
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 243
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 255,
            column: 20
          },
          end: {
            line: 255,
            column: 21
          }
        },
        loc: {
          start: {
            line: 255,
            column: 41
          },
          end: {
            line: 255,
            column: 63
          }
        },
        line: 255
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 256,
            column: 17
          },
          end: {
            line: 256,
            column: 18
          }
        },
        loc: {
          start: {
            line: 256,
            column: 31
          },
          end: {
            line: 256,
            column: 47
          }
        },
        line: 256
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 272,
            column: 50
          },
          end: {
            line: 272,
            column: 51
          }
        },
        loc: {
          start: {
            line: 272,
            column: 60
          },
          end: {
            line: 272,
            column: 85
          }
        },
        line: 272
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 281,
            column: 63
          },
          end: {
            line: 281,
            column: 64
          }
        },
        loc: {
          start: {
            line: 281,
            column: 76
          },
          end: {
            line: 284,
            column: 13
          }
        },
        line: 281
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 315,
            column: 52
          },
          end: {
            line: 315,
            column: 53
          }
        },
        loc: {
          start: {
            line: 315,
            column: 59
          },
          end: {
            line: 315,
            column: 76
          }
        },
        line: 315
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        loc: {
          start: {
            line: 337,
            column: 38
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 337
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 343,
            column: 31
          },
          end: {
            line: 343,
            column: 32
          }
        },
        loc: {
          start: {
            line: 343,
            column: 43
          },
          end: {
            line: 343,
            column: 63
          }
        },
        line: 343
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 354,
            column: 5
          }
        },
        loc: {
          start: {
            line: 354,
            column: 50
          },
          end: {
            line: 365,
            column: 5
          }
        },
        line: 354
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 366,
            column: 4
          },
          end: {
            line: 366,
            column: 5
          }
        },
        loc: {
          start: {
            line: 366,
            column: 25
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 366
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 374,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        loc: {
          start: {
            line: 374,
            column: 66
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 374
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        loc: {
          start: {
            line: 451,
            column: 41
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 451
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 74
          },
          end: {
            line: 494,
            column: 5
          }
        },
        line: 456
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 475,
            column: 29
          },
          end: {
            line: 475,
            column: 30
          }
        },
        loc: {
          start: {
            line: 475,
            column: 41
          },
          end: {
            line: 493,
            column: 9
          }
        },
        line: 475
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 495,
            column: 4
          },
          end: {
            line: 495,
            column: 5
          }
        },
        loc: {
          start: {
            line: 495,
            column: 79
          },
          end: {
            line: 524,
            column: 5
          }
        },
        line: 495
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 525,
            column: 4
          },
          end: {
            line: 525,
            column: 5
          }
        },
        loc: {
          start: {
            line: 525,
            column: 42
          },
          end: {
            line: 540,
            column: 5
          }
        },
        line: 525
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 541,
            column: 4
          },
          end: {
            line: 541,
            column: 5
          }
        },
        loc: {
          start: {
            line: 541,
            column: 34
          },
          end: {
            line: 549,
            column: 5
          }
        },
        line: 541
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 550,
            column: 4
          },
          end: {
            line: 550,
            column: 5
          }
        },
        loc: {
          start: {
            line: 550,
            column: 39
          },
          end: {
            line: 573,
            column: 5
          }
        },
        line: 550
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 558,
            column: 22
          },
          end: {
            line: 558,
            column: 23
          }
        },
        loc: {
          start: {
            line: 558,
            column: 30
          },
          end: {
            line: 566,
            column: 9
          }
        },
        line: 558
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 574,
            column: 4
          },
          end: {
            line: 574,
            column: 5
          }
        },
        loc: {
          start: {
            line: 574,
            column: 54
          },
          end: {
            line: 648,
            column: 5
          }
        },
        line: 574
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 593,
            column: 34
          },
          end: {
            line: 593,
            column: 35
          }
        },
        loc: {
          start: {
            line: 593,
            column: 41
          },
          end: {
            line: 615,
            column: 9
          }
        },
        line: 593
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 617,
            column: 21
          },
          end: {
            line: 617,
            column: 22
          }
        },
        loc: {
          start: {
            line: 617,
            column: 31
          },
          end: {
            line: 623,
            column: 9
          }
        },
        line: 617
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 625,
            column: 42
          },
          end: {
            line: 625,
            column: 43
          }
        },
        loc: {
          start: {
            line: 625,
            column: 55
          },
          end: {
            line: 633,
            column: 9
          }
        },
        line: 625
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 639,
            column: 52
          },
          end: {
            line: 639,
            column: 53
          }
        },
        loc: {
          start: {
            line: 639,
            column: 59
          },
          end: {
            line: 639,
            column: 78
          }
        },
        line: 639
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 649,
            column: 4
          },
          end: {
            line: 649,
            column: 5
          }
        },
        loc: {
          start: {
            line: 649,
            column: 52
          },
          end: {
            line: 724,
            column: 5
          }
        },
        line: 649
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 658,
            column: 34
          },
          end: {
            line: 658,
            column: 35
          }
        },
        loc: {
          start: {
            line: 658,
            column: 44
          },
          end: {
            line: 682,
            column: 9
          }
        },
        line: 658
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 703,
            column: 18
          },
          end: {
            line: 703,
            column: 19
          }
        },
        loc: {
          start: {
            line: 703,
            column: 28
          },
          end: {
            line: 710,
            column: 9
          }
        },
        line: 703
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 712,
            column: 17
          },
          end: {
            line: 712,
            column: 18
          }
        },
        loc: {
          start: {
            line: 712,
            column: 36
          },
          end: {
            line: 722,
            column: 9
          }
        },
        line: 712
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 37
          },
          end: {
            line: 67,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 67,
            column: 44
          },
          end: {
            line: 67,
            column: 49
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: 78,
            column: 13
          },
          end: {
            line: 80,
            column: 9
          }
        }],
        line: 73
      },
      "6": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 88,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 88,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "7": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "8": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "9": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "10": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "11": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "12": {
        loc: {
          start: {
            line: 139,
            column: 41
          },
          end: {
            line: 139,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 139,
            column: 48
          },
          end: {
            line: 139,
            column: 53
          }
        }],
        line: 139
      },
      "13": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 145,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 145,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "14": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "15": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: 175,
            column: 13
          },
          end: {
            line: 185,
            column: 9
          }
        }],
        line: 167
      },
      "16": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 191,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 191,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "17": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "18": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "19": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "20": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "21": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "22": {
        loc: {
          start: {
            line: 227,
            column: 20
          },
          end: {
            line: 227,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 227,
            column: 45
          },
          end: {
            line: 227,
            column: 95
          }
        }, {
          start: {
            line: 227,
            column: 98
          },
          end: {
            line: 227,
            column: 107
          }
        }],
        line: 227
      },
      "23": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "24": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "25": {
        loc: {
          start: {
            line: 272,
            column: 32
          },
          end: {
            line: 272,
            column: 135
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 32
          },
          end: {
            line: 272,
            column: 86
          }
        }, {
          start: {
            line: 272,
            column: 90
          },
          end: {
            line: 272,
            column: 135
          }
        }],
        line: 272
      },
      "26": {
        loc: {
          start: {
            line: 273,
            column: 32
          },
          end: {
            line: 276,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 32
          },
          end: {
            line: 273,
            column: 76
          }
        }, {
          start: {
            line: 273,
            column: 80
          },
          end: {
            line: 276,
            column: 13
          }
        }],
        line: 273
      },
      "27": {
        loc: {
          start: {
            line: 279,
            column: 33
          },
          end: {
            line: 280,
            column: 18
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 33
          },
          end: {
            line: 279,
            column: 81
          }
        }, {
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 280,
            column: 18
          }
        }],
        line: 279
      },
      "28": {
        loc: {
          start: {
            line: 286,
            column: 29
          },
          end: {
            line: 288,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 287,
            column: 18
          },
          end: {
            line: 287,
            column: 52
          }
        }, {
          start: {
            line: 288,
            column: 18
          },
          end: {
            line: 288,
            column: 56
          }
        }],
        line: 286
      },
      "29": {
        loc: {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        }, {
          start: {
            line: 303,
            column: 17
          },
          end: {
            line: 306,
            column: 13
          }
        }],
        line: 289
      },
      "30": {
        loc: {
          start: {
            line: 301,
            column: 41
          },
          end: {
            line: 301,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 41
          },
          end: {
            line: 301,
            column: 65
          }
        }, {
          start: {
            line: 301,
            column: 69
          },
          end: {
            line: 301,
            column: 70
          }
        }],
        line: 301
      },
      "31": {
        loc: {
          start: {
            line: 315,
            column: 34
          },
          end: {
            line: 315,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 34
          },
          end: {
            line: 315,
            column: 88
          }
        }, {
          start: {
            line: 315,
            column: 92
          },
          end: {
            line: 315,
            column: 93
          }
        }],
        line: 315
      },
      "32": {
        loc: {
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "33": {
        loc: {
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "34": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "35": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "36": {
        loc: {
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 369,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 369,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "37": {
        loc: {
          start: {
            line: 375,
            column: 24
          },
          end: {
            line: 375,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 24
          },
          end: {
            line: 375,
            column: 37
          }
        }, {
          start: {
            line: 375,
            column: 41
          },
          end: {
            line: 375,
            column: 67
          }
        }],
        line: 375
      },
      "38": {
        loc: {
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 381,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 381,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "39": {
        loc: {
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 387,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 387,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "40": {
        loc: {
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "41": {
        loc: {
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "42": {
        loc: {
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 397,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 397,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "43": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 400,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 400,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "44": {
        loc: {
          start: {
            line: 403,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "45": {
        loc: {
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        }, {
          start: {
            line: 423,
            column: 13
          },
          end: {
            line: 427,
            column: 9
          }
        }],
        line: 408
      },
      "46": {
        loc: {
          start: {
            line: 420,
            column: 45
          },
          end: {
            line: 420,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 420,
            column: 45
          },
          end: {
            line: 420,
            column: 74
          }
        }, {
          start: {
            line: 420,
            column: 78
          },
          end: {
            line: 420,
            column: 79
          }
        }],
        line: 420
      },
      "47": {
        loc: {
          start: {
            line: 425,
            column: 45
          },
          end: {
            line: 425,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 425,
            column: 45
          },
          end: {
            line: 425,
            column: 74
          }
        }, {
          start: {
            line: 425,
            column: 78
          },
          end: {
            line: 425,
            column: 79
          }
        }],
        line: 425
      },
      "48": {
        loc: {
          start: {
            line: 431,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 431,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 431
      },
      "49": {
        loc: {
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 444,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 444,
            column: 9
          }
        }, {
          start: {
            line: 441,
            column: 13
          },
          end: {
            line: 444,
            column: 9
          }
        }],
        line: 436
      },
      "50": {
        loc: {
          start: {
            line: 456,
            column: 42
          },
          end: {
            line: 456,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 456,
            column: 50
          },
          end: {
            line: 456,
            column: 52
          }
        }],
        line: 456
      },
      "51": {
        loc: {
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 467,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 467,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "52": {
        loc: {
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 8
          },
          end: {
            line: 470,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      },
      "53": {
        loc: {
          start: {
            line: 471,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 471,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 471
      },
      "54": {
        loc: {
          start: {
            line: 482,
            column: 30
          },
          end: {
            line: 484,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 483,
            column: 22
          },
          end: {
            line: 483,
            column: 59
          }
        }, {
          start: {
            line: 484,
            column: 22
          },
          end: {
            line: 484,
            column: 26
          }
        }],
        line: 482
      },
      "55": {
        loc: {
          start: {
            line: 500,
            column: 8
          },
          end: {
            line: 502,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 500,
            column: 8
          },
          end: {
            line: 502,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 500
      },
      "56": {
        loc: {
          start: {
            line: 500,
            column: 12
          },
          end: {
            line: 500,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 500,
            column: 12
          },
          end: {
            line: 500,
            column: 23
          }
        }, {
          start: {
            line: 500,
            column: 27
          },
          end: {
            line: 500,
            column: 38
          }
        }],
        line: 500
      },
      "57": {
        loc: {
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 528,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 528,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 527
      },
      "58": {
        loc: {
          start: {
            line: 543,
            column: 8
          },
          end: {
            line: 544,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 543,
            column: 8
          },
          end: {
            line: 544,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 543
      },
      "59": {
        loc: {
          start: {
            line: 574,
            column: 42
          },
          end: {
            line: 574,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 574,
            column: 50
          },
          end: {
            line: 574,
            column: 52
          }
        }],
        line: 574
      },
      "60": {
        loc: {
          start: {
            line: 576,
            column: 8
          },
          end: {
            line: 578,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 576,
            column: 8
          },
          end: {
            line: 578,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 576
      },
      "61": {
        loc: {
          start: {
            line: 580,
            column: 32
          },
          end: {
            line: 582,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 581,
            column: 14
          },
          end: {
            line: 581,
            column: 32
          }
        }, {
          start: {
            line: 582,
            column: 14
          },
          end: {
            line: 582,
            column: 18
          }
        }],
        line: 580
      },
      "62": {
        loc: {
          start: {
            line: 580,
            column: 32
          },
          end: {
            line: 580,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 580,
            column: 32
          },
          end: {
            line: 580,
            column: 44
          }
        }, {
          start: {
            line: 580,
            column: 48
          },
          end: {
            line: 580,
            column: 71
          }
        }],
        line: 580
      },
      "63": {
        loc: {
          start: {
            line: 594,
            column: 30
          },
          end: {
            line: 594,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 594,
            column: 30
          },
          end: {
            line: 594,
            column: 38
          }
        }, {
          start: {
            line: 594,
            column: 42
          },
          end: {
            line: 594,
            column: 44
          }
        }],
        line: 594
      },
      "64": {
        loc: {
          start: {
            line: 596,
            column: 26
          },
          end: {
            line: 596,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 596,
            column: 51
          },
          end: {
            line: 596,
            column: 75
          }
        }, {
          start: {
            line: 596,
            column: 78
          },
          end: {
            line: 596,
            column: 79
          }
        }],
        line: 596
      },
      "65": {
        loc: {
          start: {
            line: 597,
            column: 27
          },
          end: {
            line: 597,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 597,
            column: 63
          },
          end: {
            line: 597,
            column: 75
          }
        }, {
          start: {
            line: 597,
            column: 78
          },
          end: {
            line: 597,
            column: 82
          }
        }],
        line: 597
      },
      "66": {
        loc: {
          start: {
            line: 597,
            column: 27
          },
          end: {
            line: 597,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 597,
            column: 27
          },
          end: {
            line: 597,
            column: 36
          }
        }, {
          start: {
            line: 597,
            column: 40
          },
          end: {
            line: 597,
            column: 60
          }
        }],
        line: 597
      },
      "67": {
        loc: {
          start: {
            line: 598,
            column: 32
          },
          end: {
            line: 600,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 599,
            column: 18
          },
          end: {
            line: 599,
            column: 67
          }
        }, {
          start: {
            line: 600,
            column: 18
          },
          end: {
            line: 600,
            column: 22
          }
        }],
        line: 598
      },
      "68": {
        loc: {
          start: {
            line: 598,
            column: 32
          },
          end: {
            line: 598,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 598,
            column: 32
          },
          end: {
            line: 598,
            column: 46
          }
        }, {
          start: {
            line: 598,
            column: 50
          },
          end: {
            line: 598,
            column: 62
          }
        }],
        line: 598
      },
      "69": {
        loc: {
          start: {
            line: 603,
            column: 22
          },
          end: {
            line: 609,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 604,
            column: 22
          },
          end: {
            line: 608,
            column: 21
          }
        }, {
          start: {
            line: 609,
            column: 22
          },
          end: {
            line: 609,
            column: 26
          }
        }],
        line: 603
      },
      "70": {
        loc: {
          start: {
            line: 618,
            column: 12
          },
          end: {
            line: 619,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 618,
            column: 12
          },
          end: {
            line: 619,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 618
      },
      "71": {
        loc: {
          start: {
            line: 620,
            column: 23
          },
          end: {
            line: 620,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 620,
            column: 23
          },
          end: {
            line: 620,
            column: 36
          }
        }, {
          start: {
            line: 620,
            column: 40
          },
          end: {
            line: 620,
            column: 63
          }
        }],
        line: 620
      },
      "72": {
        loc: {
          start: {
            line: 621,
            column: 23
          },
          end: {
            line: 621,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 621,
            column: 23
          },
          end: {
            line: 621,
            column: 36
          }
        }, {
          start: {
            line: 621,
            column: 40
          },
          end: {
            line: 621,
            column: 63
          }
        }],
        line: 621
      },
      "73": {
        loc: {
          start: {
            line: 631,
            column: 26
          },
          end: {
            line: 631,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 631,
            column: 43
          },
          end: {
            line: 631,
            column: 71
          }
        }, {
          start: {
            line: 631,
            column: 74
          },
          end: {
            line: 631,
            column: 78
          }
        }],
        line: 631
      },
      "74": {
        loc: {
          start: {
            line: 638,
            column: 8
          },
          end: {
            line: 643,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 638,
            column: 8
          },
          end: {
            line: 643,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 638
      },
      "75": {
        loc: {
          start: {
            line: 640,
            column: 12
          },
          end: {
            line: 642,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 640,
            column: 12
          },
          end: {
            line: 642,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 640
      },
      "76": {
        loc: {
          start: {
            line: 640,
            column: 16
          },
          end: {
            line: 640,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 640,
            column: 16
          },
          end: {
            line: 640,
            column: 28
          }
        }, {
          start: {
            line: 640,
            column: 32
          },
          end: {
            line: 640,
            column: 57
          }
        }],
        line: 640
      },
      "77": {
        loc: {
          start: {
            line: 649,
            column: 40
          },
          end: {
            line: 649,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 649,
            column: 48
          },
          end: {
            line: 649,
            column: 50
          }
        }],
        line: 649
      },
      "78": {
        loc: {
          start: {
            line: 659,
            column: 30
          },
          end: {
            line: 659,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 659,
            column: 30
          },
          end: {
            line: 659,
            column: 41
          }
        }, {
          start: {
            line: 659,
            column: 45
          },
          end: {
            line: 659,
            column: 47
          }
        }],
        line: 659
      },
      "79": {
        loc: {
          start: {
            line: 661,
            column: 26
          },
          end: {
            line: 661,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 661,
            column: 51
          },
          end: {
            line: 661,
            column: 75
          }
        }, {
          start: {
            line: 661,
            column: 78
          },
          end: {
            line: 661,
            column: 79
          }
        }],
        line: 661
      },
      "80": {
        loc: {
          start: {
            line: 662,
            column: 27
          },
          end: {
            line: 664,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 663,
            column: 18
          },
          end: {
            line: 663,
            column: 33
          }
        }, {
          start: {
            line: 664,
            column: 18
          },
          end: {
            line: 664,
            column: 22
          }
        }],
        line: 662
      },
      "81": {
        loc: {
          start: {
            line: 662,
            column: 27
          },
          end: {
            line: 662,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 662,
            column: 27
          },
          end: {
            line: 662,
            column: 39
          }
        }, {
          start: {
            line: 662,
            column: 43
          },
          end: {
            line: 662,
            column: 66
          }
        }],
        line: 662
      },
      "82": {
        loc: {
          start: {
            line: 665,
            column: 32
          },
          end: {
            line: 667,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 666,
            column: 18
          },
          end: {
            line: 666,
            column: 73
          }
        }, {
          start: {
            line: 667,
            column: 18
          },
          end: {
            line: 667,
            column: 22
          }
        }],
        line: 665
      },
      "83": {
        loc: {
          start: {
            line: 665,
            column: 32
          },
          end: {
            line: 665,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 665,
            column: 32
          },
          end: {
            line: 665,
            column: 49
          }
        }, {
          start: {
            line: 665,
            column: 53
          },
          end: {
            line: 665,
            column: 68
          }
        }],
        line: 665
      },
      "84": {
        loc: {
          start: {
            line: 670,
            column: 22
          },
          end: {
            line: 676,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 671,
            column: 22
          },
          end: {
            line: 675,
            column: 21
          }
        }, {
          start: {
            line: 676,
            column: 22
          },
          end: {
            line: 676,
            column: 26
          }
        }],
        line: 670
      },
      "85": {
        loc: {
          start: {
            line: 685,
            column: 12
          },
          end: {
            line: 686,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 685,
            column: 12
          },
          end: {
            line: 686,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 685
      },
      "86": {
        loc: {
          start: {
            line: 688,
            column: 12
          },
          end: {
            line: 691,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 688,
            column: 12
          },
          end: {
            line: 691,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 688
      },
      "87": {
        loc: {
          start: {
            line: 692,
            column: 12
          },
          end: {
            line: 695,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 692,
            column: 12
          },
          end: {
            line: 695,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 692
      },
      "88": {
        loc: {
          start: {
            line: 696,
            column: 12
          },
          end: {
            line: 700,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 696,
            column: 12
          },
          end: {
            line: 700,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 696
      },
      "89": {
        loc: {
          start: {
            line: 696,
            column: 16
          },
          end: {
            line: 698,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 696,
            column: 16
          },
          end: {
            line: 696,
            column: 46
          }
        }, {
          start: {
            line: 697,
            column: 16
          },
          end: {
            line: 698,
            column: 69
          }
        }],
        line: 696
      },
      "90": {
        loc: {
          start: {
            line: 697,
            column: 17
          },
          end: {
            line: 697,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 697,
            column: 17
          },
          end: {
            line: 697,
            column: 34
          }
        }, {
          start: {
            line: 697,
            column: 38
          },
          end: {
            line: 697,
            column: 61
          }
        }],
        line: 697
      },
      "91": {
        loc: {
          start: {
            line: 698,
            column: 21
          },
          end: {
            line: 698,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 698,
            column: 21
          },
          end: {
            line: 698,
            column: 41
          }
        }, {
          start: {
            line: 698,
            column: 45
          },
          end: {
            line: 698,
            column: 68
          }
        }],
        line: 698
      },
      "92": {
        loc: {
          start: {
            line: 704,
            column: 12
          },
          end: {
            line: 706,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 704,
            column: 12
          },
          end: {
            line: 706,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 704
      },
      "93": {
        loc: {
          start: {
            line: 707,
            column: 26
          },
          end: {
            line: 707,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 707,
            column: 26
          },
          end: {
            line: 707,
            column: 39
          }
        }, {
          start: {
            line: 707,
            column: 43
          },
          end: {
            line: 707,
            column: 66
          }
        }],
        line: 707
      },
      "94": {
        loc: {
          start: {
            line: 708,
            column: 26
          },
          end: {
            line: 708,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 708,
            column: 26
          },
          end: {
            line: 708,
            column: 39
          }
        }, {
          start: {
            line: 708,
            column: 43
          },
          end: {
            line: 708,
            column: 66
          }
        }],
        line: 708
      },
      "95": {
        loc: {
          start: {
            line: 718,
            column: 26
          },
          end: {
            line: 720,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 719,
            column: 18
          },
          end: {
            line: 719,
            column: 50
          }
        }, {
          start: {
            line: 720,
            column: 18
          },
          end: {
            line: 720,
            column: 22
          }
        }],
        line: 718
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/RoomService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/RoomService.ts"],
      sourcesContent: ["import { And, DataSource, In, LessThan, Not } from \"typeorm\";\nimport { JoinMethod, Room } from \"../entities/Room\";\nimport { User } from \"../entities/User\";\nimport { CrosswordService } from \"./CrosswordService\";\nimport { EloService } from \"./EloService\";\nimport { config } from \"../config/config\";\nimport { fastify } from \"../fastify\";\nimport { GameStats } from \"../entities/GameStats\";\nimport { BadRequestError, ForbiddenError, NotFoundError } from \"../errors/api\";\nimport { gameInactivityQueue, gameTimeoutQueue } from \"../jobs/queues\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { EntityManager } from \"typeorm\";\nimport { CachedGameInfo, RedisService } from \"./RedisService\";\n\nexport class RoomService {\n  private crosswordService: CrosswordService;\n  private eloService: EloService;\n  private ormConnection: DataSource;\n  private redisService: RedisService;\n\n  constructor(ormConnection: DataSource) {\n    this.ormConnection = ormConnection;\n    this.crosswordService = new CrosswordService(ormConnection);\n    this.eloService = new EloService(\n      ormConnection.getRepository(User),\n      ormConnection.getRepository(Room),\n      ormConnection.getRepository(GameStats),\n    );\n    this.redisService = new RedisService();\n  }\n\n  private async ensureGameStatsEntry(\n    room: Room,\n    user: User,\n  ): Promise<GameStats> {\n    const gameStatsRepo = this.ormConnection.getRepository(GameStats);\n\n    let stats = await gameStatsRepo.findOne({\n      where: { roomId: room.id, userId: user.id },\n    });\n\n    if (!stats) {\n      stats = gameStatsRepo.create({\n        user,\n        room,\n        userId: user.id,\n        roomId: room.id,\n        eloAtGame: user.eloRating,\n        correctGuesses: 0,\n        incorrectGuesses: 0,\n        correctGuessDetails: [],\n        isWinner: false,\n        winStreak: 0,\n      });\n\n      stats = await gameStatsRepo.save(stats);\n    }\n\n    return stats;\n  }\n\n  async getRoomById(roomId: number): Promise<Room> {\n    const results = await this.ormConnection\n      .getRepository(Room)\n      .findOne({ where: { id: roomId } });\n\n    if (results) {\n      let cachedGameInfo = await this.redisService.getGame(\n        results.id.toString(),\n      );\n      if (cachedGameInfo) {\n        results.found_letters = cachedGameInfo.foundLetters;\n        results.scores = cachedGameInfo.scores;\n      }\n    }\n    return results;\n  }\n\n  async getRoomsByUserId(userId: number): Promise<Room[]> {\n    return this.ormConnection\n      .getRepository(Room)\n      .find({ where: { players: { id: userId } } });\n  }\n\n  async joinRoom(\n    user: User,\n    difficulty: string,\n    type: \"1v1\" | \"2v2\" | \"free4all\" | \"time_trial\" = \"1v1\",\n  ): Promise<Room> {\n    // For time_trial, create a new room immediately since it's single player\n    if (type === \"time_trial\") {\n      return await this.createRoom(user.id, difficulty, type);\n    }\n\n    let room = await this.findEmptyRoomByDifficulty(difficulty, type, user);\n\n    if (room) {\n      fastify.log.info(`Found room with id: ${room.id}`);\n      await this.joinExistingRoom(room, user.id);\n      return room;\n    } else {\n      return await this.createRoom(user.id, difficulty, type);\n    }\n  }\n\n  async joinExistingRoom(room: Room, userId: number): Promise<void> {\n    fastify.log.info(`Joining room with id: ${room.id} by user: ${userId}`);\n    const player = await this.ormConnection\n      .getRepository(User)\n      .findOneBy({ id: userId });\n\n    if (!player) throw new Error(\"User not found\");\n\n    room.players.push(player);\n    room.markModified();\n\n    // Ensure newly joined player's active sockets receive future room events\n    fastify.io\n      .in(`user_${player.id}`)\n      .socketsJoin(room.id.toString());\n\n    await this.ensureGameStatsEntry(room, player);\n\n    const cachedGameInfo = await this.redisService.getGame(room.id.toString());\n    if (cachedGameInfo) {\n      if (!cachedGameInfo.userGuessCounts[player.id]) {\n        cachedGameInfo.userGuessCounts[player.id] = {\n          correct: 0,\n          incorrect: 0,\n        };\n      }\n      if (!cachedGameInfo.correctGuessDetails) {\n        cachedGameInfo.correctGuessDetails = {};\n      }\n      if (!cachedGameInfo.correctGuessDetails[player.id]) {\n        cachedGameInfo.correctGuessDetails[player.id] = [];\n      }\n      await this.redisService.cacheGame(room.id.toString(), cachedGameInfo);\n    }\n\n    // If room is full based on game type, change status to playing\n    const maxPlayers = config.game.maxPlayers[room.type];\n    if (room.players.length >= maxPlayers) {\n      room.status = \"playing\";\n      // Remove timeout job since the game is starting\n      await gameTimeoutQueue.remove(`room-timeout-${room.id}`);\n\n      // Start inactivity check\n      fastify.log.info(`Adding inactivity job for room: ${room.id}`);\n      await gameInactivityQueue.add(\n        \"game-inactivity\",\n        {\n          roomId: room.id,\n          lastActivityTimestamp: new Date().getTime(),\n        },\n        {\n          jobId: `game-inactivity-${room.id}-${uuidv4()}`,\n          delay: config.game.timeout.inactivity.initial,\n        },\n      );\n\n      // Emit game_started event through fastify.io\n      fastify.io.to(room.id.toString()).emit(\"game_started\", {\n        message: \"All players have joined! Game is starting.\",\n        room: room.toJSON(),\n        navigate: {\n          screen: \"game\",\n          params: { roomId: room.id },\n        },\n      });\n    }\n\n    await this.ormConnection.getRepository(Room).save(room);\n  }\n\n  async createRoom(\n    userId: number,\n    difficulty: string,\n    type: \"1v1\" | \"2v2\" | \"free4all\" | \"time_trial\" = \"1v1\",\n  ): Promise<Room> {\n    const crossword = await this.crosswordService.getCrosswordByDifficulty(\n      difficulty,\n    );\n\n    const player = await this.ormConnection\n      .getRepository(User)\n      .findOneBy({ id: userId });\n\n    if (!player) throw new Error(\"User not found\");\n\n    const room = new Room();\n    room.players = [player];\n    room.crossword = crossword;\n    room.difficulty = difficulty;\n    room.type = type;\n    room.scores = { [player.id]: 0 };\n    room.join = JoinMethod.RANDOM;\n\n    room.found_letters = await this.crosswordService.createFoundLettersTemplate(\n      crossword.id,\n    );\n\n    // For time trials, start the game immediately\n    if (type === \"time_trial\") {\n      room.status = \"playing\";\n      room.last_activity_at = new Date();\n    }\n\n    const savedRoom = await this.ormConnection.getRepository(Room).save(room);\n\n    // Ensure the creating player's sockets are subscribed to the room channel\n    fastify.io\n      .in(`user_${player.id}`)\n      .socketsJoin(savedRoom.id.toString());\n\n    const stats = await this.ensureGameStatsEntry(savedRoom, player);\n    savedRoom.stats = [stats];\n\n    // Only add timeout job for non-time trial games\n    if (type !== \"time_trial\") {\n      fastify.log.info(`Adding timeout job for room: ${savedRoom.id}`);\n      await gameTimeoutQueue.add(\n        \"game-timeout\",\n        { roomId: savedRoom.id },\n        {\n          delay: config.game.timeout.pending,\n          jobId: `game-timeout`,\n        },\n      );\n      fastify.log.info(`Added timeout job for room: ${savedRoom.id}`);\n    } else {\n      // For time trials, start inactivity check immediately\n      fastify.log.info(\n        `Adding inactivity job for time trial room: ${savedRoom.id}`,\n      );\n      await gameInactivityQueue.add(\n        \"game-inactivity\",\n        {\n          roomId: savedRoom.id,\n          lastActivityTimestamp: room.last_activity_at.getTime(),\n        },\n        {\n          jobId: `game-inactivity-${savedRoom.id}-${uuidv4()}`,\n          delay: config.game.timeout.inactivity.initial,\n        },\n      );\n    }\n\n    return savedRoom;\n  }\n\n  async cancelRoom(roomId: number, requestingUserId?: number): Promise<Room> {\n    const room = await this.getRoomById(roomId);\n    if (!room) throw new NotFoundError(\"Room not found\");\n\n    if (room.status !== \"pending\") {\n      throw new BadRequestError(\"Only pending games can be cancelled\");\n    }\n\n    if (![\"1v1\", \"free4all\"].includes(room.type)) {\n      throw new BadRequestError(\n        \"Only 1v1 or free4all games can be cancelled while pending\",\n      );\n    }\n\n    if (requestingUserId !== undefined) {\n      const isParticipant = room.players.some((player) =>\n        player.id === requestingUserId\n      );\n\n      if (!isParticipant) {\n        throw new ForbiddenError(\"You are not a participant in this game\");\n      }\n    }\n\n    room.status = \"cancelled\";\n    room.markModified();\n    await this.ormConnection.getRepository(Room).save(room);\n    return room;\n  }\n\n  private async findEmptyRoomByDifficulty(\n    difficulty: string,\n    type: \"1v1\" | \"2v2\" | \"free4all\" | \"time_trial\",\n    user: User,\n  ): Promise<Room> {\n    let userRoomIds: number[] = [];\n    // First get all rooms this user is in\n    if (!user.roles.includes(\"admin\")) {\n      const userRooms = await this.ormConnection\n        .getRepository(Room)\n        .createQueryBuilder(\"room\")\n        .select(\"room.id\")\n        .innerJoin(\"room.players\", \"players\")\n        .where(\"players.id = :userId\", { userId: user.id })\n        .getMany();\n      userRoomIds = userRooms.map((room) => room.id);\n    }\n\n    return this.ormConnection.getRepository(Room).findOne({\n      where: {\n        difficulty,\n        status: \"pending\",\n        type,\n        id: userRoomIds.length > 0 ? Not(In(userRoomIds)) : undefined,\n        players: LessThan(config.game.maxPlayers[type]),\n      },\n      order: { created_at: \"ASC\" },\n    });\n  }\n\n  async getActiveRoomsForUser(userId: number): Promise<Room[]> {\n    return this.ormConnection\n      .getRepository(Room)\n      .createQueryBuilder(\"room\")\n      .leftJoinAndSelect(\"room.players\", \"players\")\n      .leftJoinAndSelect(\"room.crossword\", \"crossword\")\n      .where(\"players.id = :userId\", { userId })\n      .andWhere(\"room.status = :status\", { status: \"playing\" })\n      .getMany();\n  }\n\n  async onGameEnd(room: Room, forfeitedBy?: number): Promise<void> {\n    room.status = \"finished\";\n    room.completed_at = new Date();\n\n    // If game was forfeited, adjust scores\n    if (forfeitedBy !== undefined) {\n      const minScore = Math.min(...Object.values(room.scores)) +\n        config.game.points.forfeit;\n      room.scores[forfeitedBy] = minScore;\n    }\n\n    // Find player with highest score\n    const highestScore = Math.max(...Object.values(room.scores));\n    const winnerIds = Object.entries(room.scores)\n      .filter(([userId, score]) => score === highestScore)\n      .map(([userId]) => parseInt(userId));\n\n    // Get all game stats for players in this room\n    const gameStatsRepo = this.ormConnection.getRepository(GameStats);\n    const allGameStats = await gameStatsRepo.find({\n      where: {\n        roomId: room.id,\n      },\n    });\n\n    const cachedGameInfo = await this.redisService.getGame(room.id.toString());\n\n    // Log for debugging\n    if (!cachedGameInfo) {\n      fastify.log.warn(\n        `No cached game info found for room ${room.id} during onGameEnd`,\n      );\n    }\n\n    console.log(\"cached game info\", cachedGameInfo);\n    // Update win streaks and winner from cached game\n    for (const player of room.players) {\n      const playerStats = allGameStats.find((stat) =>\n        stat.userId === player.id\n      ) || await this.ensureGameStatsEntry(room, player);\n\n      const guessCounts = cachedGameInfo?.userGuessCounts?.[player.id] || {\n        correct: 0,\n        incorrect: 0,\n      };\n\n      playerStats.correctGuesses = guessCounts.correct;\n      playerStats.incorrectGuesses = guessCounts.incorrect;\n\n      const guessDetails = cachedGameInfo?.correctGuessDetails?.[player.id] ||\n        [];\n      playerStats.correctGuessDetails = guessDetails.map((detail) => ({\n        ...detail,\n        timestamp: new Date(detail.timestamp),\n      }));\n\n      // If game was forfeited, non-forfeiting players are winners\n      const isWinner = forfeitedBy !== undefined\n        ? playerStats.userId !== forfeitedBy\n        : winnerIds.includes(playerStats.userId);\n\n      if (isWinner) {\n        // Get the player's stats from their last completed game\n        const previousStats = await gameStatsRepo\n          .createQueryBuilder(\"stats\")\n          .innerJoinAndSelect(\"stats.room\", \"room\")\n          .where(\"stats.userId = :userId\", { userId: playerStats.userId })\n          .andWhere(\"stats.roomId != :roomId\", { roomId: room.id })\n          .andWhere(\"room.status = :status\", { status: \"finished\" })\n          .orderBy(\"stats.createdAt\", \"DESC\")\n          .take(1)\n          .getOne();\n\n        playerStats.isWinner = true;\n        playerStats.winStreak = (previousStats?.winStreak || 0) + 1;\n      } else {\n        playerStats.isWinner = false;\n        playerStats.winStreak = 0; // Reset win streak for losers\n      }\n\n      console.log(`saving gameStats. user: ${playerStats.userId}`, playerStats);\n\n      await gameStatsRepo.save(playerStats);\n    }\n\n    // Update ELO ratings for all players\n    try {\n      const newRatings = await this.eloService.updateEloRatings(room);\n\n      // Emit rating changes to all players\n      for (const [playerId, newRating] of newRatings.entries()) {\n        const oldRating = room.players.find((p) =>\n          p.id === playerId\n        )?.eloRating || 0;\n        const ratingChange = newRating - oldRating;\n\n        fastify.io.to(playerId.toString()).emit(\"rating_change\", {\n          oldRating,\n          newRating,\n          change: ratingChange,\n        });\n      }\n    } catch (error) {\n      fastify.log.error({ err: error }, \"Failed to update ELO ratings\");\n    }\n\n    await this.ormConnection.getRepository(Room).save(room);\n\n    // If game was forfeited, emit forfeit event\n    if (forfeitedBy !== undefined) {\n      fastify.io.to(room.id.toString()).emit(\"game_forfeited\", {\n        message: \"A player has forfeited the game\",\n        forfeitedBy,\n        room: room.toJSON(),\n      });\n    }\n  }\n\n  async forfeitGame(roomId: number, userId: number): Promise<Room> {\n    const room = await this.getRoomById(roomId);\n\n    fastify.log.info(`Forfeiting game with id: ${roomId} by user: ${userId}`);\n\n    if (!room) {\n      throw new Error(\"Room not found\");\n    }\n\n    if (!room.players.some((player) => player.id === userId)) {\n      throw new Error(\"User is not a participant in this room\");\n    }\n\n    // Ensure game stats exist for all players before ending the game\n    for (const player of room.players) {\n      await this.ensureGameStatsEntry(room, player);\n    }\n\n    room.markModified();\n    await this.onGameEnd(room, userId);\n    return room;\n  }\n\n  async getRoomsByUserAndStatus(\n    userId: number,\n    status?: \"playing\" | \"pending\" | \"finished\" | \"cancelled\",\n  ): Promise<Room[]> {\n    const query = this.ormConnection\n      .getRepository(Room)\n      .createQueryBuilder(\"room\")\n      .leftJoinAndSelect(\"room.players\", \"players\")\n      .leftJoinAndSelect(\"room.crossword\", \"crossword\")\n      .where(\"players.id = :userId\", { userId });\n\n    if (status) {\n      query.andWhere(\"room.status = :status\", { status });\n    }\n\n    return query.getMany();\n  }\n\n  private isGameFinished(room: Room): boolean {\n    // If room is not in playing state, it can't be won\n    if (room.status !== \"playing\") return false;\n\n    // Check if all letters have been found\n    // found_letters is a string array where '*' represents unfound letters\n    return !room.found_letters.includes(\"*\");\n  }\n\n  async handleGuess(\n    roomId: number,\n    userId: number,\n    x: number,\n    y: number,\n    guess: string,\n    entityManager?: EntityManager,\n  ): Promise<Room> {\n    const manager = entityManager || this.ormConnection.manager;\n\n    // Load room (players and crossword are eager on the entity)\n    let room = await manager.getRepository(Room).findOne({\n      where: { id: roomId },\n    });\n    if (!room) throw new NotFoundError(\"Room not found\");\n\n    // Load or initialize game cache\n    let cachedGameInfo = await this.redisService.getGame(room.id.toString());\n    if (!cachedGameInfo) {\n      // Initialize cache from the current DB state\n      cachedGameInfo = room.createRoomCache();\n    }\n\n    // Ensure user tracking structures exist\n    if (!cachedGameInfo.userGuessCounts[userId]) {\n      cachedGameInfo.userGuessCounts[userId] = { correct: 0, incorrect: 0 };\n    }\n    if (!cachedGameInfo.correctGuessDetails) {\n      cachedGameInfo.correctGuessDetails = {};\n    }\n    if (!cachedGameInfo.correctGuessDetails[userId]) {\n      cachedGameInfo.correctGuessDetails[userId] = [];\n    }\n    if (cachedGameInfo.scores[userId] === undefined) {\n      cachedGameInfo.scores[userId] = 0;\n    }\n\n    // Compute letter index\n    const letterIndex = x * room.crossword.col_size + y;\n    if (cachedGameInfo.foundLetters[letterIndex] !== \"*\") {\n      return room;\n    }\n\n    const isCorrect = await this.crosswordService.checkGuess(\n      room.crossword,\n      { x, y },\n      guess,\n    );\n\n    // Update stats based on guess result\n    if (isCorrect) {\n      // Update last activity timestamp\n      cachedGameInfo.lastActivityAt = Date.now();\n\n      cachedGameInfo.userGuessCounts[userId].correct++;\n      cachedGameInfo.correctGuessDetails[userId].push({\n        row: x,\n        col: y,\n        letter: guess,\n        timestamp: Date.now(),\n      });\n\n      // Update board + score\n      cachedGameInfo.foundLetters[letterIndex] = guess;\n      cachedGameInfo.scores[userId] = (cachedGameInfo.scores[userId] || 0) +\n        config.game.points.correct;\n    } else {\n      cachedGameInfo.userGuessCounts[userId].incorrect++;\n      cachedGameInfo.scores[userId] = (cachedGameInfo.scores[userId] || 0) +\n        config.game.points.incorrect;\n    }\n\n    // Persist authoritative state to DB to avoid cache reinitialization wiping progress\n    room.found_letters = cachedGameInfo.foundLetters;\n    room.scores = cachedGameInfo.scores;\n    if (cachedGameInfo.lastActivityAt) {\n      room.last_activity_at = new Date(cachedGameInfo.lastActivityAt);\n    }\n\n    // Determine if the game is finished based on the updated state\n    const finished = !cachedGameInfo.foundLetters.includes(\"*\");\n\n    if (finished) {\n      // Mark modified so toJSON invalidates cache\n      room.markModified();\n      await this.onGameEnd(room);\n    } else {\n      // Save room if game is not finished\n      await manager.getRepository(Room).save(room);\n    }\n\n    // Update cache after DB write\n    await this.redisService.cacheGame(room.id.toString(), cachedGameInfo);\n\n    // Invalidate view cache so clients receive updated view\n    room.markModified();\n    return room;\n  }\n\n  addCacheToRoom(room: Room, cachedGameInfo: CachedGameInfo): Room {\n    room.found_letters = cachedGameInfo.foundLetters;\n    room.scores = cachedGameInfo.scores;\n    return room;\n  }\n\n  async getRecentGamesWithStats(\n    userId: number,\n    limit: number = 10,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<{\n    room: {\n      id: number;\n      difficulty: string;\n      type: string;\n      status: string;\n      created_at: string;\n      completed_at: string | null;\n      scores: Record<string, number>;\n    };\n    stats: {\n      correctGuesses: number;\n      incorrectGuesses: number;\n      isWinner: boolean;\n      eloAtGame: number;\n    };\n  }[]> {\n    const query = this.ormConnection\n      .getRepository(GameStats)\n      .createQueryBuilder(\"stats\")\n      .leftJoinAndSelect(\"stats.room\", \"room\")\n      .leftJoinAndSelect(\"room.crossword\", \"crossword\")\n      .where(\"stats.userId = :userId\", { userId })\n      .andWhere(\"room.status = :status\", { status: \"finished\" })\n      .orderBy(\"stats.createdAt\", \"DESC\");\n\n    if (startDate) {\n      query.andWhere(\"stats.createdAt >= :startDate\", { startDate });\n    }\n\n    if (endDate) {\n      query.andWhere(\"stats.createdAt <= :endDate\", { endDate });\n    }\n\n    if (limit > 0) {\n      query.take(limit);\n    }\n\n    const gameStats = await query.getMany();\n\n    return gameStats.map((stats) => ({\n      room: {\n        id: stats.room.id,\n        difficulty: stats.room.difficulty,\n        type: stats.room.type,\n        status: stats.room.status,\n        created_at: stats.room.created_at.toISOString(),\n        completed_at: stats.room.completed_at\n          ? stats.room.completed_at.toISOString()\n          : null,\n        scores: stats.room.scores,\n      },\n      stats: {\n        correctGuesses: stats.correctGuesses,\n        incorrectGuesses: stats.incorrectGuesses,\n        isWinner: stats.isWinner,\n        eloAtGame: stats.eloAtGame,\n      },\n    }));\n  }\n\n  async createChallengeRoom(\n    challengerId: number,\n    challengedId: number,\n    difficulty: string,\n    context?: string,\n  ): Promise<Room> {\n    const [challenger, challenged] = await Promise.all([\n      this.ormConnection.getRepository(User).findOneBy({ id: challengerId }),\n      this.ormConnection.getRepository(User).findOneBy({ id: challengedId }),\n    ]);\n\n    if (!challenger || !challenged) {\n      throw new NotFoundError(\"User not found\");\n    }\n\n    const crossword = await this.crosswordService.getCrosswordByDifficulty(\n      difficulty,\n    );\n\n    const room = new Room();\n    room.players = [challenger, challenged];\n    room.crossword = crossword;\n    room.difficulty = difficulty;\n    room.type = \"1v1\";\n    room.status = \"pending\";\n    room.scores = { [challenger.id]: 0, [challenged.id]: 0 };\n    room.join = JoinMethod.CHALLENGE;\n\n    room.found_letters = await this.crosswordService.createFoundLettersTemplate(\n      crossword.id,\n    );\n\n    const savedRoom = await this.ormConnection.getRepository(Room).save(room);\n\n    // Emit a challenge event through socket.io\n    fastify.io.to(`user_${challenged.id.toString()}`).emit(\"challenge_received\", {\n      room: savedRoom.toJSON(),\n      challenger: {\n        id: challenger.id,\n        username: challenger.username,\n      },\n      context,\n    });\n\n    return savedRoom;\n  }\n\n  async acceptChallenge(roomId: number, userId: number): Promise<Room> {\n    const room = await this.getRoomById(roomId);\n    if (!room) throw new NotFoundError(\"Room not found\");\n\n    await this.joinExistingRoom(room, userId);\n\n    // Emit game_started event with navigation for both players\n    fastify.io.to(room.id.toString()).emit(\"game_started\", {\n      message: \"Challenge accepted! Game is starting.\",\n      room: room.toJSON(),\n      navigate: {\n        screen: \"game\",\n        params: { roomId: room.id },\n      },\n    });\n\n    return room;\n  }\n\n  async rejectChallenge(roomId: number): Promise<Room> {\n    const room = await this.getRoomById(roomId);\n    if (!room) throw new NotFoundError(\"Room not found\");\n\n    room.status = \"cancelled\";\n    room.markModified();\n\n    await this.ormConnection.getRepository(Room).save(room);\n    return room;\n  }\n\n  async getPendingChallenges(userId: number): Promise<Room[]> {\n    const query = this.ormConnection\n      .getRepository(Room)\n      .createQueryBuilder(\"room\")\n      .innerJoinAndSelect(\"room.players\", \"players\")\n      .leftJoinAndSelect(\"room.crossword\", \"crossword\")\n      .where(\"room.status = :status\", { status: \"pending\" })\n      .andWhere(\"room.type = :type\", { type: \"1v1\" })\n      .andWhere((qb) => {\n        const subQuery = qb\n          .subQuery()\n          .select(\"rp.room_id\")\n          .from(\"room_players\", \"rp\")\n          .where(\"rp.user_id = :userId\")\n          .getQuery();\n        return \"room.id IN \" + subQuery;\n      })\n      .setParameters({\n        status: \"pending\",\n        type: \"1v1\",\n        userId,\n      });\n\n    return query.getMany();\n  }\n  async getTimeTrialLeaderboard(\n    roomId: number,\n    limit: number = 10,\n  ): Promise<{\n    topEntries: Array<{\n      rank: number;\n      roomId: number;\n      score: number;\n      user: { id: number; username: string; eloRating: number } | null;\n      created_at: string;\n      completed_at: string | null;\n      timeTakenMs: number | null;\n    }>;\n    currentPlayerEntry?: {\n      rank: number;\n      roomId: number;\n      score: number;\n      user: { id: number; username: string; eloRating: number } | null;\n      created_at: string;\n      completed_at: string | null;\n      timeTakenMs: number | null;\n    };\n  }> {\n    const room = await this.getRoomById(roomId);\n    if (!room) {\n      throw new NotFoundError(\"Room not found\");\n    }\n\n    const crosswordId = room.crossword.id;\n    const currentPlayerId = room.players && room.players.length > 0\n      ? room.players[0].id\n      : null;\n\n    // Fetch finished time-trial games on the same crossword\n    const rooms = await this.ormConnection.getRepository(Room).find({\n      where: {\n        type: \"time_trial\",\n        status: \"finished\",\n        crossword: { id: crosswordId },\n      },\n      order: { completed_at: \"DESC\" },\n    });\n\n    // Build leaderboard entries\n    const entries = rooms.map((r) => {\n      const scoresObj = r.scores || {};\n      const scoreValues = Object.values(scoresObj);\n      const score = scoreValues.length > 0 ? Math.max(...scoreValues) : 0;\n\n      const player = r.players && r.players.length > 0 ? r.players[0] : null;\n\n      const timeTakenMs = r.completed_at && r.created_at\n        ? r.completed_at.getTime() - r.created_at.getTime()\n        : null;\n\n      return {\n        roomId: r.id,\n        user: player\n          ? {\n            id: player.id,\n            username: player.username,\n            eloRating: player.eloRating,\n          }\n          : null,\n        score,\n        created_at: r.created_at,\n        completed_at: r.completed_at,\n        timeTakenMs,\n      };\n    });\n\n    // Sort by score (desc), then by time taken (asc if available)\n    entries.sort((a, b) => {\n      if (b.score !== a.score) return b.score - a.score;\n      const ta = a.timeTakenMs ?? Number.MAX_SAFE_INTEGER;\n      const tb = b.timeTakenMs ?? Number.MAX_SAFE_INTEGER;\n      return ta - tb;\n    });\n\n    // Add ranks to all entries\n    const rankedEntries = entries.map((e, idx) => ({\n      rank: idx + 1,\n      roomId: e.roomId,\n      score: e.score,\n      user: e.user,\n      created_at: e.created_at.toISOString(),\n      completed_at: e.completed_at ? e.completed_at.toISOString() : null,\n      timeTakenMs: e.timeTakenMs,\n    }));\n\n    // Get top N entries\n    const topEntries = rankedEntries.slice(0, limit);\n\n    // Find current player's entry if not in top N\n    let currentPlayerEntry: typeof rankedEntries[0] | undefined;\n    if (currentPlayerId) {\n      const currentEntry = rankedEntries.find((e) => e.roomId === roomId);\n      if (currentEntry && currentEntry.rank > limit) {\n        currentPlayerEntry = currentEntry;\n      }\n    }\n\n    return {\n      topEntries,\n      currentPlayerEntry,\n    };\n  }\n\n  async getGlobalTimeTrialLeaderboard(\n    limit: number = 10,\n  ): Promise<Array<{\n    rank: number;\n    roomId: number;\n    score: number;\n    user: { id: number; username: string; eloRating: number } | null;\n    created_at: string;\n    completed_at: string | null;\n    timeTakenMs: number | null;\n  }>> {\n    const roomRepository = this.ormConnection.getRepository(Room);\n\n    const rooms = await roomRepository.find({\n      where: {\n        type: \"time_trial\",\n        status: \"finished\",\n      },\n      order: { completed_at: \"DESC\" },\n    });\n\n    const entries = rooms.map((room) => {\n      const scoresObj = room.scores || {};\n      const scoreValues = Object.values(scoresObj);\n      const score = scoreValues.length > 0 ? Math.max(...scoreValues) : 0;\n\n      const player = room.players && room.players.length > 0\n        ? room.players[0]\n        : null;\n\n      const timeTakenMs = room.completed_at && room.created_at\n        ? room.completed_at.getTime() - room.created_at.getTime()\n        : null;\n\n      return {\n        roomId: room.id,\n        user: player\n          ? {\n            id: player.id,\n            username: player.username,\n            eloRating: player.eloRating,\n          }\n          : null,\n        score,\n        created_at: room.created_at,\n        completed_at: room.completed_at,\n        timeTakenMs,\n      };\n    });\n\n    const bestByUser = new Map<number, typeof entries[number]>();\n\n    for (const entry of entries) {\n      if (!entry.user) continue;\n\n      const existing = bestByUser.get(entry.user.id);\n      if (!existing) {\n        bestByUser.set(entry.user.id, entry);\n        continue;\n      }\n\n      if (entry.score > existing.score) {\n        bestByUser.set(entry.user.id, entry);\n        continue;\n      }\n\n      if (\n        entry.score === existing.score &&\n        (entry.timeTakenMs ?? Number.MAX_SAFE_INTEGER) <\n          (existing.timeTakenMs ?? Number.MAX_SAFE_INTEGER)\n      ) {\n        bestByUser.set(entry.user.id, entry);\n      }\n    }\n\n    const rankedEntries = Array.from(bestByUser.values())\n      .sort((a, b) => {\n        if (b.score !== a.score) {\n          return b.score - a.score;\n        }\n        const aTime = a.timeTakenMs ?? Number.MAX_SAFE_INTEGER;\n        const bTime = b.timeTakenMs ?? Number.MAX_SAFE_INTEGER;\n        return aTime - bTime;\n      })\n      .slice(0, limit)\n      .map((entry, index) => ({\n        rank: index + 1,\n        roomId: entry.roomId,\n        score: entry.score,\n        user: entry.user,\n        created_at: entry.created_at.toISOString(),\n        completed_at: entry.completed_at\n          ? entry.completed_at.toISOString()\n          : null,\n        timeTakenMs: entry.timeTakenMs,\n      }));\n\n    return rankedEntries;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8527791f76f010f9f8c7b9e8bc786b5074add060"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2e5g1etrdb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2e5g1etrdb();
cov_2e5g1etrdb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2e5g1etrdb().s[1]++;
exports.RoomService = void 0;
const typeorm_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[2]++, require("typeorm"));
const Room_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[3]++, require("../entities/Room"));
const User_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[4]++, require("../entities/User"));
const CrosswordService_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[5]++, require("./CrosswordService"));
const EloService_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[6]++, require("./EloService"));
const config_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[7]++, require("../config/config"));
const fastify_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[8]++, require("../fastify"));
const GameStats_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[9]++, require("../entities/GameStats"));
const api_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[10]++, require("../errors/api"));
const queues_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[11]++, require("../jobs/queues"));
const uuid_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[12]++, require("uuid"));
const RedisService_1 =
/* istanbul ignore next */
(cov_2e5g1etrdb().s[13]++, require("./RedisService"));
class RoomService {
  crosswordService;
  eloService;
  ormConnection;
  redisService;
  constructor(ormConnection) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[0]++;
    cov_2e5g1etrdb().s[14]++;
    this.ormConnection = ormConnection;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[15]++;
    this.crosswordService = new CrosswordService_1.CrosswordService(ormConnection);
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[16]++;
    this.eloService = new EloService_1.EloService(ormConnection.getRepository(User_1.User), ormConnection.getRepository(Room_1.Room), ormConnection.getRepository(GameStats_1.GameStats));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[17]++;
    this.redisService = new RedisService_1.RedisService();
  }
  async ensureGameStatsEntry(room, user) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[1]++;
    const gameStatsRepo =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[18]++, this.ormConnection.getRepository(GameStats_1.GameStats));
    let stats =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[19]++, await gameStatsRepo.findOne({
      where: {
        roomId: room.id,
        userId: user.id
      }
    }));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[20]++;
    if (!stats) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[0][0]++;
      cov_2e5g1etrdb().s[21]++;
      stats = gameStatsRepo.create({
        user,
        room,
        userId: user.id,
        roomId: room.id,
        eloAtGame: user.eloRating,
        correctGuesses: 0,
        incorrectGuesses: 0,
        correctGuessDetails: [],
        isWinner: false,
        winStreak: 0
      });
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[22]++;
      stats = await gameStatsRepo.save(stats);
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[0][1]++;
    }
    cov_2e5g1etrdb().s[23]++;
    return stats;
  }
  async getRoomById(roomId) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[2]++;
    const results =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[24]++, await this.ormConnection.getRepository(Room_1.Room).findOne({
      where: {
        id: roomId
      }
    }));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[25]++;
    if (results) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[1][0]++;
      let cachedGameInfo =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[26]++, await this.redisService.getGame(results.id.toString()));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[27]++;
      if (cachedGameInfo) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[2][0]++;
        cov_2e5g1etrdb().s[28]++;
        results.found_letters = cachedGameInfo.foundLetters;
        /* istanbul ignore next */
        cov_2e5g1etrdb().s[29]++;
        results.scores = cachedGameInfo.scores;
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[2][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[1][1]++;
    }
    cov_2e5g1etrdb().s[30]++;
    return results;
  }
  async getRoomsByUserId(userId) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[3]++;
    cov_2e5g1etrdb().s[31]++;
    return this.ormConnection.getRepository(Room_1.Room).find({
      where: {
        players: {
          id: userId
        }
      }
    });
  }
  async joinRoom(user, difficulty, type =
  /* istanbul ignore next */
  (cov_2e5g1etrdb().b[3][0]++, "1v1")) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[4]++;
    cov_2e5g1etrdb().s[32]++;
    // For time_trial, create a new room immediately since it's single player
    if (type === "time_trial") {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[4][0]++;
      cov_2e5g1etrdb().s[33]++;
      return await this.createRoom(user.id, difficulty, type);
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[4][1]++;
    }
    let room =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[34]++, await this.findEmptyRoomByDifficulty(difficulty, type, user));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[35]++;
    if (room) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[5][0]++;
      cov_2e5g1etrdb().s[36]++;
      fastify_1.fastify.log.info(`Found room with id: ${room.id}`);
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[37]++;
      await this.joinExistingRoom(room, user.id);
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[38]++;
      return room;
    } else {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[5][1]++;
      cov_2e5g1etrdb().s[39]++;
      return await this.createRoom(user.id, difficulty, type);
    }
  }
  async joinExistingRoom(room, userId) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[5]++;
    cov_2e5g1etrdb().s[40]++;
    fastify_1.fastify.log.info(`Joining room with id: ${room.id} by user: ${userId}`);
    const player =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[41]++, await this.ormConnection.getRepository(User_1.User).findOneBy({
      id: userId
    }));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[42]++;
    if (!player) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[6][0]++;
      cov_2e5g1etrdb().s[43]++;
      throw new Error("User not found");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[6][1]++;
    }
    cov_2e5g1etrdb().s[44]++;
    room.players.push(player);
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[45]++;
    room.markModified();
    // Ensure newly joined player's active sockets receive future room events
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[46]++;
    fastify_1.fastify.io.in(`user_${player.id}`).socketsJoin(room.id.toString());
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[47]++;
    await this.ensureGameStatsEntry(room, player);
    const cachedGameInfo =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[48]++, await this.redisService.getGame(room.id.toString()));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[49]++;
    if (cachedGameInfo) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[7][0]++;
      cov_2e5g1etrdb().s[50]++;
      if (!cachedGameInfo.userGuessCounts[player.id]) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[8][0]++;
        cov_2e5g1etrdb().s[51]++;
        cachedGameInfo.userGuessCounts[player.id] = {
          correct: 0,
          incorrect: 0
        };
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[8][1]++;
      }
      cov_2e5g1etrdb().s[52]++;
      if (!cachedGameInfo.correctGuessDetails) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[9][0]++;
        cov_2e5g1etrdb().s[53]++;
        cachedGameInfo.correctGuessDetails = {};
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[9][1]++;
      }
      cov_2e5g1etrdb().s[54]++;
      if (!cachedGameInfo.correctGuessDetails[player.id]) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[10][0]++;
        cov_2e5g1etrdb().s[55]++;
        cachedGameInfo.correctGuessDetails[player.id] = [];
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[10][1]++;
      }
      cov_2e5g1etrdb().s[56]++;
      await this.redisService.cacheGame(room.id.toString(), cachedGameInfo);
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[7][1]++;
    }
    // If room is full based on game type, change status to playing
    const maxPlayers =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[57]++, config_1.config.game.maxPlayers[room.type]);
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[58]++;
    if (room.players.length >= maxPlayers) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[11][0]++;
      cov_2e5g1etrdb().s[59]++;
      room.status = "playing";
      // Remove timeout job since the game is starting
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[60]++;
      await queues_1.gameTimeoutQueue.remove(`room-timeout-${room.id}`);
      // Start inactivity check
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[61]++;
      fastify_1.fastify.log.info(`Adding inactivity job for room: ${room.id}`);
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[62]++;
      await queues_1.gameInactivityQueue.add("game-inactivity", {
        roomId: room.id,
        lastActivityTimestamp: new Date().getTime()
      }, {
        jobId: `game-inactivity-${room.id}-${(0, uuid_1.v4)()}`,
        delay: config_1.config.game.timeout.inactivity.initial
      });
      // Emit game_started event through fastify.io
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[63]++;
      fastify_1.fastify.io.to(room.id.toString()).emit("game_started", {
        message: "All players have joined! Game is starting.",
        room: room.toJSON(),
        navigate: {
          screen: "game",
          params: {
            roomId: room.id
          }
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[11][1]++;
    }
    cov_2e5g1etrdb().s[64]++;
    await this.ormConnection.getRepository(Room_1.Room).save(room);
  }
  async createRoom(userId, difficulty, type =
  /* istanbul ignore next */
  (cov_2e5g1etrdb().b[12][0]++, "1v1")) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[6]++;
    const crossword =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[65]++, await this.crosswordService.getCrosswordByDifficulty(difficulty));
    const player =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[66]++, await this.ormConnection.getRepository(User_1.User).findOneBy({
      id: userId
    }));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[67]++;
    if (!player) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[13][0]++;
      cov_2e5g1etrdb().s[68]++;
      throw new Error("User not found");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[13][1]++;
    }
    const room =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[69]++, new Room_1.Room());
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[70]++;
    room.players = [player];
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[71]++;
    room.crossword = crossword;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[72]++;
    room.difficulty = difficulty;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[73]++;
    room.type = type;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[74]++;
    room.scores = {
      [player.id]: 0
    };
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[75]++;
    room.join = Room_1.JoinMethod.RANDOM;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[76]++;
    room.found_letters = await this.crosswordService.createFoundLettersTemplate(crossword.id);
    // For time trials, start the game immediately
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[77]++;
    if (type === "time_trial") {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[14][0]++;
      cov_2e5g1etrdb().s[78]++;
      room.status = "playing";
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[79]++;
      room.last_activity_at = new Date();
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[14][1]++;
    }
    const savedRoom =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[80]++, await this.ormConnection.getRepository(Room_1.Room).save(room));
    // Ensure the creating player's sockets are subscribed to the room channel
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[81]++;
    fastify_1.fastify.io.in(`user_${player.id}`).socketsJoin(savedRoom.id.toString());
    const stats =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[82]++, await this.ensureGameStatsEntry(savedRoom, player));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[83]++;
    savedRoom.stats = [stats];
    // Only add timeout job for non-time trial games
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[84]++;
    if (type !== "time_trial") {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[15][0]++;
      cov_2e5g1etrdb().s[85]++;
      fastify_1.fastify.log.info(`Adding timeout job for room: ${savedRoom.id}`);
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[86]++;
      await queues_1.gameTimeoutQueue.add("game-timeout", {
        roomId: savedRoom.id
      }, {
        delay: config_1.config.game.timeout.pending,
        jobId: `game-timeout`
      });
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[87]++;
      fastify_1.fastify.log.info(`Added timeout job for room: ${savedRoom.id}`);
    } else {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[15][1]++;
      cov_2e5g1etrdb().s[88]++;
      // For time trials, start inactivity check immediately
      fastify_1.fastify.log.info(`Adding inactivity job for time trial room: ${savedRoom.id}`);
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[89]++;
      await queues_1.gameInactivityQueue.add("game-inactivity", {
        roomId: savedRoom.id,
        lastActivityTimestamp: room.last_activity_at.getTime()
      }, {
        jobId: `game-inactivity-${savedRoom.id}-${(0, uuid_1.v4)()}`,
        delay: config_1.config.game.timeout.inactivity.initial
      });
    }
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[90]++;
    return savedRoom;
  }
  async cancelRoom(roomId, requestingUserId) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[7]++;
    const room =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[91]++, await this.getRoomById(roomId));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[92]++;
    if (!room) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[16][0]++;
      cov_2e5g1etrdb().s[93]++;
      throw new api_1.NotFoundError("Room not found");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[16][1]++;
    }
    cov_2e5g1etrdb().s[94]++;
    if (room.status !== "pending") {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[17][0]++;
      cov_2e5g1etrdb().s[95]++;
      throw new api_1.BadRequestError("Only pending games can be cancelled");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[17][1]++;
    }
    cov_2e5g1etrdb().s[96]++;
    if (!["1v1", "free4all"].includes(room.type)) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[18][0]++;
      cov_2e5g1etrdb().s[97]++;
      throw new api_1.BadRequestError("Only 1v1 or free4all games can be cancelled while pending");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[18][1]++;
    }
    cov_2e5g1etrdb().s[98]++;
    if (requestingUserId !== undefined) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[19][0]++;
      const isParticipant =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[99]++, room.players.some(player => {
        /* istanbul ignore next */
        cov_2e5g1etrdb().f[8]++;
        cov_2e5g1etrdb().s[100]++;
        return player.id === requestingUserId;
      }));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[101]++;
      if (!isParticipant) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[20][0]++;
        cov_2e5g1etrdb().s[102]++;
        throw new api_1.ForbiddenError("You are not a participant in this game");
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[20][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[19][1]++;
    }
    cov_2e5g1etrdb().s[103]++;
    room.status = "cancelled";
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[104]++;
    room.markModified();
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[105]++;
    await this.ormConnection.getRepository(Room_1.Room).save(room);
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[106]++;
    return room;
  }
  async findEmptyRoomByDifficulty(difficulty, type, user) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[9]++;
    let userRoomIds =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[107]++, []);
    // First get all rooms this user is in
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[108]++;
    if (!user.roles.includes("admin")) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[21][0]++;
      const userRooms =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[109]++, await this.ormConnection.getRepository(Room_1.Room).createQueryBuilder("room").select("room.id").innerJoin("room.players", "players").where("players.id = :userId", {
        userId: user.id
      }).getMany());
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[110]++;
      userRoomIds = userRooms.map(room => {
        /* istanbul ignore next */
        cov_2e5g1etrdb().f[10]++;
        cov_2e5g1etrdb().s[111]++;
        return room.id;
      });
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[21][1]++;
    }
    cov_2e5g1etrdb().s[112]++;
    return this.ormConnection.getRepository(Room_1.Room).findOne({
      where: {
        difficulty,
        status: "pending",
        type,
        id: userRoomIds.length > 0 ?
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[22][0]++, (0, typeorm_1.Not)((0, typeorm_1.In)(userRoomIds))) :
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[22][1]++, undefined),
        players: (0, typeorm_1.LessThan)(config_1.config.game.maxPlayers[type])
      },
      order: {
        created_at: "ASC"
      }
    });
  }
  async getActiveRoomsForUser(userId) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[11]++;
    cov_2e5g1etrdb().s[113]++;
    return this.ormConnection.getRepository(Room_1.Room).createQueryBuilder("room").leftJoinAndSelect("room.players", "players").leftJoinAndSelect("room.crossword", "crossword").where("players.id = :userId", {
      userId
    }).andWhere("room.status = :status", {
      status: "playing"
    }).getMany();
  }
  async onGameEnd(room, forfeitedBy) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[12]++;
    cov_2e5g1etrdb().s[114]++;
    room.status = "finished";
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[115]++;
    room.completed_at = new Date();
    // If game was forfeited, adjust scores
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[116]++;
    if (forfeitedBy !== undefined) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[23][0]++;
      const minScore =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[117]++, Math.min(...Object.values(room.scores)) + config_1.config.game.points.forfeit);
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[118]++;
      room.scores[forfeitedBy] = minScore;
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[23][1]++;
    }
    // Find player with highest score
    const highestScore =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[119]++, Math.max(...Object.values(room.scores)));
    const winnerIds =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[120]++, Object.entries(room.scores).filter(([userId, score]) => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[13]++;
      cov_2e5g1etrdb().s[121]++;
      return score === highestScore;
    }).map(([userId]) => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[14]++;
      cov_2e5g1etrdb().s[122]++;
      return parseInt(userId);
    }));
    // Get all game stats for players in this room
    const gameStatsRepo =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[123]++, this.ormConnection.getRepository(GameStats_1.GameStats));
    const allGameStats =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[124]++, await gameStatsRepo.find({
      where: {
        roomId: room.id
      }
    }));
    const cachedGameInfo =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[125]++, await this.redisService.getGame(room.id.toString()));
    // Log for debugging
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[126]++;
    if (!cachedGameInfo) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[24][0]++;
      cov_2e5g1etrdb().s[127]++;
      fastify_1.fastify.log.warn(`No cached game info found for room ${room.id} during onGameEnd`);
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[24][1]++;
    }
    cov_2e5g1etrdb().s[128]++;
    console.log("cached game info", cachedGameInfo);
    // Update win streaks and winner from cached game
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[129]++;
    for (const player of room.players) {
      const playerStats =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[130]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[25][0]++, allGameStats.find(stat => {
        /* istanbul ignore next */
        cov_2e5g1etrdb().f[15]++;
        cov_2e5g1etrdb().s[131]++;
        return stat.userId === player.id;
      })) ||
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[25][1]++, await this.ensureGameStatsEntry(room, player)));
      const guessCounts =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[132]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[26][0]++, cachedGameInfo?.userGuessCounts?.[player.id]) ||
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[26][1]++, {
        correct: 0,
        incorrect: 0
      }));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[133]++;
      playerStats.correctGuesses = guessCounts.correct;
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[134]++;
      playerStats.incorrectGuesses = guessCounts.incorrect;
      const guessDetails =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[135]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[27][0]++, cachedGameInfo?.correctGuessDetails?.[player.id]) ||
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[27][1]++, []));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[136]++;
      playerStats.correctGuessDetails = guessDetails.map(detail => {
        /* istanbul ignore next */
        cov_2e5g1etrdb().f[16]++;
        cov_2e5g1etrdb().s[137]++;
        return {
          ...detail,
          timestamp: new Date(detail.timestamp)
        };
      });
      // If game was forfeited, non-forfeiting players are winners
      const isWinner =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[138]++, forfeitedBy !== undefined ?
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[28][0]++, playerStats.userId !== forfeitedBy) :
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[28][1]++, winnerIds.includes(playerStats.userId)));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[139]++;
      if (isWinner) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[29][0]++;
        // Get the player's stats from their last completed game
        const previousStats =
        /* istanbul ignore next */
        (cov_2e5g1etrdb().s[140]++, await gameStatsRepo.createQueryBuilder("stats").innerJoinAndSelect("stats.room", "room").where("stats.userId = :userId", {
          userId: playerStats.userId
        }).andWhere("stats.roomId != :roomId", {
          roomId: room.id
        }).andWhere("room.status = :status", {
          status: "finished"
        }).orderBy("stats.createdAt", "DESC").take(1).getOne());
        /* istanbul ignore next */
        cov_2e5g1etrdb().s[141]++;
        playerStats.isWinner = true;
        /* istanbul ignore next */
        cov_2e5g1etrdb().s[142]++;
        playerStats.winStreak = (
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[30][0]++, previousStats?.winStreak) ||
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[30][1]++, 0)) + 1;
      } else {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[29][1]++;
        cov_2e5g1etrdb().s[143]++;
        playerStats.isWinner = false;
        /* istanbul ignore next */
        cov_2e5g1etrdb().s[144]++;
        playerStats.winStreak = 0; // Reset win streak for losers
      }
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[145]++;
      console.log(`saving gameStats. user: ${playerStats.userId}`, playerStats);
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[146]++;
      await gameStatsRepo.save(playerStats);
    }
    // Update ELO ratings for all players
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[147]++;
    try {
      const newRatings =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[148]++, await this.eloService.updateEloRatings(room));
      // Emit rating changes to all players
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[149]++;
      for (const [playerId, newRating] of newRatings.entries()) {
        const oldRating =
        /* istanbul ignore next */
        (cov_2e5g1etrdb().s[150]++,
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[31][0]++, room.players.find(p => {
          /* istanbul ignore next */
          cov_2e5g1etrdb().f[17]++;
          cov_2e5g1etrdb().s[151]++;
          return p.id === playerId;
        })?.eloRating) ||
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[31][1]++, 0));
        const ratingChange =
        /* istanbul ignore next */
        (cov_2e5g1etrdb().s[152]++, newRating - oldRating);
        /* istanbul ignore next */
        cov_2e5g1etrdb().s[153]++;
        fastify_1.fastify.io.to(playerId.toString()).emit("rating_change", {
          oldRating,
          newRating,
          change: ratingChange
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[154]++;
      fastify_1.fastify.log.error({
        err: error
      }, "Failed to update ELO ratings");
    }
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[155]++;
    await this.ormConnection.getRepository(Room_1.Room).save(room);
    // If game was forfeited, emit forfeit event
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[156]++;
    if (forfeitedBy !== undefined) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[32][0]++;
      cov_2e5g1etrdb().s[157]++;
      fastify_1.fastify.io.to(room.id.toString()).emit("game_forfeited", {
        message: "A player has forfeited the game",
        forfeitedBy,
        room: room.toJSON()
      });
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[32][1]++;
    }
  }
  async forfeitGame(roomId, userId) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[18]++;
    const room =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[158]++, await this.getRoomById(roomId));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[159]++;
    fastify_1.fastify.log.info(`Forfeiting game with id: ${roomId} by user: ${userId}`);
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[160]++;
    if (!room) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[33][0]++;
      cov_2e5g1etrdb().s[161]++;
      throw new Error("Room not found");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[33][1]++;
    }
    cov_2e5g1etrdb().s[162]++;
    if (!room.players.some(player => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[19]++;
      cov_2e5g1etrdb().s[163]++;
      return player.id === userId;
    })) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[34][0]++;
      cov_2e5g1etrdb().s[164]++;
      throw new Error("User is not a participant in this room");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[34][1]++;
    }
    // Ensure game stats exist for all players before ending the game
    cov_2e5g1etrdb().s[165]++;
    for (const player of room.players) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[166]++;
      await this.ensureGameStatsEntry(room, player);
    }
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[167]++;
    room.markModified();
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[168]++;
    await this.onGameEnd(room, userId);
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[169]++;
    return room;
  }
  async getRoomsByUserAndStatus(userId, status) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[20]++;
    const query =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[170]++, this.ormConnection.getRepository(Room_1.Room).createQueryBuilder("room").leftJoinAndSelect("room.players", "players").leftJoinAndSelect("room.crossword", "crossword").where("players.id = :userId", {
      userId
    }));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[171]++;
    if (status) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[35][0]++;
      cov_2e5g1etrdb().s[172]++;
      query.andWhere("room.status = :status", {
        status
      });
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[35][1]++;
    }
    cov_2e5g1etrdb().s[173]++;
    return query.getMany();
  }
  isGameFinished(room) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[21]++;
    cov_2e5g1etrdb().s[174]++;
    // If room is not in playing state, it can't be won
    if (room.status !== "playing") {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[36][0]++;
      cov_2e5g1etrdb().s[175]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[36][1]++;
    }
    // Check if all letters have been found
    // found_letters is a string array where '*' represents unfound letters
    cov_2e5g1etrdb().s[176]++;
    return !room.found_letters.includes("*");
  }
  async handleGuess(roomId, userId, x, y, guess, entityManager) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[22]++;
    const manager =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[177]++,
    /* istanbul ignore next */
    (cov_2e5g1etrdb().b[37][0]++, entityManager) ||
    /* istanbul ignore next */
    (cov_2e5g1etrdb().b[37][1]++, this.ormConnection.manager));
    // Load room (players and crossword are eager on the entity)
    let room =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[178]++, await manager.getRepository(Room_1.Room).findOne({
      where: {
        id: roomId
      }
    }));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[179]++;
    if (!room) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[38][0]++;
      cov_2e5g1etrdb().s[180]++;
      throw new api_1.NotFoundError("Room not found");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[38][1]++;
    }
    // Load or initialize game cache
    let cachedGameInfo =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[181]++, await this.redisService.getGame(room.id.toString()));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[182]++;
    if (!cachedGameInfo) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[39][0]++;
      cov_2e5g1etrdb().s[183]++;
      // Initialize cache from the current DB state
      cachedGameInfo = room.createRoomCache();
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[39][1]++;
    }
    // Ensure user tracking structures exist
    cov_2e5g1etrdb().s[184]++;
    if (!cachedGameInfo.userGuessCounts[userId]) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[40][0]++;
      cov_2e5g1etrdb().s[185]++;
      cachedGameInfo.userGuessCounts[userId] = {
        correct: 0,
        incorrect: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[40][1]++;
    }
    cov_2e5g1etrdb().s[186]++;
    if (!cachedGameInfo.correctGuessDetails) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[41][0]++;
      cov_2e5g1etrdb().s[187]++;
      cachedGameInfo.correctGuessDetails = {};
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[41][1]++;
    }
    cov_2e5g1etrdb().s[188]++;
    if (!cachedGameInfo.correctGuessDetails[userId]) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[42][0]++;
      cov_2e5g1etrdb().s[189]++;
      cachedGameInfo.correctGuessDetails[userId] = [];
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[42][1]++;
    }
    cov_2e5g1etrdb().s[190]++;
    if (cachedGameInfo.scores[userId] === undefined) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[43][0]++;
      cov_2e5g1etrdb().s[191]++;
      cachedGameInfo.scores[userId] = 0;
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[43][1]++;
    }
    // Compute letter index
    const letterIndex =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[192]++, x * room.crossword.col_size + y);
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[193]++;
    if (cachedGameInfo.foundLetters[letterIndex] !== "*") {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[44][0]++;
      cov_2e5g1etrdb().s[194]++;
      return room;
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[44][1]++;
    }
    const isCorrect =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[195]++, await this.crosswordService.checkGuess(room.crossword, {
      x,
      y
    }, guess));
    // Update stats based on guess result
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[196]++;
    if (isCorrect) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[45][0]++;
      cov_2e5g1etrdb().s[197]++;
      // Update last activity timestamp
      cachedGameInfo.lastActivityAt = Date.now();
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[198]++;
      cachedGameInfo.userGuessCounts[userId].correct++;
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[199]++;
      cachedGameInfo.correctGuessDetails[userId].push({
        row: x,
        col: y,
        letter: guess,
        timestamp: Date.now()
      });
      // Update board + score
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[200]++;
      cachedGameInfo.foundLetters[letterIndex] = guess;
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[201]++;
      cachedGameInfo.scores[userId] = (
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[46][0]++, cachedGameInfo.scores[userId]) ||
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[46][1]++, 0)) + config_1.config.game.points.correct;
    } else {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[45][1]++;
      cov_2e5g1etrdb().s[202]++;
      cachedGameInfo.userGuessCounts[userId].incorrect++;
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[203]++;
      cachedGameInfo.scores[userId] = (
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[47][0]++, cachedGameInfo.scores[userId]) ||
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[47][1]++, 0)) + config_1.config.game.points.incorrect;
    }
    // Persist authoritative state to DB to avoid cache reinitialization wiping progress
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[204]++;
    room.found_letters = cachedGameInfo.foundLetters;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[205]++;
    room.scores = cachedGameInfo.scores;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[206]++;
    if (cachedGameInfo.lastActivityAt) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[48][0]++;
      cov_2e5g1etrdb().s[207]++;
      room.last_activity_at = new Date(cachedGameInfo.lastActivityAt);
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[48][1]++;
    }
    // Determine if the game is finished based on the updated state
    const finished =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[208]++, !cachedGameInfo.foundLetters.includes("*"));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[209]++;
    if (finished) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[49][0]++;
      cov_2e5g1etrdb().s[210]++;
      // Mark modified so toJSON invalidates cache
      room.markModified();
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[211]++;
      await this.onGameEnd(room);
    } else {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[49][1]++;
      cov_2e5g1etrdb().s[212]++;
      // Save room if game is not finished
      await manager.getRepository(Room_1.Room).save(room);
    }
    // Update cache after DB write
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[213]++;
    await this.redisService.cacheGame(room.id.toString(), cachedGameInfo);
    // Invalidate view cache so clients receive updated view
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[214]++;
    room.markModified();
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[215]++;
    return room;
  }
  addCacheToRoom(room, cachedGameInfo) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[23]++;
    cov_2e5g1etrdb().s[216]++;
    room.found_letters = cachedGameInfo.foundLetters;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[217]++;
    room.scores = cachedGameInfo.scores;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[218]++;
    return room;
  }
  async getRecentGamesWithStats(userId, limit =
  /* istanbul ignore next */
  (cov_2e5g1etrdb().b[50][0]++, 10), startDate, endDate) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[24]++;
    const query =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[219]++, this.ormConnection.getRepository(GameStats_1.GameStats).createQueryBuilder("stats").leftJoinAndSelect("stats.room", "room").leftJoinAndSelect("room.crossword", "crossword").where("stats.userId = :userId", {
      userId
    }).andWhere("room.status = :status", {
      status: "finished"
    }).orderBy("stats.createdAt", "DESC"));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[220]++;
    if (startDate) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[51][0]++;
      cov_2e5g1etrdb().s[221]++;
      query.andWhere("stats.createdAt >= :startDate", {
        startDate
      });
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[51][1]++;
    }
    cov_2e5g1etrdb().s[222]++;
    if (endDate) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[52][0]++;
      cov_2e5g1etrdb().s[223]++;
      query.andWhere("stats.createdAt <= :endDate", {
        endDate
      });
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[52][1]++;
    }
    cov_2e5g1etrdb().s[224]++;
    if (limit > 0) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[53][0]++;
      cov_2e5g1etrdb().s[225]++;
      query.take(limit);
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[53][1]++;
    }
    const gameStats =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[226]++, await query.getMany());
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[227]++;
    return gameStats.map(stats => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[25]++;
      cov_2e5g1etrdb().s[228]++;
      return {
        room: {
          id: stats.room.id,
          difficulty: stats.room.difficulty,
          type: stats.room.type,
          status: stats.room.status,
          created_at: stats.room.created_at.toISOString(),
          completed_at: stats.room.completed_at ?
          /* istanbul ignore next */
          (cov_2e5g1etrdb().b[54][0]++, stats.room.completed_at.toISOString()) :
          /* istanbul ignore next */
          (cov_2e5g1etrdb().b[54][1]++, null),
          scores: stats.room.scores
        },
        stats: {
          correctGuesses: stats.correctGuesses,
          incorrectGuesses: stats.incorrectGuesses,
          isWinner: stats.isWinner,
          eloAtGame: stats.eloAtGame
        }
      };
    });
  }
  async createChallengeRoom(challengerId, challengedId, difficulty, context) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[26]++;
    const [challenger, challenged] =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[229]++, await Promise.all([this.ormConnection.getRepository(User_1.User).findOneBy({
      id: challengerId
    }), this.ormConnection.getRepository(User_1.User).findOneBy({
      id: challengedId
    })]));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[230]++;
    if (
    /* istanbul ignore next */
    (cov_2e5g1etrdb().b[56][0]++, !challenger) ||
    /* istanbul ignore next */
    (cov_2e5g1etrdb().b[56][1]++, !challenged)) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[55][0]++;
      cov_2e5g1etrdb().s[231]++;
      throw new api_1.NotFoundError("User not found");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[55][1]++;
    }
    const crossword =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[232]++, await this.crosswordService.getCrosswordByDifficulty(difficulty));
    const room =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[233]++, new Room_1.Room());
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[234]++;
    room.players = [challenger, challenged];
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[235]++;
    room.crossword = crossword;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[236]++;
    room.difficulty = difficulty;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[237]++;
    room.type = "1v1";
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[238]++;
    room.status = "pending";
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[239]++;
    room.scores = {
      [challenger.id]: 0,
      [challenged.id]: 0
    };
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[240]++;
    room.join = Room_1.JoinMethod.CHALLENGE;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[241]++;
    room.found_letters = await this.crosswordService.createFoundLettersTemplate(crossword.id);
    const savedRoom =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[242]++, await this.ormConnection.getRepository(Room_1.Room).save(room));
    // Emit a challenge event through socket.io
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[243]++;
    fastify_1.fastify.io.to(`user_${challenged.id.toString()}`).emit("challenge_received", {
      room: savedRoom.toJSON(),
      challenger: {
        id: challenger.id,
        username: challenger.username
      },
      context
    });
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[244]++;
    return savedRoom;
  }
  async acceptChallenge(roomId, userId) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[27]++;
    const room =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[245]++, await this.getRoomById(roomId));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[246]++;
    if (!room) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[57][0]++;
      cov_2e5g1etrdb().s[247]++;
      throw new api_1.NotFoundError("Room not found");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[57][1]++;
    }
    cov_2e5g1etrdb().s[248]++;
    await this.joinExistingRoom(room, userId);
    // Emit game_started event with navigation for both players
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[249]++;
    fastify_1.fastify.io.to(room.id.toString()).emit("game_started", {
      message: "Challenge accepted! Game is starting.",
      room: room.toJSON(),
      navigate: {
        screen: "game",
        params: {
          roomId: room.id
        }
      }
    });
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[250]++;
    return room;
  }
  async rejectChallenge(roomId) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[28]++;
    const room =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[251]++, await this.getRoomById(roomId));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[252]++;
    if (!room) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[58][0]++;
      cov_2e5g1etrdb().s[253]++;
      throw new api_1.NotFoundError("Room not found");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[58][1]++;
    }
    cov_2e5g1etrdb().s[254]++;
    room.status = "cancelled";
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[255]++;
    room.markModified();
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[256]++;
    await this.ormConnection.getRepository(Room_1.Room).save(room);
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[257]++;
    return room;
  }
  async getPendingChallenges(userId) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[29]++;
    const query =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[258]++, this.ormConnection.getRepository(Room_1.Room).createQueryBuilder("room").innerJoinAndSelect("room.players", "players").leftJoinAndSelect("room.crossword", "crossword").where("room.status = :status", {
      status: "pending"
    }).andWhere("room.type = :type", {
      type: "1v1"
    }).andWhere(qb => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[30]++;
      const subQuery =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[259]++, qb.subQuery().select("rp.room_id").from("room_players", "rp").where("rp.user_id = :userId").getQuery());
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[260]++;
      return "room.id IN " + subQuery;
    }).setParameters({
      status: "pending",
      type: "1v1",
      userId
    }));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[261]++;
    return query.getMany();
  }
  async getTimeTrialLeaderboard(roomId, limit =
  /* istanbul ignore next */
  (cov_2e5g1etrdb().b[59][0]++, 10)) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[31]++;
    const room =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[262]++, await this.getRoomById(roomId));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[263]++;
    if (!room) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[60][0]++;
      cov_2e5g1etrdb().s[264]++;
      throw new api_1.NotFoundError("Room not found");
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[60][1]++;
    }
    const crosswordId =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[265]++, room.crossword.id);
    const currentPlayerId =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[266]++,
    /* istanbul ignore next */
    (cov_2e5g1etrdb().b[62][0]++, room.players) &&
    /* istanbul ignore next */
    (cov_2e5g1etrdb().b[62][1]++, room.players.length > 0) ?
    /* istanbul ignore next */
    (cov_2e5g1etrdb().b[61][0]++, room.players[0].id) :
    /* istanbul ignore next */
    (cov_2e5g1etrdb().b[61][1]++, null));
    // Fetch finished time-trial games on the same crossword
    const rooms =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[267]++, await this.ormConnection.getRepository(Room_1.Room).find({
      where: {
        type: "time_trial",
        status: "finished",
        crossword: {
          id: crosswordId
        }
      },
      order: {
        completed_at: "DESC"
      }
    }));
    // Build leaderboard entries
    const entries =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[268]++, rooms.map(r => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[32]++;
      const scoresObj =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[269]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[63][0]++, r.scores) ||
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[63][1]++, {}));
      const scoreValues =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[270]++, Object.values(scoresObj));
      const score =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[271]++, scoreValues.length > 0 ?
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[64][0]++, Math.max(...scoreValues)) :
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[64][1]++, 0));
      const player =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[272]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[66][0]++, r.players) &&
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[66][1]++, r.players.length > 0) ?
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[65][0]++, r.players[0]) :
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[65][1]++, null));
      const timeTakenMs =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[273]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[68][0]++, r.completed_at) &&
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[68][1]++, r.created_at) ?
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[67][0]++, r.completed_at.getTime() - r.created_at.getTime()) :
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[67][1]++, null));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[274]++;
      return {
        roomId: r.id,
        user: player ?
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[69][0]++, {
          id: player.id,
          username: player.username,
          eloRating: player.eloRating
        }) :
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[69][1]++, null),
        score,
        created_at: r.created_at,
        completed_at: r.completed_at,
        timeTakenMs
      };
    }));
    // Sort by score (desc), then by time taken (asc if available)
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[275]++;
    entries.sort((a, b) => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[33]++;
      cov_2e5g1etrdb().s[276]++;
      if (b.score !== a.score) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[70][0]++;
        cov_2e5g1etrdb().s[277]++;
        return b.score - a.score;
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[70][1]++;
      }
      const ta =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[278]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[71][0]++, a.timeTakenMs) ??
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[71][1]++, Number.MAX_SAFE_INTEGER));
      const tb =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[279]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[72][0]++, b.timeTakenMs) ??
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[72][1]++, Number.MAX_SAFE_INTEGER));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[280]++;
      return ta - tb;
    });
    // Add ranks to all entries
    const rankedEntries =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[281]++, entries.map((e, idx) => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[34]++;
      cov_2e5g1etrdb().s[282]++;
      return {
        rank: idx + 1,
        roomId: e.roomId,
        score: e.score,
        user: e.user,
        created_at: e.created_at.toISOString(),
        completed_at: e.completed_at ?
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[73][0]++, e.completed_at.toISOString()) :
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[73][1]++, null),
        timeTakenMs: e.timeTakenMs
      };
    }));
    // Get top N entries
    const topEntries =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[283]++, rankedEntries.slice(0, limit));
    // Find current player's entry if not in top N
    let currentPlayerEntry;
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[284]++;
    if (currentPlayerId) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().b[74][0]++;
      const currentEntry =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[285]++, rankedEntries.find(e => {
        /* istanbul ignore next */
        cov_2e5g1etrdb().f[35]++;
        cov_2e5g1etrdb().s[286]++;
        return e.roomId === roomId;
      }));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[287]++;
      if (
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[76][0]++, currentEntry) &&
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[76][1]++, currentEntry.rank > limit)) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[75][0]++;
        cov_2e5g1etrdb().s[288]++;
        currentPlayerEntry = currentEntry;
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[75][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2e5g1etrdb().b[74][1]++;
    }
    cov_2e5g1etrdb().s[289]++;
    return {
      topEntries,
      currentPlayerEntry
    };
  }
  async getGlobalTimeTrialLeaderboard(limit =
  /* istanbul ignore next */
  (cov_2e5g1etrdb().b[77][0]++, 10)) {
    /* istanbul ignore next */
    cov_2e5g1etrdb().f[36]++;
    const roomRepository =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[290]++, this.ormConnection.getRepository(Room_1.Room));
    const rooms =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[291]++, await roomRepository.find({
      where: {
        type: "time_trial",
        status: "finished"
      },
      order: {
        completed_at: "DESC"
      }
    }));
    const entries =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[292]++, rooms.map(room => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[37]++;
      const scoresObj =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[293]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[78][0]++, room.scores) ||
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[78][1]++, {}));
      const scoreValues =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[294]++, Object.values(scoresObj));
      const score =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[295]++, scoreValues.length > 0 ?
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[79][0]++, Math.max(...scoreValues)) :
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[79][1]++, 0));
      const player =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[296]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[81][0]++, room.players) &&
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[81][1]++, room.players.length > 0) ?
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[80][0]++, room.players[0]) :
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[80][1]++, null));
      const timeTakenMs =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[297]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[83][0]++, room.completed_at) &&
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[83][1]++, room.created_at) ?
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[82][0]++, room.completed_at.getTime() - room.created_at.getTime()) :
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[82][1]++, null));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[298]++;
      return {
        roomId: room.id,
        user: player ?
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[84][0]++, {
          id: player.id,
          username: player.username,
          eloRating: player.eloRating
        }) :
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[84][1]++, null),
        score,
        created_at: room.created_at,
        completed_at: room.completed_at,
        timeTakenMs
      };
    }));
    const bestByUser =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[299]++, new Map());
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[300]++;
    for (const entry of entries) {
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[301]++;
      if (!entry.user) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[85][0]++;
        cov_2e5g1etrdb().s[302]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[85][1]++;
      }
      const existing =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[303]++, bestByUser.get(entry.user.id));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[304]++;
      if (!existing) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[86][0]++;
        cov_2e5g1etrdb().s[305]++;
        bestByUser.set(entry.user.id, entry);
        /* istanbul ignore next */
        cov_2e5g1etrdb().s[306]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[86][1]++;
      }
      cov_2e5g1etrdb().s[307]++;
      if (entry.score > existing.score) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[87][0]++;
        cov_2e5g1etrdb().s[308]++;
        bestByUser.set(entry.user.id, entry);
        /* istanbul ignore next */
        cov_2e5g1etrdb().s[309]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[87][1]++;
      }
      cov_2e5g1etrdb().s[310]++;
      if (
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[89][0]++, entry.score === existing.score) &&
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[89][1]++, (
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[90][0]++, entry.timeTakenMs) ??
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[90][1]++, Number.MAX_SAFE_INTEGER)) < (
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[91][0]++, existing.timeTakenMs) ??
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[91][1]++, Number.MAX_SAFE_INTEGER)))) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[88][0]++;
        cov_2e5g1etrdb().s[311]++;
        bestByUser.set(entry.user.id, entry);
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[88][1]++;
      }
    }
    const rankedEntries =
    /* istanbul ignore next */
    (cov_2e5g1etrdb().s[312]++, Array.from(bestByUser.values()).sort((a, b) => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[38]++;
      cov_2e5g1etrdb().s[313]++;
      if (b.score !== a.score) {
        /* istanbul ignore next */
        cov_2e5g1etrdb().b[92][0]++;
        cov_2e5g1etrdb().s[314]++;
        return b.score - a.score;
      } else
      /* istanbul ignore next */
      {
        cov_2e5g1etrdb().b[92][1]++;
      }
      const aTime =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[315]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[93][0]++, a.timeTakenMs) ??
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[93][1]++, Number.MAX_SAFE_INTEGER));
      const bTime =
      /* istanbul ignore next */
      (cov_2e5g1etrdb().s[316]++,
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[94][0]++, b.timeTakenMs) ??
      /* istanbul ignore next */
      (cov_2e5g1etrdb().b[94][1]++, Number.MAX_SAFE_INTEGER));
      /* istanbul ignore next */
      cov_2e5g1etrdb().s[317]++;
      return aTime - bTime;
    }).slice(0, limit).map((entry, index) => {
      /* istanbul ignore next */
      cov_2e5g1etrdb().f[39]++;
      cov_2e5g1etrdb().s[318]++;
      return {
        rank: index + 1,
        roomId: entry.roomId,
        score: entry.score,
        user: entry.user,
        created_at: entry.created_at.toISOString(),
        completed_at: entry.completed_at ?
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[95][0]++, entry.completed_at.toISOString()) :
        /* istanbul ignore next */
        (cov_2e5g1etrdb().b[95][1]++, null),
        timeTakenMs: entry.timeTakenMs
      };
    }));
    /* istanbul ignore next */
    cov_2e5g1etrdb().s[319]++;
    return rankedEntries;
  }
}
/* istanbul ignore next */
cov_2e5g1etrdb().s[320]++;
exports.RoomService = RoomService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
