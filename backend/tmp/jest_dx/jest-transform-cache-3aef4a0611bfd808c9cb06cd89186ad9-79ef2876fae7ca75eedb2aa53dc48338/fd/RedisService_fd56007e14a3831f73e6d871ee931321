c80b3ae8c5f18b5cf5b5f42b878320b4
"use strict";

/* istanbul ignore next */
function cov_2qgm3e2w4i() {
  var path = "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/RedisService.ts";
  var hash = "9b0b02d2357f133cc5b75f0fb65931bd81cf1a44";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/RedisService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 53
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 30
        }
      },
      "7": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 41
        }
      },
      "8": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 78
        }
      },
      "9": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 79
        }
      },
      "10": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 74
        }
      },
      "11": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 96
        }
      },
      "13": {
        start: {
          line: 31,
          column: 21
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 46
        }
      },
      "15": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 80
        }
      },
      "16": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 65
        }
      },
      "17": {
        start: {
          line: 44,
          column: 25
        },
        end: {
          line: 44,
          column: 81
        }
      },
      "18": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 42
        }
      },
      "19": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 72
        }
      },
      "20": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 55
        }
      },
      "21": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 43
        }
      },
      "22": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 48
        }
      },
      "23": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 45
        }
      },
      "24": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 36
        }
      },
      "25": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 37
        }
      },
      "26": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 32
        }
      },
      "27": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 36
        }
      },
      "28": {
        start: {
          line: 73,
          column: 0
        },
        end: {
          line: 73,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 18
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 34
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 30
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 37
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 35
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 39
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 37
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 43
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 32
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 48
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 36
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 52
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 33
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 56
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 25
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 61
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 18
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 65
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 45
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 22
          },
          end: {
            line: 32,
            column: 38
          }
        }, {
          start: {
            line: 32,
            column: 41
          },
          end: {
            line: 32,
            column: 45
          }
        }],
        line: 32
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/RedisService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/RedisService.ts"],
      sourcesContent: ["import Redis from \"ioredis\";\nimport { config } from \"../config/config\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport type CachedGameInfo = {\n  lastActivityAt: number;\n  foundLetters: string[];\n  scores: {\n    [key: string]: number;\n  };\n  userGuessCounts: {\n    [key: string]: {\n      correct: number;\n      incorrect: number;\n    };\n  };\n  correctGuessDetails: {\n    [key: string]: {\n      row: number;\n      col: number;\n      letter: string;\n      timestamp: number;\n    }[];\n  };\n};\n\nexport class RedisService {\n  private redis: Redis;\n  private publisher: Redis;\n  private subscriber: Redis;\n  private serverId: string;\n\n  constructor() {\n    // Generate a unique ID for this server instance\n    this.serverId = uuidv4();\n\n    // Create separate connections for pub/sub\n    this.publisher = new Redis(config.redis.default);\n    this.subscriber = new Redis(config.redis.default);\n    this.redis = new Redis(config.redis.default);\n  }\n\n  // Get the server ID\n  getServerId(): string {\n    return this.serverId;\n  }\n\n  async cacheGame(gameId: string, game: CachedGameInfo): Promise<void> {\n    await this.redis.set(\n      gameId,\n      JSON.stringify(game),\n      \"EX\",\n      config.redis.gameTTL,\n    );\n  }\n\n  async getGame(gameId: string): Promise<CachedGameInfo | null> {\n    const game = await this.redis.get(gameId);\n    return game ? JSON.parse(game) : null;\n  }\n\n  // Register a user's socket connection with this server\n  async registerUserSocket(userId: number) {\n    await this.redis.hset(\"user_servers\", userId.toString(), this.serverId);\n  }\n\n  // Unregister a user's socket connection\n  async unregisterUserSocket(userId: number) {\n    await this.redis.hdel(\"user_servers\", userId.toString());\n  }\n\n  // Check if a user is connected to this server\n  async isUserOnThisServer(userId: number): Promise<boolean> {\n    const serverId = await this.redis.hget(\n      \"user_servers\",\n      userId.toString(),\n    );\n    return serverId === this.serverId;\n  }\n\n  // Get the server ID for a user\n  async getUserServer(userId: number): Promise<string | null> {\n    return await this.redis.hget(\"user_servers\", userId.toString());\n  }\n\n  // Publish a message to a channel\n  async publish(channel: string, message: string) {\n    await this.publisher.publish(channel, message);\n  }\n\n  // Subscribe to a channel\n  subscribe(\n    channel: string,\n    callback: (channel: string, message: string) => void,\n  ) {\n    this.subscriber.subscribe(channel);\n    this.subscriber.on(\"message\", callback);\n  }\n\n  // Unsubscribe from a channel\n  unsubscribe(channel: string) {\n    this.subscriber.unsubscribe(channel);\n  }\n\n  // Close connections\n  async close() {\n    await this.publisher.quit();\n    await this.subscriber.quit();\n    await this.redis.quit();\n  }\n}\n\n// Create singleton instance\nexport const redisService = new RedisService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9b0b02d2357f133cc5b75f0fb65931bd81cf1a44"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qgm3e2w4i = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qgm3e2w4i();
var __importDefault =
/* istanbul ignore next */
(cov_2qgm3e2w4i().s[0]++,
/* istanbul ignore next */
(cov_2qgm3e2w4i().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2qgm3e2w4i().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2qgm3e2w4i().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2qgm3e2w4i().f[0]++;
  cov_2qgm3e2w4i().s[1]++;
  return /* istanbul ignore next */(cov_2qgm3e2w4i().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2qgm3e2w4i().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2qgm3e2w4i().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2qgm3e2w4i().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2qgm3e2w4i().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2qgm3e2w4i().s[3]++;
exports.redisService = exports.RedisService = void 0;
const ioredis_1 =
/* istanbul ignore next */
(cov_2qgm3e2w4i().s[4]++, __importDefault(require("ioredis")));
const config_1 =
/* istanbul ignore next */
(cov_2qgm3e2w4i().s[5]++, require("../config/config"));
const uuid_1 =
/* istanbul ignore next */
(cov_2qgm3e2w4i().s[6]++, require("uuid"));
class RedisService {
  redis;
  publisher;
  subscriber;
  serverId;
  constructor() {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[1]++;
    cov_2qgm3e2w4i().s[7]++;
    // Generate a unique ID for this server instance
    this.serverId = (0, uuid_1.v4)();
    // Create separate connections for pub/sub
    /* istanbul ignore next */
    cov_2qgm3e2w4i().s[8]++;
    this.publisher = new ioredis_1.default(config_1.config.redis.default);
    /* istanbul ignore next */
    cov_2qgm3e2w4i().s[9]++;
    this.subscriber = new ioredis_1.default(config_1.config.redis.default);
    /* istanbul ignore next */
    cov_2qgm3e2w4i().s[10]++;
    this.redis = new ioredis_1.default(config_1.config.redis.default);
  }
  // Get the server ID
  getServerId() {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[2]++;
    cov_2qgm3e2w4i().s[11]++;
    return this.serverId;
  }
  async cacheGame(gameId, game) {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[3]++;
    cov_2qgm3e2w4i().s[12]++;
    await this.redis.set(gameId, JSON.stringify(game), "EX", config_1.config.redis.gameTTL);
  }
  async getGame(gameId) {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[4]++;
    const game =
    /* istanbul ignore next */
    (cov_2qgm3e2w4i().s[13]++, await this.redis.get(gameId));
    /* istanbul ignore next */
    cov_2qgm3e2w4i().s[14]++;
    return game ?
    /* istanbul ignore next */
    (cov_2qgm3e2w4i().b[3][0]++, JSON.parse(game)) :
    /* istanbul ignore next */
    (cov_2qgm3e2w4i().b[3][1]++, null);
  }
  // Register a user's socket connection with this server
  async registerUserSocket(userId) {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[5]++;
    cov_2qgm3e2w4i().s[15]++;
    await this.redis.hset("user_servers", userId.toString(), this.serverId);
  }
  // Unregister a user's socket connection
  async unregisterUserSocket(userId) {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[6]++;
    cov_2qgm3e2w4i().s[16]++;
    await this.redis.hdel("user_servers", userId.toString());
  }
  // Check if a user is connected to this server
  async isUserOnThisServer(userId) {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[7]++;
    const serverId =
    /* istanbul ignore next */
    (cov_2qgm3e2w4i().s[17]++, await this.redis.hget("user_servers", userId.toString()));
    /* istanbul ignore next */
    cov_2qgm3e2w4i().s[18]++;
    return serverId === this.serverId;
  }
  // Get the server ID for a user
  async getUserServer(userId) {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[8]++;
    cov_2qgm3e2w4i().s[19]++;
    return await this.redis.hget("user_servers", userId.toString());
  }
  // Publish a message to a channel
  async publish(channel, message) {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[9]++;
    cov_2qgm3e2w4i().s[20]++;
    await this.publisher.publish(channel, message);
  }
  // Subscribe to a channel
  subscribe(channel, callback) {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[10]++;
    cov_2qgm3e2w4i().s[21]++;
    this.subscriber.subscribe(channel);
    /* istanbul ignore next */
    cov_2qgm3e2w4i().s[22]++;
    this.subscriber.on("message", callback);
  }
  // Unsubscribe from a channel
  unsubscribe(channel) {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[11]++;
    cov_2qgm3e2w4i().s[23]++;
    this.subscriber.unsubscribe(channel);
  }
  // Close connections
  async close() {
    /* istanbul ignore next */
    cov_2qgm3e2w4i().f[12]++;
    cov_2qgm3e2w4i().s[24]++;
    await this.publisher.quit();
    /* istanbul ignore next */
    cov_2qgm3e2w4i().s[25]++;
    await this.subscriber.quit();
    /* istanbul ignore next */
    cov_2qgm3e2w4i().s[26]++;
    await this.redis.quit();
  }
}
/* istanbul ignore next */
cov_2qgm3e2w4i().s[27]++;
exports.RedisService = RedisService;
// Create singleton instance
/* istanbul ignore next */
cov_2qgm3e2w4i().s[28]++;
exports.redisService = new RedisService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
