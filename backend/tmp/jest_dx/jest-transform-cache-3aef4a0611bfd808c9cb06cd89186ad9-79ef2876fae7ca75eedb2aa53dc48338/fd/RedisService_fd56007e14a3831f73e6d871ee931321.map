{"version":3,"names":["cov_2qgm3e2w4i","actualCoverage","ioredis_1","s","__importDefault","require","config_1","uuid_1","RedisService","redis","publisher","subscriber","serverId","constructor","f","v4","default","config","getServerId","cacheGame","gameId","game","set","JSON","stringify","gameTTL","getGame","get","b","parse","registerUserSocket","userId","hset","toString","unregisterUserSocket","hdel","isUserOnThisServer","hget","getUserServer","publish","channel","message","subscribe","callback","on","unsubscribe","close","quit","exports","redisService"],"sources":["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/RedisService.ts"],"sourcesContent":["import Redis from \"ioredis\";\nimport { config } from \"../config/config\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport type CachedGameInfo = {\n  lastActivityAt: number;\n  foundLetters: string[];\n  scores: {\n    [key: string]: number;\n  };\n  userGuessCounts: {\n    [key: string]: {\n      correct: number;\n      incorrect: number;\n    };\n  };\n  correctGuessDetails: {\n    [key: string]: {\n      row: number;\n      col: number;\n      letter: string;\n      timestamp: number;\n    }[];\n  };\n};\n\nexport class RedisService {\n  private redis: Redis;\n  private publisher: Redis;\n  private subscriber: Redis;\n  private serverId: string;\n\n  constructor() {\n    // Generate a unique ID for this server instance\n    this.serverId = uuidv4();\n\n    // Create separate connections for pub/sub\n    this.publisher = new Redis(config.redis.default);\n    this.subscriber = new Redis(config.redis.default);\n    this.redis = new Redis(config.redis.default);\n  }\n\n  // Get the server ID\n  getServerId(): string {\n    return this.serverId;\n  }\n\n  async cacheGame(gameId: string, game: CachedGameInfo): Promise<void> {\n    await this.redis.set(\n      gameId,\n      JSON.stringify(game),\n      \"EX\",\n      config.redis.gameTTL,\n    );\n  }\n\n  async getGame(gameId: string): Promise<CachedGameInfo | null> {\n    const game = await this.redis.get(gameId);\n    return game ? JSON.parse(game) : null;\n  }\n\n  // Register a user's socket connection with this server\n  async registerUserSocket(userId: number) {\n    await this.redis.hset(\"user_servers\", userId.toString(), this.serverId);\n  }\n\n  // Unregister a user's socket connection\n  async unregisterUserSocket(userId: number) {\n    await this.redis.hdel(\"user_servers\", userId.toString());\n  }\n\n  // Check if a user is connected to this server\n  async isUserOnThisServer(userId: number): Promise<boolean> {\n    const serverId = await this.redis.hget(\n      \"user_servers\",\n      userId.toString(),\n    );\n    return serverId === this.serverId;\n  }\n\n  // Get the server ID for a user\n  async getUserServer(userId: number): Promise<string | null> {\n    return await this.redis.hget(\"user_servers\", userId.toString());\n  }\n\n  // Publish a message to a channel\n  async publish(channel: string, message: string) {\n    await this.publisher.publish(channel, message);\n  }\n\n  // Subscribe to a channel\n  subscribe(\n    channel: string,\n    callback: (channel: string, message: string) => void,\n  ) {\n    this.subscriber.subscribe(channel);\n    this.subscriber.on(\"message\", callback);\n  }\n\n  // Unsubscribe from a channel\n  unsubscribe(channel: string) {\n    this.subscriber.unsubscribe(channel);\n  }\n\n  // Close connections\n  async close() {\n    await this.publisher.quit();\n    await this.subscriber.quit();\n    await this.redis.quit();\n  }\n}\n\n// Create singleton instance\nexport const redisService = new RedisService();\n"],"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","ignoreList":[]}
