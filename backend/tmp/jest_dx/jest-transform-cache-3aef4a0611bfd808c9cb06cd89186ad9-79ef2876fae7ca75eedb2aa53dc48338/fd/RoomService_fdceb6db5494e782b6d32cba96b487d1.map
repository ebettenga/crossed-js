{"version":3,"names":["cov_2e5g1etrdb","actualCoverage","s","typeorm_1","require","Room_1","User_1","CrosswordService_1","EloService_1","config_1","fastify_1","GameStats_1","api_1","queues_1","uuid_1","RedisService_1","RoomService","crosswordService","eloService","ormConnection","redisService","constructor","f","CrosswordService","EloService","getRepository","User","Room","GameStats","RedisService","ensureGameStatsEntry","room","user","gameStatsRepo","stats","findOne","where","roomId","id","userId","b","create","eloAtGame","eloRating","correctGuesses","incorrectGuesses","correctGuessDetails","isWinner","winStreak","save","getRoomById","results","cachedGameInfo","getGame","toString","found_letters","foundLetters","scores","getRoomsByUserId","find","players","joinRoom","difficulty","type","createRoom","findEmptyRoomByDifficulty","fastify","log","info","joinExistingRoom","player","findOneBy","Error","push","markModified","io","in","socketsJoin","userGuessCounts","correct","incorrect","cacheGame","maxPlayers","config","game","length","status","gameTimeoutQueue","remove","gameInactivityQueue","add","lastActivityTimestamp","Date","getTime","jobId","v4","delay","timeout","inactivity","initial","to","emit","message","toJSON","navigate","screen","params","crossword","getCrosswordByDifficulty","join","JoinMethod","RANDOM","createFoundLettersTemplate","last_activity_at","savedRoom","pending","cancelRoom","requestingUserId","NotFoundError","BadRequestError","includes","undefined","isParticipant","some","ForbiddenError","userRoomIds","roles","userRooms","createQueryBuilder","select","innerJoin","getMany","map","Not","In","LessThan","order","created_at","getActiveRoomsForUser","leftJoinAndSelect","andWhere","onGameEnd","forfeitedBy","completed_at","minScore","Math","min","Object","values","points","forfeit","highestScore","max","winnerIds","entries","filter","score","parseInt","allGameStats","warn","console","playerStats","stat","guessCounts","guessDetails","detail","timestamp","previousStats","innerJoinAndSelect","orderBy","take","getOne","newRatings","updateEloRatings","playerId","newRating","oldRating","p","ratingChange","change","error","err","forfeitGame","getRoomsByUserAndStatus","query","isGameFinished","handleGuess","x","y","guess","entityManager","manager","createRoomCache","letterIndex","col_size","isCorrect","checkGuess","lastActivityAt","now","row","col","letter","finished","addCacheToRoom","getRecentGamesWithStats","limit","startDate","endDate","gameStats","toISOString","createChallengeRoom","challengerId","challengedId","context","challenger","challenged","Promise","all","CHALLENGE","username","acceptChallenge","rejectChallenge","getPendingChallenges","qb","subQuery","from","getQuery","setParameters","getTimeTrialLeaderboard","crosswordId","currentPlayerId","rooms","r","scoresObj","scoreValues","timeTakenMs","sort","a","ta","Number","MAX_SAFE_INTEGER","tb","rankedEntries","e","idx","rank","topEntries","slice","currentPlayerEntry","currentEntry","getGlobalTimeTrialLeaderboard","roomRepository","bestByUser","Map","entry","existing","get","set","Array","aTime","bTime","index","exports"],"sources":["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/RoomService.ts"],"sourcesContent":["import { And, DataSource, In, LessThan, Not } from \"typeorm\";\nimport { JoinMethod, Room } from \"../entities/Room\";\nimport { User } from \"../entities/User\";\nimport { CrosswordService } from \"./CrosswordService\";\nimport { EloService } from \"./EloService\";\nimport { config } from \"../config/config\";\nimport { fastify } from \"../fastify\";\nimport { GameStats } from \"../entities/GameStats\";\nimport { BadRequestError, ForbiddenError, NotFoundError } from \"../errors/api\";\nimport { gameInactivityQueue, gameTimeoutQueue } from \"../jobs/queues\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { EntityManager } from \"typeorm\";\nimport { CachedGameInfo, RedisService } from \"./RedisService\";\n\nexport class RoomService {\n  private crosswordService: CrosswordService;\n  private eloService: EloService;\n  private ormConnection: DataSource;\n  private redisService: RedisService;\n\n  constructor(ormConnection: DataSource) {\n    this.ormConnection = ormConnection;\n    this.crosswordService = new CrosswordService(ormConnection);\n    this.eloService = new EloService(\n      ormConnection.getRepository(User),\n      ormConnection.getRepository(Room),\n      ormConnection.getRepository(GameStats),\n    );\n    this.redisService = new RedisService();\n  }\n\n  private async ensureGameStatsEntry(\n    room: Room,\n    user: User,\n  ): Promise<GameStats> {\n    const gameStatsRepo = this.ormConnection.getRepository(GameStats);\n\n    let stats = await gameStatsRepo.findOne({\n      where: { roomId: room.id, userId: user.id },\n    });\n\n    if (!stats) {\n      stats = gameStatsRepo.create({\n        user,\n        room,\n        userId: user.id,\n        roomId: room.id,\n        eloAtGame: user.eloRating,\n        correctGuesses: 0,\n        incorrectGuesses: 0,\n        correctGuessDetails: [],\n        isWinner: false,\n        winStreak: 0,\n      });\n\n      stats = await gameStatsRepo.save(stats);\n    }\n\n    return stats;\n  }\n\n  async getRoomById(roomId: number): Promise<Room> {\n    const results = await this.ormConnection\n      .getRepository(Room)\n      .findOne({ where: { id: roomId } });\n\n    if (results) {\n      let cachedGameInfo = await this.redisService.getGame(\n        results.id.toString(),\n      );\n      if (cachedGameInfo) {\n        results.found_letters = cachedGameInfo.foundLetters;\n        results.scores = cachedGameInfo.scores;\n      }\n    }\n    return results;\n  }\n\n  async getRoomsByUserId(userId: number): Promise<Room[]> {\n    return this.ormConnection\n      .getRepository(Room)\n      .find({ where: { players: { id: userId } } });\n  }\n\n  async joinRoom(\n    user: User,\n    difficulty: string,\n    type: \"1v1\" | \"2v2\" | \"free4all\" | \"time_trial\" = \"1v1\",\n  ): Promise<Room> {\n    // For time_trial, create a new room immediately since it's single player\n    if (type === \"time_trial\") {\n      return await this.createRoom(user.id, difficulty, type);\n    }\n\n    let room = await this.findEmptyRoomByDifficulty(difficulty, type, user);\n\n    if (room) {\n      fastify.log.info(`Found room with id: ${room.id}`);\n      await this.joinExistingRoom(room, user.id);\n      return room;\n    } else {\n      return await this.createRoom(user.id, difficulty, type);\n    }\n  }\n\n  async joinExistingRoom(room: Room, userId: number): Promise<void> {\n    fastify.log.info(`Joining room with id: ${room.id} by user: ${userId}`);\n    const player = await this.ormConnection\n      .getRepository(User)\n      .findOneBy({ id: userId });\n\n    if (!player) throw new Error(\"User not found\");\n\n    room.players.push(player);\n    room.markModified();\n\n    // Ensure newly joined player's active sockets receive future room events\n    fastify.io\n      .in(`user_${player.id}`)\n      .socketsJoin(room.id.toString());\n\n    await this.ensureGameStatsEntry(room, player);\n\n    const cachedGameInfo = await this.redisService.getGame(room.id.toString());\n    if (cachedGameInfo) {\n      if (!cachedGameInfo.userGuessCounts[player.id]) {\n        cachedGameInfo.userGuessCounts[player.id] = {\n          correct: 0,\n          incorrect: 0,\n        };\n      }\n      if (!cachedGameInfo.correctGuessDetails) {\n        cachedGameInfo.correctGuessDetails = {};\n      }\n      if (!cachedGameInfo.correctGuessDetails[player.id]) {\n        cachedGameInfo.correctGuessDetails[player.id] = [];\n      }\n      await this.redisService.cacheGame(room.id.toString(), cachedGameInfo);\n    }\n\n    // If room is full based on game type, change status to playing\n    const maxPlayers = config.game.maxPlayers[room.type];\n    if (room.players.length >= maxPlayers) {\n      room.status = \"playing\";\n      // Remove timeout job since the game is starting\n      await gameTimeoutQueue.remove(`room-timeout-${room.id}`);\n\n      // Start inactivity check\n      fastify.log.info(`Adding inactivity job for room: ${room.id}`);\n      await gameInactivityQueue.add(\n        \"game-inactivity\",\n        {\n          roomId: room.id,\n          lastActivityTimestamp: new Date().getTime(),\n        },\n        {\n          jobId: `game-inactivity-${room.id}-${uuidv4()}`,\n          delay: config.game.timeout.inactivity.initial,\n        },\n      );\n\n      // Emit game_started event through fastify.io\n      fastify.io.to(room.id.toString()).emit(\"game_started\", {\n        message: \"All players have joined! Game is starting.\",\n        room: room.toJSON(),\n        navigate: {\n          screen: \"game\",\n          params: { roomId: room.id },\n        },\n      });\n    }\n\n    await this.ormConnection.getRepository(Room).save(room);\n  }\n\n  async createRoom(\n    userId: number,\n    difficulty: string,\n    type: \"1v1\" | \"2v2\" | \"free4all\" | \"time_trial\" = \"1v1\",\n  ): Promise<Room> {\n    const crossword = await this.crosswordService.getCrosswordByDifficulty(\n      difficulty,\n    );\n\n    const player = await this.ormConnection\n      .getRepository(User)\n      .findOneBy({ id: userId });\n\n    if (!player) throw new Error(\"User not found\");\n\n    const room = new Room();\n    room.players = [player];\n    room.crossword = crossword;\n    room.difficulty = difficulty;\n    room.type = type;\n    room.scores = { [player.id]: 0 };\n    room.join = JoinMethod.RANDOM;\n\n    room.found_letters = await this.crosswordService.createFoundLettersTemplate(\n      crossword.id,\n    );\n\n    // For time trials, start the game immediately\n    if (type === \"time_trial\") {\n      room.status = \"playing\";\n      room.last_activity_at = new Date();\n    }\n\n    const savedRoom = await this.ormConnection.getRepository(Room).save(room);\n\n    // Ensure the creating player's sockets are subscribed to the room channel\n    fastify.io\n      .in(`user_${player.id}`)\n      .socketsJoin(savedRoom.id.toString());\n\n    const stats = await this.ensureGameStatsEntry(savedRoom, player);\n    savedRoom.stats = [stats];\n\n    // Only add timeout job for non-time trial games\n    if (type !== \"time_trial\") {\n      fastify.log.info(`Adding timeout job for room: ${savedRoom.id}`);\n      await gameTimeoutQueue.add(\n        \"game-timeout\",\n        { roomId: savedRoom.id },\n        {\n          delay: config.game.timeout.pending,\n          jobId: `game-timeout`,\n        },\n      );\n      fastify.log.info(`Added timeout job for room: ${savedRoom.id}`);\n    } else {\n      // For time trials, start inactivity check immediately\n      fastify.log.info(\n        `Adding inactivity job for time trial room: ${savedRoom.id}`,\n      );\n      await gameInactivityQueue.add(\n        \"game-inactivity\",\n        {\n          roomId: savedRoom.id,\n          lastActivityTimestamp: room.last_activity_at.getTime(),\n        },\n        {\n          jobId: `game-inactivity-${savedRoom.id}-${uuidv4()}`,\n          delay: config.game.timeout.inactivity.initial,\n        },\n      );\n    }\n\n    return savedRoom;\n  }\n\n  async cancelRoom(roomId: number, requestingUserId?: number): Promise<Room> {\n    const room = await this.getRoomById(roomId);\n    if (!room) throw new NotFoundError(\"Room not found\");\n\n    if (room.status !== \"pending\") {\n      throw new BadRequestError(\"Only pending games can be cancelled\");\n    }\n\n    if (![\"1v1\", \"free4all\"].includes(room.type)) {\n      throw new BadRequestError(\n        \"Only 1v1 or free4all games can be cancelled while pending\",\n      );\n    }\n\n    if (requestingUserId !== undefined) {\n      const isParticipant = room.players.some((player) =>\n        player.id === requestingUserId\n      );\n\n      if (!isParticipant) {\n        throw new ForbiddenError(\"You are not a participant in this game\");\n      }\n    }\n\n    room.status = \"cancelled\";\n    room.markModified();\n    await this.ormConnection.getRepository(Room).save(room);\n    return room;\n  }\n\n  private async findEmptyRoomByDifficulty(\n    difficulty: string,\n    type: \"1v1\" | \"2v2\" | \"free4all\" | \"time_trial\",\n    user: User,\n  ): Promise<Room> {\n    let userRoomIds: number[] = [];\n    // First get all rooms this user is in\n    if (!user.roles.includes(\"admin\")) {\n      const userRooms = await this.ormConnection\n        .getRepository(Room)\n        .createQueryBuilder(\"room\")\n        .select(\"room.id\")\n        .innerJoin(\"room.players\", \"players\")\n        .where(\"players.id = :userId\", { userId: user.id })\n        .getMany();\n      userRoomIds = userRooms.map((room) => room.id);\n    }\n\n    return this.ormConnection.getRepository(Room).findOne({\n      where: {\n        difficulty,\n        status: \"pending\",\n        type,\n        id: userRoomIds.length > 0 ? Not(In(userRoomIds)) : undefined,\n        players: LessThan(config.game.maxPlayers[type]),\n      },\n      order: { created_at: \"ASC\" },\n    });\n  }\n\n  async getActiveRoomsForUser(userId: number): Promise<Room[]> {\n    return this.ormConnection\n      .getRepository(Room)\n      .createQueryBuilder(\"room\")\n      .leftJoinAndSelect(\"room.players\", \"players\")\n      .leftJoinAndSelect(\"room.crossword\", \"crossword\")\n      .where(\"players.id = :userId\", { userId })\n      .andWhere(\"room.status = :status\", { status: \"playing\" })\n      .getMany();\n  }\n\n  async onGameEnd(room: Room, forfeitedBy?: number): Promise<void> {\n    room.status = \"finished\";\n    room.completed_at = new Date();\n\n    // If game was forfeited, adjust scores\n    if (forfeitedBy !== undefined) {\n      const minScore = Math.min(...Object.values(room.scores)) +\n        config.game.points.forfeit;\n      room.scores[forfeitedBy] = minScore;\n    }\n\n    // Find player with highest score\n    const highestScore = Math.max(...Object.values(room.scores));\n    const winnerIds = Object.entries(room.scores)\n      .filter(([userId, score]) => score === highestScore)\n      .map(([userId]) => parseInt(userId));\n\n    // Get all game stats for players in this room\n    const gameStatsRepo = this.ormConnection.getRepository(GameStats);\n    const allGameStats = await gameStatsRepo.find({\n      where: {\n        roomId: room.id,\n      },\n    });\n\n    const cachedGameInfo = await this.redisService.getGame(room.id.toString());\n\n    // Log for debugging\n    if (!cachedGameInfo) {\n      fastify.log.warn(\n        `No cached game info found for room ${room.id} during onGameEnd`,\n      );\n    }\n\n    console.log(\"cached game info\", cachedGameInfo);\n    // Update win streaks and winner from cached game\n    for (const player of room.players) {\n      const playerStats = allGameStats.find((stat) =>\n        stat.userId === player.id\n      ) || await this.ensureGameStatsEntry(room, player);\n\n      const guessCounts = cachedGameInfo?.userGuessCounts?.[player.id] || {\n        correct: 0,\n        incorrect: 0,\n      };\n\n      playerStats.correctGuesses = guessCounts.correct;\n      playerStats.incorrectGuesses = guessCounts.incorrect;\n\n      const guessDetails = cachedGameInfo?.correctGuessDetails?.[player.id] ||\n        [];\n      playerStats.correctGuessDetails = guessDetails.map((detail) => ({\n        ...detail,\n        timestamp: new Date(detail.timestamp),\n      }));\n\n      // If game was forfeited, non-forfeiting players are winners\n      const isWinner = forfeitedBy !== undefined\n        ? playerStats.userId !== forfeitedBy\n        : winnerIds.includes(playerStats.userId);\n\n      if (isWinner) {\n        // Get the player's stats from their last completed game\n        const previousStats = await gameStatsRepo\n          .createQueryBuilder(\"stats\")\n          .innerJoinAndSelect(\"stats.room\", \"room\")\n          .where(\"stats.userId = :userId\", { userId: playerStats.userId })\n          .andWhere(\"stats.roomId != :roomId\", { roomId: room.id })\n          .andWhere(\"room.status = :status\", { status: \"finished\" })\n          .orderBy(\"stats.createdAt\", \"DESC\")\n          .take(1)\n          .getOne();\n\n        playerStats.isWinner = true;\n        playerStats.winStreak = (previousStats?.winStreak || 0) + 1;\n      } else {\n        playerStats.isWinner = false;\n        playerStats.winStreak = 0; // Reset win streak for losers\n      }\n\n      console.log(`saving gameStats. user: ${playerStats.userId}`, playerStats);\n\n      await gameStatsRepo.save(playerStats);\n    }\n\n    // Update ELO ratings for all players\n    try {\n      const newRatings = await this.eloService.updateEloRatings(room);\n\n      // Emit rating changes to all players\n      for (const [playerId, newRating] of newRatings.entries()) {\n        const oldRating = room.players.find((p) =>\n          p.id === playerId\n        )?.eloRating || 0;\n        const ratingChange = newRating - oldRating;\n\n        fastify.io.to(playerId.toString()).emit(\"rating_change\", {\n          oldRating,\n          newRating,\n          change: ratingChange,\n        });\n      }\n    } catch (error) {\n      fastify.log.error({ err: error }, \"Failed to update ELO ratings\");\n    }\n\n    await this.ormConnection.getRepository(Room).save(room);\n\n    // If game was forfeited, emit forfeit event\n    if (forfeitedBy !== undefined) {\n      fastify.io.to(room.id.toString()).emit(\"game_forfeited\", {\n        message: \"A player has forfeited the game\",\n        forfeitedBy,\n        room: room.toJSON(),\n      });\n    }\n  }\n\n  async forfeitGame(roomId: number, userId: number): Promise<Room> {\n    const room = await this.getRoomById(roomId);\n\n    fastify.log.info(`Forfeiting game with id: ${roomId} by user: ${userId}`);\n\n    if (!room) {\n      throw new Error(\"Room not found\");\n    }\n\n    if (!room.players.some((player) => player.id === userId)) {\n      throw new Error(\"User is not a participant in this room\");\n    }\n\n    // Ensure game stats exist for all players before ending the game\n    for (const player of room.players) {\n      await this.ensureGameStatsEntry(room, player);\n    }\n\n    room.markModified();\n    await this.onGameEnd(room, userId);\n    return room;\n  }\n\n  async getRoomsByUserAndStatus(\n    userId: number,\n    status?: \"playing\" | \"pending\" | \"finished\" | \"cancelled\",\n  ): Promise<Room[]> {\n    const query = this.ormConnection\n      .getRepository(Room)\n      .createQueryBuilder(\"room\")\n      .leftJoinAndSelect(\"room.players\", \"players\")\n      .leftJoinAndSelect(\"room.crossword\", \"crossword\")\n      .where(\"players.id = :userId\", { userId });\n\n    if (status) {\n      query.andWhere(\"room.status = :status\", { status });\n    }\n\n    return query.getMany();\n  }\n\n  private isGameFinished(room: Room): boolean {\n    // If room is not in playing state, it can't be won\n    if (room.status !== \"playing\") return false;\n\n    // Check if all letters have been found\n    // found_letters is a string array where '*' represents unfound letters\n    return !room.found_letters.includes(\"*\");\n  }\n\n  async handleGuess(\n    roomId: number,\n    userId: number,\n    x: number,\n    y: number,\n    guess: string,\n    entityManager?: EntityManager,\n  ): Promise<Room> {\n    const manager = entityManager || this.ormConnection.manager;\n\n    // Load room (players and crossword are eager on the entity)\n    let room = await manager.getRepository(Room).findOne({\n      where: { id: roomId },\n    });\n    if (!room) throw new NotFoundError(\"Room not found\");\n\n    // Load or initialize game cache\n    let cachedGameInfo = await this.redisService.getGame(room.id.toString());\n    if (!cachedGameInfo) {\n      // Initialize cache from the current DB state\n      cachedGameInfo = room.createRoomCache();\n    }\n\n    // Ensure user tracking structures exist\n    if (!cachedGameInfo.userGuessCounts[userId]) {\n      cachedGameInfo.userGuessCounts[userId] = { correct: 0, incorrect: 0 };\n    }\n    if (!cachedGameInfo.correctGuessDetails) {\n      cachedGameInfo.correctGuessDetails = {};\n    }\n    if (!cachedGameInfo.correctGuessDetails[userId]) {\n      cachedGameInfo.correctGuessDetails[userId] = [];\n    }\n    if (cachedGameInfo.scores[userId] === undefined) {\n      cachedGameInfo.scores[userId] = 0;\n    }\n\n    // Compute letter index\n    const letterIndex = x * room.crossword.col_size + y;\n    if (cachedGameInfo.foundLetters[letterIndex] !== \"*\") {\n      return room;\n    }\n\n    const isCorrect = await this.crosswordService.checkGuess(\n      room.crossword,\n      { x, y },\n      guess,\n    );\n\n    // Update stats based on guess result\n    if (isCorrect) {\n      // Update last activity timestamp\n      cachedGameInfo.lastActivityAt = Date.now();\n\n      cachedGameInfo.userGuessCounts[userId].correct++;\n      cachedGameInfo.correctGuessDetails[userId].push({\n        row: x,\n        col: y,\n        letter: guess,\n        timestamp: Date.now(),\n      });\n\n      // Update board + score\n      cachedGameInfo.foundLetters[letterIndex] = guess;\n      cachedGameInfo.scores[userId] = (cachedGameInfo.scores[userId] || 0) +\n        config.game.points.correct;\n    } else {\n      cachedGameInfo.userGuessCounts[userId].incorrect++;\n      cachedGameInfo.scores[userId] = (cachedGameInfo.scores[userId] || 0) +\n        config.game.points.incorrect;\n    }\n\n    // Persist authoritative state to DB to avoid cache reinitialization wiping progress\n    room.found_letters = cachedGameInfo.foundLetters;\n    room.scores = cachedGameInfo.scores;\n    if (cachedGameInfo.lastActivityAt) {\n      room.last_activity_at = new Date(cachedGameInfo.lastActivityAt);\n    }\n\n    // Determine if the game is finished based on the updated state\n    const finished = !cachedGameInfo.foundLetters.includes(\"*\");\n\n    if (finished) {\n      // Mark modified so toJSON invalidates cache\n      room.markModified();\n      await this.onGameEnd(room);\n    } else {\n      // Save room if game is not finished\n      await manager.getRepository(Room).save(room);\n    }\n\n    // Update cache after DB write\n    await this.redisService.cacheGame(room.id.toString(), cachedGameInfo);\n\n    // Invalidate view cache so clients receive updated view\n    room.markModified();\n    return room;\n  }\n\n  addCacheToRoom(room: Room, cachedGameInfo: CachedGameInfo): Room {\n    room.found_letters = cachedGameInfo.foundLetters;\n    room.scores = cachedGameInfo.scores;\n    return room;\n  }\n\n  async getRecentGamesWithStats(\n    userId: number,\n    limit: number = 10,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<{\n    room: {\n      id: number;\n      difficulty: string;\n      type: string;\n      status: string;\n      created_at: string;\n      completed_at: string | null;\n      scores: Record<string, number>;\n    };\n    stats: {\n      correctGuesses: number;\n      incorrectGuesses: number;\n      isWinner: boolean;\n      eloAtGame: number;\n    };\n  }[]> {\n    const query = this.ormConnection\n      .getRepository(GameStats)\n      .createQueryBuilder(\"stats\")\n      .leftJoinAndSelect(\"stats.room\", \"room\")\n      .leftJoinAndSelect(\"room.crossword\", \"crossword\")\n      .where(\"stats.userId = :userId\", { userId })\n      .andWhere(\"room.status = :status\", { status: \"finished\" })\n      .orderBy(\"stats.createdAt\", \"DESC\");\n\n    if (startDate) {\n      query.andWhere(\"stats.createdAt >= :startDate\", { startDate });\n    }\n\n    if (endDate) {\n      query.andWhere(\"stats.createdAt <= :endDate\", { endDate });\n    }\n\n    if (limit > 0) {\n      query.take(limit);\n    }\n\n    const gameStats = await query.getMany();\n\n    return gameStats.map((stats) => ({\n      room: {\n        id: stats.room.id,\n        difficulty: stats.room.difficulty,\n        type: stats.room.type,\n        status: stats.room.status,\n        created_at: stats.room.created_at.toISOString(),\n        completed_at: stats.room.completed_at\n          ? stats.room.completed_at.toISOString()\n          : null,\n        scores: stats.room.scores,\n      },\n      stats: {\n        correctGuesses: stats.correctGuesses,\n        incorrectGuesses: stats.incorrectGuesses,\n        isWinner: stats.isWinner,\n        eloAtGame: stats.eloAtGame,\n      },\n    }));\n  }\n\n  async createChallengeRoom(\n    challengerId: number,\n    challengedId: number,\n    difficulty: string,\n    context?: string,\n  ): Promise<Room> {\n    const [challenger, challenged] = await Promise.all([\n      this.ormConnection.getRepository(User).findOneBy({ id: challengerId }),\n      this.ormConnection.getRepository(User).findOneBy({ id: challengedId }),\n    ]);\n\n    if (!challenger || !challenged) {\n      throw new NotFoundError(\"User not found\");\n    }\n\n    const crossword = await this.crosswordService.getCrosswordByDifficulty(\n      difficulty,\n    );\n\n    const room = new Room();\n    room.players = [challenger, challenged];\n    room.crossword = crossword;\n    room.difficulty = difficulty;\n    room.type = \"1v1\";\n    room.status = \"pending\";\n    room.scores = { [challenger.id]: 0, [challenged.id]: 0 };\n    room.join = JoinMethod.CHALLENGE;\n\n    room.found_letters = await this.crosswordService.createFoundLettersTemplate(\n      crossword.id,\n    );\n\n    const savedRoom = await this.ormConnection.getRepository(Room).save(room);\n\n    // Emit a challenge event through socket.io\n    fastify.io.to(`user_${challenged.id.toString()}`).emit(\"challenge_received\", {\n      room: savedRoom.toJSON(),\n      challenger: {\n        id: challenger.id,\n        username: challenger.username,\n      },\n      context,\n    });\n\n    return savedRoom;\n  }\n\n  async acceptChallenge(roomId: number, userId: number): Promise<Room> {\n    const room = await this.getRoomById(roomId);\n    if (!room) throw new NotFoundError(\"Room not found\");\n\n    await this.joinExistingRoom(room, userId);\n\n    // Emit game_started event with navigation for both players\n    fastify.io.to(room.id.toString()).emit(\"game_started\", {\n      message: \"Challenge accepted! Game is starting.\",\n      room: room.toJSON(),\n      navigate: {\n        screen: \"game\",\n        params: { roomId: room.id },\n      },\n    });\n\n    return room;\n  }\n\n  async rejectChallenge(roomId: number): Promise<Room> {\n    const room = await this.getRoomById(roomId);\n    if (!room) throw new NotFoundError(\"Room not found\");\n\n    room.status = \"cancelled\";\n    room.markModified();\n\n    await this.ormConnection.getRepository(Room).save(room);\n    return room;\n  }\n\n  async getPendingChallenges(userId: number): Promise<Room[]> {\n    const query = this.ormConnection\n      .getRepository(Room)\n      .createQueryBuilder(\"room\")\n      .innerJoinAndSelect(\"room.players\", \"players\")\n      .leftJoinAndSelect(\"room.crossword\", \"crossword\")\n      .where(\"room.status = :status\", { status: \"pending\" })\n      .andWhere(\"room.type = :type\", { type: \"1v1\" })\n      .andWhere((qb) => {\n        const subQuery = qb\n          .subQuery()\n          .select(\"rp.room_id\")\n          .from(\"room_players\", \"rp\")\n          .where(\"rp.user_id = :userId\")\n          .getQuery();\n        return \"room.id IN \" + subQuery;\n      })\n      .setParameters({\n        status: \"pending\",\n        type: \"1v1\",\n        userId,\n      });\n\n    return query.getMany();\n  }\n  async getTimeTrialLeaderboard(\n    roomId: number,\n    limit: number = 10,\n  ): Promise<{\n    topEntries: Array<{\n      rank: number;\n      roomId: number;\n      score: number;\n      user: { id: number; username: string; eloRating: number } | null;\n      created_at: string;\n      completed_at: string | null;\n      timeTakenMs: number | null;\n    }>;\n    currentPlayerEntry?: {\n      rank: number;\n      roomId: number;\n      score: number;\n      user: { id: number; username: string; eloRating: number } | null;\n      created_at: string;\n      completed_at: string | null;\n      timeTakenMs: number | null;\n    };\n  }> {\n    const room = await this.getRoomById(roomId);\n    if (!room) {\n      throw new NotFoundError(\"Room not found\");\n    }\n\n    const crosswordId = room.crossword.id;\n    const currentPlayerId = room.players && room.players.length > 0\n      ? room.players[0].id\n      : null;\n\n    // Fetch finished time-trial games on the same crossword\n    const rooms = await this.ormConnection.getRepository(Room).find({\n      where: {\n        type: \"time_trial\",\n        status: \"finished\",\n        crossword: { id: crosswordId },\n      },\n      order: { completed_at: \"DESC\" },\n    });\n\n    // Build leaderboard entries\n    const entries = rooms.map((r) => {\n      const scoresObj = r.scores || {};\n      const scoreValues = Object.values(scoresObj);\n      const score = scoreValues.length > 0 ? Math.max(...scoreValues) : 0;\n\n      const player = r.players && r.players.length > 0 ? r.players[0] : null;\n\n      const timeTakenMs = r.completed_at && r.created_at\n        ? r.completed_at.getTime() - r.created_at.getTime()\n        : null;\n\n      return {\n        roomId: r.id,\n        user: player\n          ? {\n            id: player.id,\n            username: player.username,\n            eloRating: player.eloRating,\n          }\n          : null,\n        score,\n        created_at: r.created_at,\n        completed_at: r.completed_at,\n        timeTakenMs,\n      };\n    });\n\n    // Sort by score (desc), then by time taken (asc if available)\n    entries.sort((a, b) => {\n      if (b.score !== a.score) return b.score - a.score;\n      const ta = a.timeTakenMs ?? Number.MAX_SAFE_INTEGER;\n      const tb = b.timeTakenMs ?? Number.MAX_SAFE_INTEGER;\n      return ta - tb;\n    });\n\n    // Add ranks to all entries\n    const rankedEntries = entries.map((e, idx) => ({\n      rank: idx + 1,\n      roomId: e.roomId,\n      score: e.score,\n      user: e.user,\n      created_at: e.created_at.toISOString(),\n      completed_at: e.completed_at ? e.completed_at.toISOString() : null,\n      timeTakenMs: e.timeTakenMs,\n    }));\n\n    // Get top N entries\n    const topEntries = rankedEntries.slice(0, limit);\n\n    // Find current player's entry if not in top N\n    let currentPlayerEntry: typeof rankedEntries[0] | undefined;\n    if (currentPlayerId) {\n      const currentEntry = rankedEntries.find((e) => e.roomId === roomId);\n      if (currentEntry && currentEntry.rank > limit) {\n        currentPlayerEntry = currentEntry;\n      }\n    }\n\n    return {\n      topEntries,\n      currentPlayerEntry,\n    };\n  }\n\n  async getGlobalTimeTrialLeaderboard(\n    limit: number = 10,\n  ): Promise<Array<{\n    rank: number;\n    roomId: number;\n    score: number;\n    user: { id: number; username: string; eloRating: number } | null;\n    created_at: string;\n    completed_at: string | null;\n    timeTakenMs: number | null;\n  }>> {\n    const roomRepository = this.ormConnection.getRepository(Room);\n\n    const rooms = await roomRepository.find({\n      where: {\n        type: \"time_trial\",\n        status: \"finished\",\n      },\n      order: { completed_at: \"DESC\" },\n    });\n\n    const entries = rooms.map((room) => {\n      const scoresObj = room.scores || {};\n      const scoreValues = Object.values(scoresObj);\n      const score = scoreValues.length > 0 ? Math.max(...scoreValues) : 0;\n\n      const player = room.players && room.players.length > 0\n        ? room.players[0]\n        : null;\n\n      const timeTakenMs = room.completed_at && room.created_at\n        ? room.completed_at.getTime() - room.created_at.getTime()\n        : null;\n\n      return {\n        roomId: room.id,\n        user: player\n          ? {\n            id: player.id,\n            username: player.username,\n            eloRating: player.eloRating,\n          }\n          : null,\n        score,\n        created_at: room.created_at,\n        completed_at: room.completed_at,\n        timeTakenMs,\n      };\n    });\n\n    const bestByUser = new Map<number, typeof entries[number]>();\n\n    for (const entry of entries) {\n      if (!entry.user) continue;\n\n      const existing = bestByUser.get(entry.user.id);\n      if (!existing) {\n        bestByUser.set(entry.user.id, entry);\n        continue;\n      }\n\n      if (entry.score > existing.score) {\n        bestByUser.set(entry.user.id, entry);\n        continue;\n      }\n\n      if (\n        entry.score === existing.score &&\n        (entry.timeTakenMs ?? Number.MAX_SAFE_INTEGER) <\n          (existing.timeTakenMs ?? Number.MAX_SAFE_INTEGER)\n      ) {\n        bestByUser.set(entry.user.id, entry);\n      }\n    }\n\n    const rankedEntries = Array.from(bestByUser.values())\n      .sort((a, b) => {\n        if (b.score !== a.score) {\n          return b.score - a.score;\n        }\n        const aTime = a.timeTakenMs ?? Number.MAX_SAFE_INTEGER;\n        const bTime = b.timeTakenMs ?? Number.MAX_SAFE_INTEGER;\n        return aTime - bTime;\n      })\n      .slice(0, limit)\n      .map((entry, index) => ({\n        rank: index + 1,\n        roomId: entry.roomId,\n        score: entry.score,\n        user: entry.user,\n        created_at: entry.created_at.toISOString(),\n        completed_at: entry.completed_at\n          ? entry.completed_at.toISOString()\n          : null,\n        timeTakenMs: entry.timeTakenMs,\n      }));\n\n    return rankedEntries;\n  }\n}\n"],"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","ignoreList":[]}
