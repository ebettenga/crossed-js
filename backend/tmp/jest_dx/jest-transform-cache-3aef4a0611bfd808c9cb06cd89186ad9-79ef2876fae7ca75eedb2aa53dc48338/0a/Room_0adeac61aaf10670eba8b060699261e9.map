{"version":3,"names":["cov_1ci5wr56uw","actualCoverage","typeorm_1","s","require","SquareType","f","b","exports","JoinMethod","Room","id","type","status","join_type","join","value","players","crossword","scores","created_at","completed_at","difficulty","found_letters","stats","last_activity_at","viewCache","lastModified","lastViewUpdate","markModified","Date","now","player_count","length","createRoomCache","initialGuessCounts","reduce","acc","player","correct","incorrect","initialGuessDetails","lastActivityAt","foundLetters","userGuessCounts","correctGuessDetails","toJSON","view","map","username","score","eloRating","col_size","row_size","gridnums","clues","across","down","title","author","created_by","creator_link","board","createBoard","getSquareType","hasLetter","isCircled","black","BLACK","CIRCLE_SOLVED","SOLVED","CIRCLE_BLANK","BLANK","createSquares","letterCharacter","index","x","Math","floor","y","squareType","test","circles","gridnumber","parseInt","letter","undefined","arrayToMatrix","array","row_length","Array","ceil","fill","_","splice","createClueArray","clue","clueArray","split","clueNumber","number","hint","getClueByQuestionNumber","clueList","questionNumber","find","squares","acrossClues","downClues","forEach","row","rowIndex","square","colIndex","lastNonBlackSquare","i","acrossQuestion","downQuestion","__decorate","PrimaryGeneratedColumn","Column","enum","default","nullable","ManyToMany","eager","JoinTable","name","joinColumn","referencedColumnName","inverseJoinColumn","ManyToOne","JoinColumn","CreateDateColumn","OneToMany","gameStats","room","Entity"],"sources":["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/entities/Room.ts"],"sourcesContent":["import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Join,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport type { User } from \"./User\";\nimport type { Crossword } from \"./Crossword\";\nimport type { GameStats } from \"./GameStats\";\nimport type { CachedGameInfo } from \"../services/RedisService\";\n\nexport type GameType = \"1v1\" | \"2v2\" | \"free4all\" | \"time_trial\";\nexport type GameStatus = \"playing\" | \"pending\" | \"finished\" | \"cancelled\";\n\ninterface Clue {\n  number: number;\n  hint: string;\n}\n\nexport enum SquareType {\n  SOLVED,\n  BLANK,\n  BLACK,\n  CIRCLE_BLANK,\n  CIRCLE_SOLVED,\n}\n\nexport enum JoinMethod {\n  CHALLENGE = \"challenge\",\n  RANDOM = \"random\",\n  CLI = \"cli\",\n}\n\nexport interface Square {\n  id: number;\n  squareType: SquareType;\n  letter?: string;\n  gridnumber: number | null;\n  x: number;\n  y: number;\n  downQuestion?: string;\n  acrossQuestion?: string;\n}\n\n@Entity()\nexport class Room {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: \"enum\",\n    enum: [\"1v1\", \"2v2\", \"free4all\", \"time_trial\"],\n    default: \"1v1\",\n  })\n  type: GameType;\n\n  @Column({\n    type: \"enum\",\n    enum: [\"playing\", \"pending\", \"finished\", \"cancelled\"],\n    default: \"pending\",\n  })\n  status: GameStatus;\n\n  @Column({\n    type: \"enum\",\n    enum: JoinMethod,\n    nullable: true,\n  })\n  join_type?: JoinMethod;\n\n  get join(): JoinMethod | undefined {\n    return this.join_type;\n  }\n\n  set join(value: JoinMethod | undefined) {\n    this.join_type = value;\n  }\n\n  @ManyToMany(\"User\", { eager: true })\n  @JoinTable({\n    name: \"room_players\",\n    joinColumn: { name: \"room_id\", referencedColumnName: \"id\" },\n    inverseJoinColumn: { name: \"user_id\", referencedColumnName: \"id\" },\n  })\n  players: User[];\n\n  @ManyToOne(\"Crossword\", { eager: true })\n  @JoinColumn()\n  crossword: Crossword;\n\n  // Store scores as a JSON object with user IDs as keys\n  // TODO: add this data to the GameStats?\n  @Column(\"simple-json\", { default: {} })\n  scores: { [key: number]: number };\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @Column({ type: \"timestamp\", nullable: true })\n  completed_at: Date;\n\n  @Column(\"text\")\n  difficulty: string;\n\n  @Column(\"char\", { array: true, default: \"{}\" })\n  found_letters: string[];\n\n  // @ts-ignore\n  @OneToMany(\"GameStats\", (gameStats) => gameStats.room)\n  stats: GameStats[];\n\n  @Column({ type: \"timestamp\", nullable: true })\n  last_activity_at: Date;\n\n  // Cache for toView result\n  private viewCache: any = null;\n  private lastModified: number = 0;\n  private lastViewUpdate: number = 0;\n\n  // Method to mark the room as modified\n  markModified() {\n    this.lastModified = Date.now();\n    this.viewCache = null;\n  }\n\n  get player_count(): number {\n    return this.players.length;\n  }\n\n  createRoomCache(): CachedGameInfo {\n    const initialGuessCounts = this.players.reduce((acc, player) => {\n      acc[player.id] = {\n        correct: 0,\n        incorrect: 0,\n      };\n      return acc;\n    }, {} as CachedGameInfo[\"userGuessCounts\"]);\n\n    const initialGuessDetails = this.players.reduce((acc, player) => {\n      acc[player.id] = [];\n      return acc;\n    }, {} as CachedGameInfo[\"correctGuessDetails\"]);\n\n    return {\n      lastActivityAt: Date.now(),\n      foundLetters: [...this.found_letters],\n      scores: { ...this.scores },\n      userGuessCounts: initialGuessCounts,\n      correctGuessDetails: initialGuessDetails,\n    };\n  }\n\n  toJSON(foundLetters?: string[], scores?: any): any {\n    // If cache exists and room hasn't been modified, return cached view\n    if (this.viewCache && this.lastModified === this.lastViewUpdate) {\n      return this.viewCache;\n    }\n\n    const view = {\n      id: this.id,\n      created_at: this.created_at,\n      completed_at: this.completed_at,\n      difficulty: this.difficulty,\n      type: this.type,\n      status: this.status,\n      player_count: this.player_count,\n      players: this.players.map((player) => ({\n        id: player.id,\n        username: player.username,\n        score: this.scores[player.id] || 0,\n        eloRating: player.eloRating,\n      })),\n      scores: scores ? scores : this.scores,\n      crossword: {\n        id: this.crossword.id,\n        col_size: this.crossword.col_size,\n        row_size: this.crossword.row_size,\n        gridnums: this.crossword.gridnums,\n        clues: {\n          across: this.crossword.clues.across,\n          down: this.crossword.clues.down,\n        },\n        title: this.crossword.title,\n        author: this.crossword.author,\n        created_by: this.crossword.created_by,\n        creator_link: this.crossword.creator_link,\n      },\n      found_letters: foundLetters ? foundLetters : this.found_letters,\n      board: this.createBoard(),\n      stats: null,\n    };\n\n    // Update cache\n    this.viewCache = view;\n    this.lastViewUpdate = this.lastModified;\n\n    return view;\n  }\n\n  private getSquareType(\n    hasLetter: boolean,\n    isCircled: boolean,\n    black: boolean,\n  ): SquareType {\n    if (black) return SquareType.BLACK;\n    if (hasLetter) {\n      return isCircled ? SquareType.CIRCLE_SOLVED : SquareType.SOLVED;\n    } else {\n      return isCircled ? SquareType.CIRCLE_BLANK : SquareType.BLANK;\n    }\n  }\n\n  private createSquares(): Square[] {\n    return this.found_letters.map((letterCharacter: string, index) => {\n      const x = Math.floor(index / this.crossword.row_size);\n      return {\n        id: index,\n        x,\n        y: index - x * this.crossword.row_size,\n        squareType: this.getSquareType(\n          /[a-zA-z]/.test(letterCharacter),\n          this.crossword.circles ? this.crossword.circles[index] === 1 : false,\n          letterCharacter === \".\",\n        ),\n        gridnumber: parseInt(this.crossword.gridnums[index]) !== 0\n          ? parseInt(this.crossword.gridnums[index])\n          : null,\n        letter: letterCharacter !== \"*\" ? letterCharacter : undefined,\n      } as Square;\n    });\n  }\n\n  private arrayToMatrix<T>(array: T[], row_length: number): T[][] {\n    return Array(Math.ceil(array.length / row_length))\n      .fill(\"\")\n      .reduce((acc, _, index) => {\n        return [...acc, [...array].splice(index * row_length, row_length)];\n      }, [] as T[][]);\n  }\n\n  private createClueArray(clues: string[]): Clue[] {\n    return clues.map((clue) => {\n      const clueArray = clue.split(\".\");\n      const clueNumber = parseInt(clueArray[0]);\n      return { number: clueNumber, hint: clue };\n    });\n  }\n\n  private getClueByQuestionNumber(\n    clueList: Clue[],\n    questionNumber: number | null,\n  ): Clue | undefined {\n    return clueList.find((clue) => clue.number === questionNumber);\n  }\n\n  private createBoard(): Square[][] {\n    const squares = this.createSquares();\n    const board = this.arrayToMatrix(squares, this.crossword.row_size);\n\n    // Add clues to squares\n    const acrossClues = this.createClueArray(this.crossword.clues.across);\n    const downClues = this.createClueArray(this.crossword.clues.down);\n\n    // Populate across clues\n    board.forEach((row, rowIndex) => {\n      row.forEach((square, colIndex) => {\n        // Find most recent non-black square in the row or first square\n        let lastNonBlackSquare: Square | null = square;\n        for (let i = colIndex; i >= 0; i--) {\n          if (row[i].squareType !== SquareType.BLACK) {\n            lastNonBlackSquare = row[i];\n          }\n          if (row[i].squareType === SquareType.BLACK) {\n            break;\n          }\n        }\n\n        if (lastNonBlackSquare) {\n          square.acrossQuestion = this.getClueByQuestionNumber(\n            acrossClues,\n            lastNonBlackSquare.gridnumber,\n          )?.hint;\n        }\n      });\n    });\n    // Populate down clues\n\n    board.forEach((row, rowIndex) => {\n      row.forEach((square, colIndex) => {\n        // Find most recent non-black square in the row or first square\n        let lastNonBlackSquare: Square | null = square;\n        for (let i = rowIndex; i >= 0; i--) {\n          if (board[i][colIndex].squareType !== SquareType.BLACK) {\n            lastNonBlackSquare = board[i][colIndex];\n          }\n          if (board[i][colIndex].squareType === SquareType.BLACK) {\n            break;\n          }\n        }\n        if (lastNonBlackSquare) {\n          square.downQuestion = this.getClueByQuestionNumber(\n            downClues,\n            lastNonBlackSquare.gridnumber,\n          )?.hint;\n        }\n      });\n    });\n\n    return board;\n  }\n}\n"],"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","ignoreList":[]}
