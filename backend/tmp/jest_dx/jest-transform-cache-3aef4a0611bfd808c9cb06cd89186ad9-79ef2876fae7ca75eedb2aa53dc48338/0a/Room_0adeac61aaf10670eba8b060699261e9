abdae9125c39aa05de73adffa0eba265
"use strict";

/* istanbul ignore next */
function cov_1ci5wr56uw() {
  var path = "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/entities/Room.ts";
  var hash = "7c1a3796c6bd833cf1fc7400e17de50f9b3a2b7f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/entities/Room.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 17
        },
        end: {
          line: 7,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 12
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 3,
          column: 34
        },
        end: {
          line: 3,
          column: 125
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "4": {
        start: {
          line: 4,
          column: 79
        },
        end: {
          line: 4,
          column: 131
        }
      },
      "5": {
        start: {
          line: 5,
          column: 9
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "6": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "7": {
        start: {
          line: 5,
          column: 58
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "8": {
        start: {
          line: 5,
          column: 81
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "9": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 66
        }
      },
      "10": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "11": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 109
        }
      },
      "12": {
        start: {
          line: 9,
          column: 79
        },
        end: {
          line: 9,
          column: 109
        }
      },
      "13": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "14": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 64
        }
      },
      "15": {
        start: {
          line: 13,
          column: 18
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "16": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 21,
          column: 57
        }
      },
      "17": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 52
        }
      },
      "18": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 50
        }
      },
      "19": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 50
        }
      },
      "20": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 64
        }
      },
      "21": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 66
        }
      },
      "22": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 27,
          column: 57
        }
      },
      "23": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 42
        }
      },
      "24": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 36
        }
      },
      "25": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 30
        }
      },
      "26": {
        start: {
          line: 28,
          column: 11
        },
        end: {
          line: 212,
          column: 1
        }
      },
      "27": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 30
        }
      },
      "28": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 31
        }
      },
      "29": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 20
        }
      },
      "30": {
        start: {
          line: 53,
          column: 19
        },
        end: {
          line: 53,
          column: 20
        }
      },
      "31": {
        start: {
          line: 54,
          column: 21
        },
        end: {
          line: 54,
          column: 22
        }
      },
      "32": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 39
        }
      },
      "33": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 30
        }
      },
      "34": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 35
        }
      },
      "35": {
        start: {
          line: 64,
          column: 35
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "36": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 68,
          column: 14
        }
      },
      "37": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 23
        }
      },
      "38": {
        start: {
          line: 71,
          column: 36
        },
        end: {
          line: 74,
          column: 14
        }
      },
      "39": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 32
        }
      },
      "40": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 23
        }
      },
      "41": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "42": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "43": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 34
        }
      },
      "44": {
        start: {
          line: 88,
          column: 21
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "45": {
        start: {
          line: 96,
          column: 51
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "46": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 30
        }
      },
      "47": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 48
        }
      },
      "48": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 20
        }
      },
      "49": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 128,
          column: 36
        }
      },
      "50": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 36
        }
      },
      "51": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "52": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 76
        }
      },
      "53": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 74
        }
      },
      "54": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 149,
          column: 11
        }
      },
      "55": {
        start: {
          line: 138,
          column: 22
        },
        end: {
          line: 138,
          column: 65
        }
      },
      "56": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 148,
          column: 14
        }
      },
      "57": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 156,
          column: 15
        }
      },
      "58": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 79
        }
      },
      "59": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "60": {
        start: {
          line: 160,
          column: 30
        },
        end: {
          line: 160,
          column: 45
        }
      },
      "61": {
        start: {
          line: 161,
          column: 31
        },
        end: {
          line: 161,
          column: 53
        }
      },
      "62": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 54
        }
      },
      "63": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 71
        }
      },
      "64": {
        start: {
          line: 166,
          column: 39
        },
        end: {
          line: 166,
          column: 69
        }
      },
      "65": {
        start: {
          line: 169,
          column: 24
        },
        end: {
          line: 169,
          column: 44
        }
      },
      "66": {
        start: {
          line: 170,
          column: 22
        },
        end: {
          line: 170,
          column: 74
        }
      },
      "67": {
        start: {
          line: 172,
          column: 28
        },
        end: {
          line: 172,
          column: 77
        }
      },
      "68": {
        start: {
          line: 173,
          column: 26
        },
        end: {
          line: 173,
          column: 73
        }
      },
      "69": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 191,
          column: 11
        }
      },
      "70": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 190,
          column: 15
        }
      },
      "71": {
        start: {
          line: 178,
          column: 41
        },
        end: {
          line: 178,
          column: 47
        }
      },
      "72": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 186,
          column: 17
        }
      },
      "73": {
        start: {
          line: 179,
          column: 29
        },
        end: {
          line: 179,
          column: 37
        }
      },
      "74": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 182,
          column: 21
        }
      },
      "75": {
        start: {
          line: 181,
          column: 24
        },
        end: {
          line: 181,
          column: 52
        }
      },
      "76": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 185,
          column: 21
        }
      },
      "77": {
        start: {
          line: 184,
          column: 24
        },
        end: {
          line: 184,
          column: 30
        }
      },
      "78": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 189,
          column: 17
        }
      },
      "79": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 188,
          column: 123
        }
      },
      "80": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 209,
          column: 11
        }
      },
      "81": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "82": {
        start: {
          line: 196,
          column: 41
        },
        end: {
          line: 196,
          column: 47
        }
      },
      "83": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 204,
          column: 17
        }
      },
      "84": {
        start: {
          line: 197,
          column: 29
        },
        end: {
          line: 197,
          column: 37
        }
      },
      "85": {
        start: {
          line: 198,
          column: 20
        },
        end: {
          line: 200,
          column: 21
        }
      },
      "86": {
        start: {
          line: 199,
          column: 24
        },
        end: {
          line: 199,
          column: 64
        }
      },
      "87": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 203,
          column: 21
        }
      },
      "88": {
        start: {
          line: 202,
          column: 24
        },
        end: {
          line: 202,
          column: 30
        }
      },
      "89": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 207,
          column: 17
        }
      },
      "90": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 206,
          column: 119
        }
      },
      "91": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 21
        }
      },
      "92": {
        start: {
          line: 213,
          column: 0
        },
        end: {
          line: 213,
          column: 20
        }
      },
      "93": {
        start: {
          line: 214,
          column: 0
        },
        end: {
          line: 217,
          column: 33
        }
      },
      "94": {
        start: {
          line: 218,
          column: 0
        },
        end: {
          line: 225,
          column: 35
        }
      },
      "95": {
        start: {
          line: 226,
          column: 0
        },
        end: {
          line: 233,
          column: 37
        }
      },
      "96": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 241,
          column: 40
        }
      },
      "97": {
        start: {
          line: 242,
          column: 0
        },
        end: {
          line: 250,
          column: 38
        }
      },
      "98": {
        start: {
          line: 251,
          column: 0
        },
        end: {
          line: 255,
          column: 40
        }
      },
      "99": {
        start: {
          line: 256,
          column: 0
        },
        end: {
          line: 259,
          column: 37
        }
      },
      "100": {
        start: {
          line: 260,
          column: 0
        },
        end: {
          line: 263,
          column: 41
        }
      },
      "101": {
        start: {
          line: 264,
          column: 0
        },
        end: {
          line: 267,
          column: 43
        }
      },
      "102": {
        start: {
          line: 268,
          column: 0
        },
        end: {
          line: 271,
          column: 41
        }
      },
      "103": {
        start: {
          line: 272,
          column: 0
        },
        end: {
          line: 275,
          column: 44
        }
      },
      "104": {
        start: {
          line: 276,
          column: 0
        },
        end: {
          line: 279,
          column: 36
        }
      },
      "105": {
        start: {
          line: 277,
          column: 57
        },
        end: {
          line: 277,
          column: 71
        }
      },
      "106": {
        start: {
          line: 280,
          column: 0
        },
        end: {
          line: 283,
          column: 47
        }
      },
      "107": {
        start: {
          line: 284,
          column: 0
        },
        end: {
          line: 286,
          column: 9
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 2,
            column: 47
          }
        },
        loc: {
          start: {
            line: 2,
            column: 87
          },
          end: {
            line: 7,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 8,
            column: 47
          }
        },
        loc: {
          start: {
            line: 8,
            column: 62
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 1
          },
          end: {
            line: 15,
            column: 2
          }
        },
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 1
          },
          end: {
            line: 23,
            column: 2
          }
        },
        loc: {
          start: {
            line: 23,
            column: 23
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 15
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 20
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 19
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 56
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 60
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 22
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 63
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 64,
            column: 55
          },
          end: {
            line: 64,
            column: 56
          }
        },
        loc: {
          start: {
            line: 64,
            column: 72
          },
          end: {
            line: 70,
            column: 9
          }
        },
        line: 64
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 71,
            column: 56
          },
          end: {
            line: 71,
            column: 57
          }
        },
        loc: {
          start: {
            line: 71,
            column: 73
          },
          end: {
            line: 74,
            column: 9
          }
        },
        line: 71
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 33
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 83
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 96,
            column: 38
          },
          end: {
            line: 96,
            column: 39
          }
        },
        loc: {
          start: {
            line: 96,
            column: 51
          },
          end: {
            line: 101,
            column: 13
          }
        },
        line: 96
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 47
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 126
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 20
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 136
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 137,
            column: 38
          },
          end: {
            line: 137,
            column: 39
          }
        },
        loc: {
          start: {
            line: 137,
            column: 66
          },
          end: {
            line: 149,
            column: 9
          }
        },
        line: 137
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 37
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 151
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 154,
            column: 20
          },
          end: {
            line: 154,
            column: 21
          }
        },
        loc: {
          start: {
            line: 154,
            column: 39
          },
          end: {
            line: 156,
            column: 9
          }
        },
        line: 154
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 158
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 26
          }
        },
        loc: {
          start: {
            line: 159,
            column: 35
          },
          end: {
            line: 163,
            column: 9
          }
        },
        line: 159
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 54
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 165
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 166,
            column: 29
          },
          end: {
            line: 166,
            column: 30
          }
        },
        loc: {
          start: {
            line: 166,
            column: 39
          },
          end: {
            line: 166,
            column: 69
          }
        },
        line: 166
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 18
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 168
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 23
          }
        },
        loc: {
          start: {
            line: 175,
            column: 41
          },
          end: {
            line: 191,
            column: 9
          }
        },
        line: 175
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 176,
            column: 24
          },
          end: {
            line: 176,
            column: 25
          }
        },
        loc: {
          start: {
            line: 176,
            column: 46
          },
          end: {
            line: 190,
            column: 13
          }
        },
        line: 176
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 193,
            column: 22
          },
          end: {
            line: 193,
            column: 23
          }
        },
        loc: {
          start: {
            line: 193,
            column: 41
          },
          end: {
            line: 209,
            column: 9
          }
        },
        line: 193
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 194,
            column: 24
          },
          end: {
            line: 194,
            column: 25
          }
        },
        loc: {
          start: {
            line: 194,
            column: 46
          },
          end: {
            line: 208,
            column: 13
          }
        },
        line: 194
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 277,
            column: 42
          },
          end: {
            line: 277,
            column: 43
          }
        },
        loc: {
          start: {
            line: 277,
            column: 57
          },
          end: {
            line: 277,
            column: 71
          }
        },
        line: 277
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 7,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 18
          },
          end: {
            line: 2,
            column: 22
          }
        }, {
          start: {
            line: 2,
            column: 26
          },
          end: {
            line: 2,
            column: 41
          }
        }, {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 7,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 34
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 42
          },
          end: {
            line: 3,
            column: 48
          }
        }, {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 67
          },
          end: {
            line: 3,
            column: 118
          }
        }, {
          start: {
            line: 3,
            column: 121
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 150
          }
        }],
        line: 4
      },
      "4": {
        loc: {
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 35
          }
        }, {
          start: {
            line: 4,
            column: 39
          },
          end: {
            line: 4,
            column: 77
          }
        }],
        line: 4
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 85
          },
          end: {
            line: 5,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        }, {
          start: {
            line: 5,
            column: 148
          },
          end: {
            line: 5,
            column: 149
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 94
          },
          end: {
            line: 5,
            column: 98
          }
        }, {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "8": {
        loc: {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 109
          },
          end: {
            line: 5,
            column: 126
          }
        }, {
          start: {
            line: 5,
            column: 129
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "9": {
        loc: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 16
          }
        }, {
          start: {
            line: 6,
            column: 20
          },
          end: {
            line: 6,
            column: 21
          }
        }, {
          start: {
            line: 6,
            column: 25
          },
          end: {
            line: 6,
            column: 62
          }
        }],
        line: 6
      },
      "10": {
        loc: {
          start: {
            line: 8,
            column: 17
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 8,
            column: 22
          }
        }, {
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 41
          }
        }, {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 8
      },
      "11": {
        loc: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "12": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 35
          }
        }, {
          start: {
            line: 9,
            column: 39
          },
          end: {
            line: 9,
            column: 77
          }
        }],
        line: 9
      },
      "13": {
        loc: {
          start: {
            line: 21,
            column: 3
          },
          end: {
            line: 21,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 3
          },
          end: {
            line: 21,
            column: 13
          }
        }, {
          start: {
            line: 21,
            column: 18
          },
          end: {
            line: 21,
            column: 54
          }
        }],
        line: 21
      },
      "14": {
        loc: {
          start: {
            line: 27,
            column: 3
          },
          end: {
            line: 27,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 3
          },
          end: {
            line: 27,
            column: 13
          }
        }, {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 27,
            column: 54
          }
        }],
        line: 27
      },
      "15": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "16": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 85,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 85,
            column: 26
          }
        }, {
          start: {
            line: 85,
            column: 30
          },
          end: {
            line: 85,
            column: 71
          }
        }],
        line: 85
      },
      "17": {
        loc: {
          start: {
            line: 99,
            column: 23
          },
          end: {
            line: 99,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 23
          },
          end: {
            line: 99,
            column: 45
          }
        }, {
          start: {
            line: 99,
            column: 49
          },
          end: {
            line: 99,
            column: 50
          }
        }],
        line: 99
      },
      "18": {
        loc: {
          start: {
            line: 102,
            column: 20
          },
          end: {
            line: 102,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 29
          },
          end: {
            line: 102,
            column: 35
          }
        }, {
          start: {
            line: 102,
            column: 38
          },
          end: {
            line: 102,
            column: 49
          }
        }],
        line: 102
      },
      "19": {
        loc: {
          start: {
            line: 117,
            column: 27
          },
          end: {
            line: 117,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 42
          },
          end: {
            line: 117,
            column: 54
          }
        }, {
          start: {
            line: 117,
            column: 57
          },
          end: {
            line: 117,
            column: 75
          }
        }],
        line: 117
      },
      "20": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 128,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 128,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "21": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: 132,
            column: 13
          },
          end: {
            line: 134,
            column: 9
          }
        }],
        line: 129
      },
      "22": {
        loc: {
          start: {
            line: 130,
            column: 19
          },
          end: {
            line: 130,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 31
          },
          end: {
            line: 130,
            column: 55
          }
        }, {
          start: {
            line: 130,
            column: 58
          },
          end: {
            line: 130,
            column: 75
          }
        }],
        line: 130
      },
      "23": {
        loc: {
          start: {
            line: 133,
            column: 19
          },
          end: {
            line: 133,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 31
          },
          end: {
            line: 133,
            column: 54
          }
        }, {
          start: {
            line: 133,
            column: 57
          },
          end: {
            line: 133,
            column: 73
          }
        }],
        line: 133
      },
      "24": {
        loc: {
          start: {
            line: 143,
            column: 81
          },
          end: {
            line: 143,
            column: 149
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 143,
            column: 106
          },
          end: {
            line: 143,
            column: 141
          }
        }, {
          start: {
            line: 143,
            column: 144
          },
          end: {
            line: 143,
            column: 149
          }
        }],
        line: 143
      },
      "25": {
        loc: {
          start: {
            line: 144,
            column: 28
          },
          end: {
            line: 146,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 22
          },
          end: {
            line: 145,
            column: 62
          }
        }, {
          start: {
            line: 146,
            column: 22
          },
          end: {
            line: 146,
            column: 26
          }
        }],
        line: 144
      },
      "26": {
        loc: {
          start: {
            line: 147,
            column: 24
          },
          end: {
            line: 147,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 50
          },
          end: {
            line: 147,
            column: 65
          }
        }, {
          start: {
            line: 147,
            column: 68
          },
          end: {
            line: 147,
            column: 77
          }
        }],
        line: 147
      },
      "27": {
        loc: {
          start: {
            line: 180,
            column: 20
          },
          end: {
            line: 182,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 20
          },
          end: {
            line: 182,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "28": {
        loc: {
          start: {
            line: 183,
            column: 20
          },
          end: {
            line: 185,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 20
          },
          end: {
            line: 185,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "29": {
        loc: {
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 189,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 189,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "30": {
        loc: {
          start: {
            line: 198,
            column: 20
          },
          end: {
            line: 200,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 20
          },
          end: {
            line: 200,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "31": {
        loc: {
          start: {
            line: 201,
            column: 20
          },
          end: {
            line: 203,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 20
          },
          end: {
            line: 203,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "32": {
        loc: {
          start: {
            line: 205,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/entities/Room.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/entities/Room.ts"],
      sourcesContent: ["import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Join,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \"typeorm\";\nimport type { User } from \"./User\";\nimport type { Crossword } from \"./Crossword\";\nimport type { GameStats } from \"./GameStats\";\nimport type { CachedGameInfo } from \"../services/RedisService\";\n\nexport type GameType = \"1v1\" | \"2v2\" | \"free4all\" | \"time_trial\";\nexport type GameStatus = \"playing\" | \"pending\" | \"finished\" | \"cancelled\";\n\ninterface Clue {\n  number: number;\n  hint: string;\n}\n\nexport enum SquareType {\n  SOLVED,\n  BLANK,\n  BLACK,\n  CIRCLE_BLANK,\n  CIRCLE_SOLVED,\n}\n\nexport enum JoinMethod {\n  CHALLENGE = \"challenge\",\n  RANDOM = \"random\",\n  CLI = \"cli\",\n}\n\nexport interface Square {\n  id: number;\n  squareType: SquareType;\n  letter?: string;\n  gridnumber: number | null;\n  x: number;\n  y: number;\n  downQuestion?: string;\n  acrossQuestion?: string;\n}\n\n@Entity()\nexport class Room {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: \"enum\",\n    enum: [\"1v1\", \"2v2\", \"free4all\", \"time_trial\"],\n    default: \"1v1\",\n  })\n  type: GameType;\n\n  @Column({\n    type: \"enum\",\n    enum: [\"playing\", \"pending\", \"finished\", \"cancelled\"],\n    default: \"pending\",\n  })\n  status: GameStatus;\n\n  @Column({\n    type: \"enum\",\n    enum: JoinMethod,\n    nullable: true,\n  })\n  join_type?: JoinMethod;\n\n  get join(): JoinMethod | undefined {\n    return this.join_type;\n  }\n\n  set join(value: JoinMethod | undefined) {\n    this.join_type = value;\n  }\n\n  @ManyToMany(\"User\", { eager: true })\n  @JoinTable({\n    name: \"room_players\",\n    joinColumn: { name: \"room_id\", referencedColumnName: \"id\" },\n    inverseJoinColumn: { name: \"user_id\", referencedColumnName: \"id\" },\n  })\n  players: User[];\n\n  @ManyToOne(\"Crossword\", { eager: true })\n  @JoinColumn()\n  crossword: Crossword;\n\n  // Store scores as a JSON object with user IDs as keys\n  // TODO: add this data to the GameStats?\n  @Column(\"simple-json\", { default: {} })\n  scores: { [key: number]: number };\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @Column({ type: \"timestamp\", nullable: true })\n  completed_at: Date;\n\n  @Column(\"text\")\n  difficulty: string;\n\n  @Column(\"char\", { array: true, default: \"{}\" })\n  found_letters: string[];\n\n  // @ts-ignore\n  @OneToMany(\"GameStats\", (gameStats) => gameStats.room)\n  stats: GameStats[];\n\n  @Column({ type: \"timestamp\", nullable: true })\n  last_activity_at: Date;\n\n  // Cache for toView result\n  private viewCache: any = null;\n  private lastModified: number = 0;\n  private lastViewUpdate: number = 0;\n\n  // Method to mark the room as modified\n  markModified() {\n    this.lastModified = Date.now();\n    this.viewCache = null;\n  }\n\n  get player_count(): number {\n    return this.players.length;\n  }\n\n  createRoomCache(): CachedGameInfo {\n    const initialGuessCounts = this.players.reduce((acc, player) => {\n      acc[player.id] = {\n        correct: 0,\n        incorrect: 0,\n      };\n      return acc;\n    }, {} as CachedGameInfo[\"userGuessCounts\"]);\n\n    const initialGuessDetails = this.players.reduce((acc, player) => {\n      acc[player.id] = [];\n      return acc;\n    }, {} as CachedGameInfo[\"correctGuessDetails\"]);\n\n    return {\n      lastActivityAt: Date.now(),\n      foundLetters: [...this.found_letters],\n      scores: { ...this.scores },\n      userGuessCounts: initialGuessCounts,\n      correctGuessDetails: initialGuessDetails,\n    };\n  }\n\n  toJSON(foundLetters?: string[], scores?: any): any {\n    // If cache exists and room hasn't been modified, return cached view\n    if (this.viewCache && this.lastModified === this.lastViewUpdate) {\n      return this.viewCache;\n    }\n\n    const view = {\n      id: this.id,\n      created_at: this.created_at,\n      completed_at: this.completed_at,\n      difficulty: this.difficulty,\n      type: this.type,\n      status: this.status,\n      player_count: this.player_count,\n      players: this.players.map((player) => ({\n        id: player.id,\n        username: player.username,\n        score: this.scores[player.id] || 0,\n        eloRating: player.eloRating,\n      })),\n      scores: scores ? scores : this.scores,\n      crossword: {\n        id: this.crossword.id,\n        col_size: this.crossword.col_size,\n        row_size: this.crossword.row_size,\n        gridnums: this.crossword.gridnums,\n        clues: {\n          across: this.crossword.clues.across,\n          down: this.crossword.clues.down,\n        },\n        title: this.crossword.title,\n        author: this.crossword.author,\n        created_by: this.crossword.created_by,\n        creator_link: this.crossword.creator_link,\n      },\n      found_letters: foundLetters ? foundLetters : this.found_letters,\n      board: this.createBoard(),\n      stats: null,\n    };\n\n    // Update cache\n    this.viewCache = view;\n    this.lastViewUpdate = this.lastModified;\n\n    return view;\n  }\n\n  private getSquareType(\n    hasLetter: boolean,\n    isCircled: boolean,\n    black: boolean,\n  ): SquareType {\n    if (black) return SquareType.BLACK;\n    if (hasLetter) {\n      return isCircled ? SquareType.CIRCLE_SOLVED : SquareType.SOLVED;\n    } else {\n      return isCircled ? SquareType.CIRCLE_BLANK : SquareType.BLANK;\n    }\n  }\n\n  private createSquares(): Square[] {\n    return this.found_letters.map((letterCharacter: string, index) => {\n      const x = Math.floor(index / this.crossword.row_size);\n      return {\n        id: index,\n        x,\n        y: index - x * this.crossword.row_size,\n        squareType: this.getSquareType(\n          /[a-zA-z]/.test(letterCharacter),\n          this.crossword.circles ? this.crossword.circles[index] === 1 : false,\n          letterCharacter === \".\",\n        ),\n        gridnumber: parseInt(this.crossword.gridnums[index]) !== 0\n          ? parseInt(this.crossword.gridnums[index])\n          : null,\n        letter: letterCharacter !== \"*\" ? letterCharacter : undefined,\n      } as Square;\n    });\n  }\n\n  private arrayToMatrix<T>(array: T[], row_length: number): T[][] {\n    return Array(Math.ceil(array.length / row_length))\n      .fill(\"\")\n      .reduce((acc, _, index) => {\n        return [...acc, [...array].splice(index * row_length, row_length)];\n      }, [] as T[][]);\n  }\n\n  private createClueArray(clues: string[]): Clue[] {\n    return clues.map((clue) => {\n      const clueArray = clue.split(\".\");\n      const clueNumber = parseInt(clueArray[0]);\n      return { number: clueNumber, hint: clue };\n    });\n  }\n\n  private getClueByQuestionNumber(\n    clueList: Clue[],\n    questionNumber: number | null,\n  ): Clue | undefined {\n    return clueList.find((clue) => clue.number === questionNumber);\n  }\n\n  private createBoard(): Square[][] {\n    const squares = this.createSquares();\n    const board = this.arrayToMatrix(squares, this.crossword.row_size);\n\n    // Add clues to squares\n    const acrossClues = this.createClueArray(this.crossword.clues.across);\n    const downClues = this.createClueArray(this.crossword.clues.down);\n\n    // Populate across clues\n    board.forEach((row, rowIndex) => {\n      row.forEach((square, colIndex) => {\n        // Find most recent non-black square in the row or first square\n        let lastNonBlackSquare: Square | null = square;\n        for (let i = colIndex; i >= 0; i--) {\n          if (row[i].squareType !== SquareType.BLACK) {\n            lastNonBlackSquare = row[i];\n          }\n          if (row[i].squareType === SquareType.BLACK) {\n            break;\n          }\n        }\n\n        if (lastNonBlackSquare) {\n          square.acrossQuestion = this.getClueByQuestionNumber(\n            acrossClues,\n            lastNonBlackSquare.gridnumber,\n          )?.hint;\n        }\n      });\n    });\n    // Populate down clues\n\n    board.forEach((row, rowIndex) => {\n      row.forEach((square, colIndex) => {\n        // Find most recent non-black square in the row or first square\n        let lastNonBlackSquare: Square | null = square;\n        for (let i = rowIndex; i >= 0; i--) {\n          if (board[i][colIndex].squareType !== SquareType.BLACK) {\n            lastNonBlackSquare = board[i][colIndex];\n          }\n          if (board[i][colIndex].squareType === SquareType.BLACK) {\n            break;\n          }\n        }\n        if (lastNonBlackSquare) {\n          square.downQuestion = this.getClueByQuestionNumber(\n            downClues,\n            lastNonBlackSquare.gridnumber,\n          )?.hint;\n        }\n      });\n    });\n\n    return board;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7c1a3796c6bd833cf1fc7400e17de50f9b3a2b7f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ci5wr56uw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ci5wr56uw();
var __decorate =
/* istanbul ignore next */
(cov_1ci5wr56uw().s[0]++,
/* istanbul ignore next */
(cov_1ci5wr56uw().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1ci5wr56uw().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_1ci5wr56uw().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_1ci5wr56uw().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_1ci5wr56uw().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_1ci5wr56uw().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_1ci5wr56uw().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_1ci5wr56uw().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_1ci5wr56uw().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_1ci5wr56uw().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_1ci5wr56uw().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_1ci5wr56uw().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1ci5wr56uw().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_1ci5wr56uw().b[3][0]++;
    cov_1ci5wr56uw().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_1ci5wr56uw().b[3][1]++;
    cov_1ci5wr56uw().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_1ci5wr56uw().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_1ci5wr56uw().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_1ci5wr56uw().b[5][0]++;
        cov_1ci5wr56uw().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_1ci5wr56uw().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_1ci5wr56uw().s[9]++;
  return /* istanbul ignore next */(cov_1ci5wr56uw().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_1ci5wr56uw().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_1ci5wr56uw().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_1ci5wr56uw().s[10]++,
/* istanbul ignore next */
(cov_1ci5wr56uw().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1ci5wr56uw().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_1ci5wr56uw().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_1ci5wr56uw().f[1]++;
  cov_1ci5wr56uw().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_1ci5wr56uw().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1ci5wr56uw().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_1ci5wr56uw().b[11][0]++;
    cov_1ci5wr56uw().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_1ci5wr56uw().b[11][1]++;
  }
}));
/* istanbul ignore next */
cov_1ci5wr56uw().s[13]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ci5wr56uw().s[14]++;
exports.Room = exports.JoinMethod = exports.SquareType = void 0;
const typeorm_1 =
/* istanbul ignore next */
(cov_1ci5wr56uw().s[15]++, require("typeorm"));
var SquareType;
/* istanbul ignore next */
cov_1ci5wr56uw().s[16]++;
(function (SquareType) {
  /* istanbul ignore next */
  cov_1ci5wr56uw().f[2]++;
  cov_1ci5wr56uw().s[17]++;
  SquareType[SquareType["SOLVED"] = 0] = "SOLVED";
  /* istanbul ignore next */
  cov_1ci5wr56uw().s[18]++;
  SquareType[SquareType["BLANK"] = 1] = "BLANK";
  /* istanbul ignore next */
  cov_1ci5wr56uw().s[19]++;
  SquareType[SquareType["BLACK"] = 2] = "BLACK";
  /* istanbul ignore next */
  cov_1ci5wr56uw().s[20]++;
  SquareType[SquareType["CIRCLE_BLANK"] = 3] = "CIRCLE_BLANK";
  /* istanbul ignore next */
  cov_1ci5wr56uw().s[21]++;
  SquareType[SquareType["CIRCLE_SOLVED"] = 4] = "CIRCLE_SOLVED";
})(
/* istanbul ignore next */
(cov_1ci5wr56uw().b[13][0]++, SquareType) ||
/* istanbul ignore next */
(cov_1ci5wr56uw().b[13][1]++, exports.SquareType = SquareType = {}));
var JoinMethod;
/* istanbul ignore next */
cov_1ci5wr56uw().s[22]++;
(function (JoinMethod) {
  /* istanbul ignore next */
  cov_1ci5wr56uw().f[3]++;
  cov_1ci5wr56uw().s[23]++;
  JoinMethod["CHALLENGE"] = "challenge";
  /* istanbul ignore next */
  cov_1ci5wr56uw().s[24]++;
  JoinMethod["RANDOM"] = "random";
  /* istanbul ignore next */
  cov_1ci5wr56uw().s[25]++;
  JoinMethod["CLI"] = "cli";
})(
/* istanbul ignore next */
(cov_1ci5wr56uw().b[14][0]++, JoinMethod) ||
/* istanbul ignore next */
(cov_1ci5wr56uw().b[14][1]++, exports.JoinMethod = JoinMethod = {}));
/* istanbul ignore next */
cov_1ci5wr56uw().s[26]++;
let Room = class Room {
  id;
  type;
  status;
  join_type;
  get join() {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[4]++;
    cov_1ci5wr56uw().s[27]++;
    return this.join_type;
  }
  set join(value) {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[5]++;
    cov_1ci5wr56uw().s[28]++;
    this.join_type = value;
  }
  players;
  crossword;
  // Store scores as a JSON object with user IDs as keys
  // TODO: add this data to the GameStats?
  scores;
  created_at;
  completed_at;
  difficulty;
  found_letters;
  // @ts-ignore
  stats;
  last_activity_at;
  // Cache for toView result
  viewCache =
  /* istanbul ignore next */
  (cov_1ci5wr56uw().s[29]++, null);
  lastModified =
  /* istanbul ignore next */
  (cov_1ci5wr56uw().s[30]++, 0);
  lastViewUpdate =
  /* istanbul ignore next */
  (cov_1ci5wr56uw().s[31]++, 0);
  // Method to mark the room as modified
  markModified() {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[6]++;
    cov_1ci5wr56uw().s[32]++;
    this.lastModified = Date.now();
    /* istanbul ignore next */
    cov_1ci5wr56uw().s[33]++;
    this.viewCache = null;
  }
  get player_count() {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[7]++;
    cov_1ci5wr56uw().s[34]++;
    return this.players.length;
  }
  createRoomCache() {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[8]++;
    const initialGuessCounts =
    /* istanbul ignore next */
    (cov_1ci5wr56uw().s[35]++, this.players.reduce((acc, player) => {
      /* istanbul ignore next */
      cov_1ci5wr56uw().f[9]++;
      cov_1ci5wr56uw().s[36]++;
      acc[player.id] = {
        correct: 0,
        incorrect: 0
      };
      /* istanbul ignore next */
      cov_1ci5wr56uw().s[37]++;
      return acc;
    }, {}));
    const initialGuessDetails =
    /* istanbul ignore next */
    (cov_1ci5wr56uw().s[38]++, this.players.reduce((acc, player) => {
      /* istanbul ignore next */
      cov_1ci5wr56uw().f[10]++;
      cov_1ci5wr56uw().s[39]++;
      acc[player.id] = [];
      /* istanbul ignore next */
      cov_1ci5wr56uw().s[40]++;
      return acc;
    }, {}));
    /* istanbul ignore next */
    cov_1ci5wr56uw().s[41]++;
    return {
      lastActivityAt: Date.now(),
      foundLetters: [...this.found_letters],
      scores: {
        ...this.scores
      },
      userGuessCounts: initialGuessCounts,
      correctGuessDetails: initialGuessDetails
    };
  }
  toJSON(foundLetters, scores) {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[11]++;
    cov_1ci5wr56uw().s[42]++;
    // If cache exists and room hasn't been modified, return cached view
    if (
    /* istanbul ignore next */
    (cov_1ci5wr56uw().b[16][0]++, this.viewCache) &&
    /* istanbul ignore next */
    (cov_1ci5wr56uw().b[16][1]++, this.lastModified === this.lastViewUpdate)) {
      /* istanbul ignore next */
      cov_1ci5wr56uw().b[15][0]++;
      cov_1ci5wr56uw().s[43]++;
      return this.viewCache;
    } else
    /* istanbul ignore next */
    {
      cov_1ci5wr56uw().b[15][1]++;
    }
    const view =
    /* istanbul ignore next */
    (cov_1ci5wr56uw().s[44]++, {
      id: this.id,
      created_at: this.created_at,
      completed_at: this.completed_at,
      difficulty: this.difficulty,
      type: this.type,
      status: this.status,
      player_count: this.player_count,
      players: this.players.map(player => {
        /* istanbul ignore next */
        cov_1ci5wr56uw().f[12]++;
        cov_1ci5wr56uw().s[45]++;
        return {
          id: player.id,
          username: player.username,
          score:
          /* istanbul ignore next */
          (cov_1ci5wr56uw().b[17][0]++, this.scores[player.id]) ||
          /* istanbul ignore next */
          (cov_1ci5wr56uw().b[17][1]++, 0),
          eloRating: player.eloRating
        };
      }),
      scores: scores ?
      /* istanbul ignore next */
      (cov_1ci5wr56uw().b[18][0]++, scores) :
      /* istanbul ignore next */
      (cov_1ci5wr56uw().b[18][1]++, this.scores),
      crossword: {
        id: this.crossword.id,
        col_size: this.crossword.col_size,
        row_size: this.crossword.row_size,
        gridnums: this.crossword.gridnums,
        clues: {
          across: this.crossword.clues.across,
          down: this.crossword.clues.down
        },
        title: this.crossword.title,
        author: this.crossword.author,
        created_by: this.crossword.created_by,
        creator_link: this.crossword.creator_link
      },
      found_letters: foundLetters ?
      /* istanbul ignore next */
      (cov_1ci5wr56uw().b[19][0]++, foundLetters) :
      /* istanbul ignore next */
      (cov_1ci5wr56uw().b[19][1]++, this.found_letters),
      board: this.createBoard(),
      stats: null
    });
    // Update cache
    /* istanbul ignore next */
    cov_1ci5wr56uw().s[46]++;
    this.viewCache = view;
    /* istanbul ignore next */
    cov_1ci5wr56uw().s[47]++;
    this.lastViewUpdate = this.lastModified;
    /* istanbul ignore next */
    cov_1ci5wr56uw().s[48]++;
    return view;
  }
  getSquareType(hasLetter, isCircled, black) {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[13]++;
    cov_1ci5wr56uw().s[49]++;
    if (black) {
      /* istanbul ignore next */
      cov_1ci5wr56uw().b[20][0]++;
      cov_1ci5wr56uw().s[50]++;
      return SquareType.BLACK;
    } else
    /* istanbul ignore next */
    {
      cov_1ci5wr56uw().b[20][1]++;
    }
    cov_1ci5wr56uw().s[51]++;
    if (hasLetter) {
      /* istanbul ignore next */
      cov_1ci5wr56uw().b[21][0]++;
      cov_1ci5wr56uw().s[52]++;
      return isCircled ?
      /* istanbul ignore next */
      (cov_1ci5wr56uw().b[22][0]++, SquareType.CIRCLE_SOLVED) :
      /* istanbul ignore next */
      (cov_1ci5wr56uw().b[22][1]++, SquareType.SOLVED);
    } else {
      /* istanbul ignore next */
      cov_1ci5wr56uw().b[21][1]++;
      cov_1ci5wr56uw().s[53]++;
      return isCircled ?
      /* istanbul ignore next */
      (cov_1ci5wr56uw().b[23][0]++, SquareType.CIRCLE_BLANK) :
      /* istanbul ignore next */
      (cov_1ci5wr56uw().b[23][1]++, SquareType.BLANK);
    }
  }
  createSquares() {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[14]++;
    cov_1ci5wr56uw().s[54]++;
    return this.found_letters.map((letterCharacter, index) => {
      /* istanbul ignore next */
      cov_1ci5wr56uw().f[15]++;
      const x =
      /* istanbul ignore next */
      (cov_1ci5wr56uw().s[55]++, Math.floor(index / this.crossword.row_size));
      /* istanbul ignore next */
      cov_1ci5wr56uw().s[56]++;
      return {
        id: index,
        x,
        y: index - x * this.crossword.row_size,
        squareType: this.getSquareType(/[a-zA-z]/.test(letterCharacter), this.crossword.circles ?
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[24][0]++, this.crossword.circles[index] === 1) :
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[24][1]++, false), letterCharacter === "."),
        gridnumber: parseInt(this.crossword.gridnums[index]) !== 0 ?
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[25][0]++, parseInt(this.crossword.gridnums[index])) :
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[25][1]++, null),
        letter: letterCharacter !== "*" ?
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[26][0]++, letterCharacter) :
        /* istanbul ignore next */
        (cov_1ci5wr56uw().b[26][1]++, undefined)
      };
    });
  }
  arrayToMatrix(array, row_length) {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[16]++;
    cov_1ci5wr56uw().s[57]++;
    return Array(Math.ceil(array.length / row_length)).fill("").reduce((acc, _, index) => {
      /* istanbul ignore next */
      cov_1ci5wr56uw().f[17]++;
      cov_1ci5wr56uw().s[58]++;
      return [...acc, [...array].splice(index * row_length, row_length)];
    }, []);
  }
  createClueArray(clues) {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[18]++;
    cov_1ci5wr56uw().s[59]++;
    return clues.map(clue => {
      /* istanbul ignore next */
      cov_1ci5wr56uw().f[19]++;
      const clueArray =
      /* istanbul ignore next */
      (cov_1ci5wr56uw().s[60]++, clue.split("."));
      const clueNumber =
      /* istanbul ignore next */
      (cov_1ci5wr56uw().s[61]++, parseInt(clueArray[0]));
      /* istanbul ignore next */
      cov_1ci5wr56uw().s[62]++;
      return {
        number: clueNumber,
        hint: clue
      };
    });
  }
  getClueByQuestionNumber(clueList, questionNumber) {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[20]++;
    cov_1ci5wr56uw().s[63]++;
    return clueList.find(clue => {
      /* istanbul ignore next */
      cov_1ci5wr56uw().f[21]++;
      cov_1ci5wr56uw().s[64]++;
      return clue.number === questionNumber;
    });
  }
  createBoard() {
    /* istanbul ignore next */
    cov_1ci5wr56uw().f[22]++;
    const squares =
    /* istanbul ignore next */
    (cov_1ci5wr56uw().s[65]++, this.createSquares());
    const board =
    /* istanbul ignore next */
    (cov_1ci5wr56uw().s[66]++, this.arrayToMatrix(squares, this.crossword.row_size));
    // Add clues to squares
    const acrossClues =
    /* istanbul ignore next */
    (cov_1ci5wr56uw().s[67]++, this.createClueArray(this.crossword.clues.across));
    const downClues =
    /* istanbul ignore next */
    (cov_1ci5wr56uw().s[68]++, this.createClueArray(this.crossword.clues.down));
    // Populate across clues
    /* istanbul ignore next */
    cov_1ci5wr56uw().s[69]++;
    board.forEach((row, rowIndex) => {
      /* istanbul ignore next */
      cov_1ci5wr56uw().f[23]++;
      cov_1ci5wr56uw().s[70]++;
      row.forEach((square, colIndex) => {
        /* istanbul ignore next */
        cov_1ci5wr56uw().f[24]++;
        // Find most recent non-black square in the row or first square
        let lastNonBlackSquare =
        /* istanbul ignore next */
        (cov_1ci5wr56uw().s[71]++, square);
        /* istanbul ignore next */
        cov_1ci5wr56uw().s[72]++;
        for (let i =
        /* istanbul ignore next */
        (cov_1ci5wr56uw().s[73]++, colIndex); i >= 0; i--) {
          /* istanbul ignore next */
          cov_1ci5wr56uw().s[74]++;
          if (row[i].squareType !== SquareType.BLACK) {
            /* istanbul ignore next */
            cov_1ci5wr56uw().b[27][0]++;
            cov_1ci5wr56uw().s[75]++;
            lastNonBlackSquare = row[i];
          } else
          /* istanbul ignore next */
          {
            cov_1ci5wr56uw().b[27][1]++;
          }
          cov_1ci5wr56uw().s[76]++;
          if (row[i].squareType === SquareType.BLACK) {
            /* istanbul ignore next */
            cov_1ci5wr56uw().b[28][0]++;
            cov_1ci5wr56uw().s[77]++;
            break;
          } else
          /* istanbul ignore next */
          {
            cov_1ci5wr56uw().b[28][1]++;
          }
        }
        /* istanbul ignore next */
        cov_1ci5wr56uw().s[78]++;
        if (lastNonBlackSquare) {
          /* istanbul ignore next */
          cov_1ci5wr56uw().b[29][0]++;
          cov_1ci5wr56uw().s[79]++;
          square.acrossQuestion = this.getClueByQuestionNumber(acrossClues, lastNonBlackSquare.gridnumber)?.hint;
        } else
        /* istanbul ignore next */
        {
          cov_1ci5wr56uw().b[29][1]++;
        }
      });
    });
    // Populate down clues
    /* istanbul ignore next */
    cov_1ci5wr56uw().s[80]++;
    board.forEach((row, rowIndex) => {
      /* istanbul ignore next */
      cov_1ci5wr56uw().f[25]++;
      cov_1ci5wr56uw().s[81]++;
      row.forEach((square, colIndex) => {
        /* istanbul ignore next */
        cov_1ci5wr56uw().f[26]++;
        // Find most recent non-black square in the row or first square
        let lastNonBlackSquare =
        /* istanbul ignore next */
        (cov_1ci5wr56uw().s[82]++, square);
        /* istanbul ignore next */
        cov_1ci5wr56uw().s[83]++;
        for (let i =
        /* istanbul ignore next */
        (cov_1ci5wr56uw().s[84]++, rowIndex); i >= 0; i--) {
          /* istanbul ignore next */
          cov_1ci5wr56uw().s[85]++;
          if (board[i][colIndex].squareType !== SquareType.BLACK) {
            /* istanbul ignore next */
            cov_1ci5wr56uw().b[30][0]++;
            cov_1ci5wr56uw().s[86]++;
            lastNonBlackSquare = board[i][colIndex];
          } else
          /* istanbul ignore next */
          {
            cov_1ci5wr56uw().b[30][1]++;
          }
          cov_1ci5wr56uw().s[87]++;
          if (board[i][colIndex].squareType === SquareType.BLACK) {
            /* istanbul ignore next */
            cov_1ci5wr56uw().b[31][0]++;
            cov_1ci5wr56uw().s[88]++;
            break;
          } else
          /* istanbul ignore next */
          {
            cov_1ci5wr56uw().b[31][1]++;
          }
        }
        /* istanbul ignore next */
        cov_1ci5wr56uw().s[89]++;
        if (lastNonBlackSquare) {
          /* istanbul ignore next */
          cov_1ci5wr56uw().b[32][0]++;
          cov_1ci5wr56uw().s[90]++;
          square.downQuestion = this.getClueByQuestionNumber(downClues, lastNonBlackSquare.gridnumber)?.hint;
        } else
        /* istanbul ignore next */
        {
          cov_1ci5wr56uw().b[32][1]++;
        }
      });
    });
    /* istanbul ignore next */
    cov_1ci5wr56uw().s[91]++;
    return board;
  }
};
/* istanbul ignore next */
cov_1ci5wr56uw().s[92]++;
exports.Room = Room;
/* istanbul ignore next */
cov_1ci5wr56uw().s[93]++;
__decorate([(0, typeorm_1.PrimaryGeneratedColumn)(), __metadata("design:type", Number)], Room.prototype, "id", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[94]++;
__decorate([(0, typeorm_1.Column)({
  type: "enum",
  enum: ["1v1", "2v2", "free4all", "time_trial"],
  default: "1v1"
}), __metadata("design:type", String)], Room.prototype, "type", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[95]++;
__decorate([(0, typeorm_1.Column)({
  type: "enum",
  enum: ["playing", "pending", "finished", "cancelled"],
  default: "pending"
}), __metadata("design:type", String)], Room.prototype, "status", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[96]++;
__decorate([(0, typeorm_1.Column)({
  type: "enum",
  enum: JoinMethod,
  nullable: true
}), __metadata("design:type", String)], Room.prototype, "join_type", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[97]++;
__decorate([(0, typeorm_1.ManyToMany)("User", {
  eager: true
}), (0, typeorm_1.JoinTable)({
  name: "room_players",
  joinColumn: {
    name: "room_id",
    referencedColumnName: "id"
  },
  inverseJoinColumn: {
    name: "user_id",
    referencedColumnName: "id"
  }
}), __metadata("design:type", Array)], Room.prototype, "players", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[98]++;
__decorate([(0, typeorm_1.ManyToOne)("Crossword", {
  eager: true
}), (0, typeorm_1.JoinColumn)(), __metadata("design:type", Function)], Room.prototype, "crossword", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[99]++;
__decorate([(0, typeorm_1.Column)("simple-json", {
  default: {}
}), __metadata("design:type", Object)], Room.prototype, "scores", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[100]++;
__decorate([(0, typeorm_1.CreateDateColumn)(), __metadata("design:type", Date)], Room.prototype, "created_at", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[101]++;
__decorate([(0, typeorm_1.Column)({
  type: "timestamp",
  nullable: true
}), __metadata("design:type", Date)], Room.prototype, "completed_at", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[102]++;
__decorate([(0, typeorm_1.Column)("text"), __metadata("design:type", String)], Room.prototype, "difficulty", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[103]++;
__decorate([(0, typeorm_1.Column)("char", {
  array: true,
  default: "{}"
}), __metadata("design:type", Array)], Room.prototype, "found_letters", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[104]++;
__decorate([(0, typeorm_1.OneToMany)("GameStats", gameStats => {
  /* istanbul ignore next */
  cov_1ci5wr56uw().f[27]++;
  cov_1ci5wr56uw().s[105]++;
  return gameStats.room;
}), __metadata("design:type", Array)], Room.prototype, "stats", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[106]++;
__decorate([(0, typeorm_1.Column)({
  type: "timestamp",
  nullable: true
}), __metadata("design:type", Date)], Room.prototype, "last_activity_at", void 0);
/* istanbul ignore next */
cov_1ci5wr56uw().s[107]++;
exports.Room = Room = __decorate([(0, typeorm_1.Entity)()], Room);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
