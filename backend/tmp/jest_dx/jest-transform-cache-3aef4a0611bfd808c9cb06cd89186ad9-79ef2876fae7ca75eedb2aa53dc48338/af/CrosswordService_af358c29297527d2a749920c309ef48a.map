{"version":3,"names":["Crossword_1","cov_1iit7kbh91","s","require","api_1","fs","__importStar","path","findConfigDir_1","config_1","CrosswordService","ormConnection","constructor","f","getCrosswords","page","limit","dow","col_size","row_size","repository","getRepository","Crossword","whereConditions","b","items","total","findAndCount","where","skip","take","loadCrosswords","crosswordsDir","findDir","crosswords","loadFiles","dir","files","readdirSync","file","filePath","join","stat","statSync","isDirectory","endsWith","data","JSON","parse","readFileSync","Date","config","game","crossword","firstCrosswordDate","push","crosswordEntity","create","save","console","log","createFoundLettersTemplate","crosswordId","findOneBy","id","NotFoundError","grid","map","value","replace","getCrosswordByDifficulty","difficulty","days","getDaysByDifficulty","createQueryBuilder","andWhere","firstDate","orderBy","getOne","toLowerCase","checkGuess","coordinates","guess","guessPosition","x","y","toUpperCase","e","exports"],"sources":["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/services/CrosswordService.ts"],"sourcesContent":["import { DataSource } from \"typeorm\";\nimport { Crossword } from \"../entities/Crossword\";\nimport { Room } from \"../entities/Room\";\nimport { NotFoundError } from \"../errors/api\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { findDir } from \"../scripts/findConfigDir\";\nimport { config } from \"../config/config\";\n\nexport class CrosswordService {\n  private ormConnection: DataSource;\n\n  constructor(ormConnection: DataSource) {\n    this.ormConnection = ormConnection;\n  }\n\n  async getCrosswords(\n    page: number,\n    limit: number,\n    dow?: string,\n    col_size?: number,\n    row_size?: number,\n  ) {\n    const repository = this.ormConnection.getRepository(Crossword);\n    const whereConditions: any = {};\n\n    if (dow) {\n      whereConditions.dow = dow;\n    }\n\n    if (col_size) {\n      whereConditions.col_size = col_size;\n    }\n\n    if (row_size) {\n      whereConditions.row_size = row_size;\n    }\n\n    const [items, total] = await repository.findAndCount({\n      where: whereConditions,\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    return { items, total, page, limit };\n  }\n\n  async loadCrosswords() {\n    const repository = await this.ormConnection.getRepository(Crossword);\n\n    const crosswordsDir = findDir(\"../../\", \"crosswords\");\n    const crosswords = [];\n\n    const loadFiles = (dir: string) => {\n      const files = fs.readdirSync(dir);\n      for (const file of files) {\n        const filePath = path.join(dir, file);\n        const stat = fs.statSync(filePath);\n        if (stat.isDirectory()) {\n          loadFiles(filePath);\n        } else if (filePath.endsWith(\".json\")) {\n          const data = JSON.parse(fs.readFileSync(filePath, \"utf-8\"));\n\n          if (\n            new Date(data[\"date\"]) <\n              new Date(config.game.crossword.firstCrosswordDate)\n          ) {\n            continue;\n          }\n\n          data[\"col_size\"] = data[\"size\"][\"cols\"];\n          data[\"row_size\"] = data[\"size\"][\"rows\"];\n\n          if (data[\"shadecircles\"]) {\n            data[\"shadecircles\"] = true;\n          } else {\n            data[\"shadecircles\"] = false;\n          }\n\n          const crossword = { ...data };\n          crosswords.push(crossword);\n        }\n      }\n    };\n\n    loadFiles(crosswordsDir);\n\n    for (const crossword of crosswords) {\n      const crosswordEntity = repository.create(crossword);\n      await repository.save(crosswordEntity);\n    }\n\n    console.log(\"Crosswords loaded successfully\");\n  }\n\n  async createFoundLettersTemplate(crosswordId: number): Promise<string[]> {\n    const repository = this.ormConnection.getRepository(Crossword);\n    const crossword = await repository.findOneBy({ id: crosswordId });\n\n    if (!crossword) {\n      throw new NotFoundError(\"Crossword not found\");\n    }\n\n    return crossword.grid.map((value) => value.replace(/[A-Za-z]/g, \"*\"));\n  }\n\n  async getCrosswordByDifficulty(difficulty: string): Promise<Crossword> {\n    const days = this.getDaysByDifficulty(difficulty);\n    const crossword = await this.ormConnection\n      .getRepository(Crossword)\n      .createQueryBuilder(\"crossword\")\n      .where(\"crossword.dow IN (:...days)\", { days })\n      .andWhere(\"crossword.date >= :firstDate\", {\n        firstDate: new Date(config.game.crossword.firstCrosswordDate),\n      })\n      .orderBy(\"RANDOM()\")\n      .getOne();\n\n    return crossword;\n  }\n\n  private getDaysByDifficulty(difficulty: string): string[] {\n    switch (difficulty.toLowerCase()) {\n      case \"easy\":\n        return [\"Monday\", \"Tuesday\"];\n      case \"medium\":\n        return [\"Wednesday\", \"Thursday\"];\n      case \"hard\":\n        return [\"Friday\", \"Saturday\"];\n      default:\n        throw new NotFoundError(\"Invalid difficulty\");\n    }\n  }\n\n  checkGuess(\n    crossword: Crossword,\n    coordinates: { x: number; y: number },\n    guess: string,\n  ): boolean {\n    const guessPosition = coordinates.x * crossword.col_size + coordinates.y;\n    try {\n      return (\n        crossword.grid[guessPosition].toUpperCase() === guess.toUpperCase()\n      );\n    } catch (e) {\n      throw new NotFoundError(\"Invalid coordinates\");\n    }\n  }\n}\n"],"mappingscAAA,GAAAC,CAAA,QAAAC,OAAA;AAEA,MAAAC,KAAA;AAAA;AAAA,CAAAH,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAE,EAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,QAAAI,YAAA,CAAAH,OAAA;AACA,MAAAI,IAAA;AAAA;AAAA,CAAAN,cAAA,GAAAC,CAAA,QAAAI,YAAA,CAAAH,OAAA;AACA,MAAAK,eAAA;AAAA;AAAA,CAAAP,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAM,QAAA;AAAA;AAAA,CAAAR,cAAA,GAAAC,CAAA,QAAAC,OAAA;AAEA,MAAaO,gBAAgB;EACnBC,aAAa;EAErBC,YAAYD,aAAyB;IAAA;IAAAV,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAC,CAAA;IACnC,IAAI,CAACS,aAAa,GAAGA,aAAa;EACpC;EAEA,MAAMG,aAAaA,CACjBC,IAAY,EACZC,KAAa,EACbC,GAAY,EACZC,QAAiB,EACjBC,QAAiB;IAAA;IAAAlB,cAAA,GAAAY,CAAA;IAEjB,MAAMO,UAAU;IAAA;IAAA,CAAAnB,cAAA,GAAAC,CAAA,QAAG,IAAI,CAACS,aAAa,CAACU,aAAa,CAACrB,WAAA,CAAAsB,SAAS,CAAC;IAC9D,MAAMC,eAAe;IAAA;IAAA,CAAAtB,cAAA,GAAAC,CAAA,QAAQ,EAAE;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAEhC,IAAIe,GAAG,EAAE;MAAA;MAAAhB,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAC,CAAA;MACPqB,eAAe,CAACN,GAAG,GAAGA,GAAG;IAC3B,CAAC;IAAA;IAAA;MAAAhB,cAAA,GAAAuB,CAAA;IAAA;IAAAvB,cAAA,GAAAC,CAAA;IAED,IAAIgB,QAAQ,EAAE;MAAA;MAAAjB,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAC,CAAA;MACZqB,eAAe,CAACL,QAAQ,GAAGA,QAAQ;IACrC,CAAC;IAAA;IAAA;MAAAjB,cAAA,GAAAuB,CAAA;IAAA;IAAAvB,cAAA,GAAAC,CAAA;IAED,IAAIiB,QAAQ,EAAE;MAAA;MAAAlB,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAC,CAAA;MACZqB,eAAe,CAACJ,QAAQ,GAAGA,QAAQ;IACrC,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAAuB,CAAA;IAAA;IAED,MAAM,CAACC,KAAK,EAAEC,KAAK,CAAC;IAAA;IAAA,CAAAzB,cAAA,GAAAC,CAAA,QAAG,MAAMkB,UAAU,CAACO,YAAY,CAAC;MACnDC,KAAK,EAAEL,eAAe;MACtBM,IAAI,EAAE,CAACd,IAAI,GAAG,CAAC,IAAIC,KAAK;MACxBc,IAAI,EAAEd;KACP,CAAC;IAAC;IAAAf,cAAA,GAAAC,CAAA;IAEH,OAAO;MAAEuB,KAAK;MAAEC,KAAK;MAAEX,IAAI;MAAEC;IAAK,CAAE;EACtC;EAEA,MAAMe,cAAcA,CAAA;IAAA;IAAA9B,cAAA,GAAAY,CAAA;IAClB,MAAMO,UAAU;IAAA;IAAA,CAAAnB,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,aAAa,CAACU,aAAa,CAACrB,WAAA,CAAAsB,SAAS,CAAC;IAEpE,MAAMU,aAAa;IAAA;IAAA,CAAA/B,cAAA,GAAAC,CAAA,QAAG,IAAAM,eAAA,CAAAyB,OAAO,EAAC,QAAQ,EAAE,YAAY,CAAC;IACrD,MAAMC,UAAU;IAAA;IAAA,CAAAjC,cAAA,GAAAC,CAAA,QAAG,EAAE;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAEtB,MAAMiC,SAAS,GAAIC,GAAW,IAAI;MAAA;MAAAnC,cAAA,GAAAY,CAAA;MAChC,MAAMwB,KAAK;MAAA;MAAA,CAAApC,cAAA,GAAAC,CAAA,QAAGG,EAAE,CAACiC,WAAW,CAACF,GAAG,CAAC;MAAC;MAAAnC,cAAA,GAAAC,CAAA;MAClC,KAAK,MAAMqC,IAAI,IAAIF,KAAK,EAAE;QACxB,MAAMG,QAAQ;QAAA;QAAA,CAAAvC,cAAA,GAAAC,CAAA,QAAGK,IAAI,CAACkC,IAAI,CAACL,GAAG,EAAEG,IAAI,CAAC;QACrC,MAAMG,IAAI;QAAA;QAAA,CAAAzC,cAAA,GAAAC,CAAA,QAAGG,EAAE,CAACsC,QAAQ,CAACH,QAAQ,CAAC;QAAC;QAAAvC,cAAA,GAAAC,CAAA;QACnC,IAAIwC,IAAI,CAACE,WAAW,EAAE,EAAE;UAAA;UAAA3C,cAAA,GAAAuB,CAAA;UAAAvB,cAAA,GAAAC,CAAA;UACtBiC,SAAS,CAACK,QAAQ,CAAC;QACrB,CAAC,MAAM;UAAA;UAAAvC,cAAA,GAAAuB,CAAA;UAAAvB,cAAA,GAAAC,CAAA;UAAA,IAAIsC,QAAQ,CAACK,QAAQ,CAAC,OAAO,CAAC,EAAE;YAAA;YAAA5C,cAAA,GAAAuB,CAAA;YACrC,MAAMsB,IAAI;YAAA;YAAA,CAAA7C,cAAA,GAAAC,CAAA,QAAG6C,IAAI,CAACC,KAAK,CAAC3C,EAAE,CAAC4C,YAAY,CAACT,QAAQ,EAAE,OAAO,CAAC,CAAC;YAAC;YAAAvC,cAAA,GAAAC,CAAA;YAE5D,IACE,IAAIgD,IAAI,CAACJ,IAAI,CAAC,MAAM,CAAC,CAAC,GACpB,IAAII,IAAI,CAACzC,QAAA,CAAA0C,MAAM,CAACC,IAAI,CAACC,SAAS,CAACC,kBAAkB,CAAC,EACpD;cAAA;cAAArD,cAAA,GAAAuB,CAAA;cAAAvB,cAAA,GAAAC,CAAA;cACA;YACF,CAAC;YAAA;YAAA;cAAAD,cAAA,GAAAuB,CAAA;YAAA;YAAAvB,cAAA,GAAAC,CAAA;YAED4C,IAAI,CAAC,UAAU,CAAC,GAAGA,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;YAAC;YAAA7C,cAAA,GAAAC,CAAA;YACxC4C,IAAI,CAAC,UAAU,CAAC,GAAGA,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;YAAC;YAAA7C,cAAA,GAAAC,CAAA;YAExC,IAAI4C,IAAI,CAAC,cAAc,CAAC,EAAE;cAAA;cAAA7C,cAAA,GAAAuB,CAAA;cAAAvB,cAAA,GAAAC,CAAA;cACxB4C,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI;YAC7B,CAAC,MAAM;cAAA;cAAA7C,cAAA,GAAAuB,CAAA;cAAAvB,cAAA,GAAAC,CAAA;cACL4C,IAAI,CAAC,cAAc,CAAC,GAAG,KAAK;YAC9B;YAEA,MAAMO,SAAS;YAAA;YAAA,CAAApD,cAAA,GAAAC,CAAA,QAAG;cAAE,GAAG4C;YAAI,CAAE;YAAC;YAAA7C,cAAA,GAAAC,CAAA;YAC9BgC,UAAU,CAACqB,IAAI,CAACF,SAAS,CAAC;UAC5B,CAAC;UAAA;UAAA;YAAApD,cAAA,GAAAuB,CAAA;UAAA;QAAD;MACF;IACF,CAAC;IAAC;IAAAvB,cAAA,GAAAC,CAAA;IAEFiC,SAAS,CAACH,aAAa,CAAC;IAAC;IAAA/B,cAAA,GAAAC,CAAA;IAEzB,KAAK,MAAMmD,SAAS,IAAInB,UAAU,EAAE;MAClC,MAAMsB,eAAe;MAAA;MAAA,CAAAvD,cAAA,GAAAC,CAAA,QAAGkB,UAAU,CAACqC,MAAM,CAACJ,SAAS,CAAC;MAAC;MAAApD,cAAA,GAAAC,CAAA;MACrD,MAAMkB,UAAU,CAACsC,IAAI,CAACF,eAAe,CAAC;IACxC;IAAC;IAAAvD,cAAA,GAAAC,CAAA;IAEDyD,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC/C;EAEA,MAAMC,0BAA0BA,CAACC,WAAmB;IAAA;IAAA7D,cAAA,GAAAY,CAAA;IAClD,MAAMO,UAAU;IAAA;IAAA,CAAAnB,cAAA,GAAAC,CAAA,QAAG,IAAI,CAACS,aAAa,CAACU,aAAa,CAACrB,WAAA,CAAAsB,SAAS,CAAC;IAC9D,MAAM+B,SAAS;IAAA;IAAA,CAAApD,cAAA,GAAAC,CAAA,QAAG,MAAMkB,UAAU,CAAC2C,SAAS,CAAC;MAAEC,EAAE,EAAEF;IAAW,CAAE,CAAC;IAAC;IAAA7D,cAAA,GAAAC,CAAA;IAElE,IAAI,CAACmD,SAAS,EAAE;MAAA;MAAApD,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAC,CAAA;MACd,MAAM,IAAIE,KAAA,CAAA6D,aAAa,CAAC,qBAAqB,CAAC;IAChD,CAAC;IAAA;IAAA;MAAAhE,cAAA,GAAAuB,CAAA;IAAA;IAAAvB,cAAA,GAAAC,CAAA;IAED,OAAOmD,SAAS,CAACa,IAAI,CAACC,GAAG,CAAEC,KAAK,IAAK;MAAA;MAAAnE,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAC,CAAA;MAAA,OAAAkE,KAAK,CAACC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC;IAAD,CAAC,CAAC;EACvE;EAEA,MAAMC,wBAAwBA,CAACC,UAAkB;IAAA;IAAAtE,cAAA,GAAAY,CAAA;IAC/C,MAAM2D,IAAI;IAAA;IAAA,CAAAvE,cAAA,GAAAC,CAAA,QAAG,IAAI,CAACuE,mBAAmB,CAACF,UAAU,CAAC;IACjD,MAAMlB,SAAS;IAAA;IAAA,CAAApD,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,aAAa,CACvCU,aAAa,CAACrB,WAAA,CAAAsB,SAAS,CAAC,CACxBoD,kBAAkB,CAAC,WAAW,CAAC,CAC/B9C,KAAK,CAAC,6BAA6B,EAAE;MAAE4C;IAAI,CAAE,CAAC,CAC9CG,QAAQ,CAAC,8BAA8B,EAAE;MACxCC,SAAS,EAAE,IAAI1B,IAAI,CAACzC,QAAA,CAAA0C,MAAM,CAACC,IAAI,CAACC,SAAS,CAACC,kBAAkB;KAC7D,CAAC,CACDuB,OAAO,CAAC,UAAU,CAAC,CACnBC,MAAM,EAAE;IAAC;IAAA7E,cAAA,GAAAC,CAAA;IAEZ,OAAOmD,SAAS;EAClB;EAEQoB,mBAAmBA,CAACF,UAAkB;IAAA;IAAAtE,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAC,CAAA;IAC5C,QAAQqE,UAAU,CAACQ,WAAW,EAAE;MAC9B,KAAK,MAAM;QAAA;QAAA9E,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAC,CAAA;QACT,OAAO,CAAC,QAAQ,EAAE,SAAS,CAAC;MAC9B,KAAK,QAAQ;QAAA;QAAAD,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAC,CAAA;QACX,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC;MAClC,KAAK,MAAM;QAAA;QAAAD,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAC,CAAA;QACT,OAAO,CAAC,QAAQ,EAAE,UAAU,CAAC;MAC/B;QAAA;QAAAD,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAC,CAAA;QACE,MAAM,IAAIE,KAAA,CAAA6D,aAAa,CAAC,oBAAoB,CAAC;IACjD;EACF;EAEAe,UAAUA,CACR3B,SAAoB,EACpB4B,WAAqC,EACrCC,KAAa;IAAA;IAAAjF,cAAA,GAAAY,CAAA;IAEb,MAAMsE,aAAa;IAAA;IAAA,CAAAlF,cAAA,GAAAC,CAAA,QAAG+E,WAAW,CAACG,CAAC,GAAG/B,SAAS,CAACnC,QAAQ,GAAG+D,WAAW,CAACI,CAAC;IAAC;IAAApF,cAAA,GAAAC,CAAA;IACzE,IAAI;MAAA;MAAAD,cAAA,GAAAC,CAAA;MACF,OACEmD,SAAS,CAACa,IAAI,CAACiB,aAAa,CAAC,CAACG,WAAW,EAAE,KAAKJ,KAAK,CAACI,WAAW,EAAE;IAEvE,CAAC,CAAC,OAAOC,CAAC,EAAE;MAAA;MAAAtF,cAAA,GAAAC,CAAA;MACV,MAAM,IAAIE,KAAA,CAAA6D,aAAa,CAAC,qBAAqB,CAAC;IAChD;EACF;;AACD;AAAAhE,cAAA,GAAAC,CAAA;AA3IDsF,OAAA,CAAA9E,gBAAA,GAAAA,gBAAA","ignoreList":[]}
