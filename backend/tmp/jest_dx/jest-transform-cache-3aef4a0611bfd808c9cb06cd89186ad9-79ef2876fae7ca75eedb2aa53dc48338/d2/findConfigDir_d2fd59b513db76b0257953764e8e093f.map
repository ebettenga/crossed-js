{"version":3,"names":["cov_l3n0k7hur","actualCoverage","fs_1","s","__importDefault","require","path_1","findDir","startPath","foldername","options","f","directories","default","readdirSync","withFileTypes","dirent","b","isDirectory","ignoreDirs","includes","name","configPath","join","existsSync","statSync","nestedConfigPath","exports"],"sources":["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/scripts/findConfigDir.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\ntype FindConfigDirOptions = {\n  ignoreDirs: string[];\n};\n\nconst findDir = (\n  startPath: string,\n  foldername: string,\n  options?: FindConfigDirOptions,\n): string | null => {\n  const directories = fs.readdirSync(startPath, { withFileTypes: true });\n  for (const dirent of directories) {\n    if (dirent.isDirectory() && !options?.ignoreDirs.includes(dirent.name)) {\n      const configPath = path.join(startPath, dirent.name, foldername);\n      if (fs.existsSync(configPath) && fs.statSync(configPath).isDirectory()) {\n        return configPath;\n      }\n      const nestedConfigPath = findDir(\n        path.join(startPath, dirent.name),\n        foldername,\n        options,\n      );\n      if (nestedConfigPath) {\n        return nestedConfigPath;\n      }\n    }\n  }\n  return null;\n};\n\nexport { findDir };\n"],"mappingskBM;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlBN,MAAAE,IAAA;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,MAAA;AAAA;AAAA,CAAAN,aAAA,GAAAG,CAAA,OAAAC,eAAA,CAAAC,OAAA;AAAwB;AAAAL,aAAA,GAAAG,CAAA;AAMxB,MAAMI,OAAO,GAAGA,CACdC,SAAiB,EACjBC,UAAkB,EAClBC,OAA8B,KACb;EAAA;EAAAV,aAAA,GAAAW,CAAA;EACjB,MAAMC,WAAW;EAAA;EAAA,CAAAZ,aAAA,GAAAG,CAAA,OAAGD,IAAA,CAAAW,OAAE,CAACC,WAAW,CAACN,SAAS,EAAE;IAAEO,aAAa,EAAE;EAAI,CAAE,CAAC;EAAC;EAAAf,aAAA,GAAAG,CAAA;EACvE,KAAK,MAAMa,MAAM,IAAIJ,WAAW,EAAE;IAAA;IAAAZ,aAAA,GAAAG,CAAA;IAChC;IAAI;IAAA,CAAAH,aAAA,GAAAiB,CAAA,UAAAD,MAAM,CAACE,WAAW,EAAE;IAAA;IAAA,CAAAlB,aAAA,GAAAiB,CAAA,UAAI,CAACP,OAAO,EAAES,UAAU,CAACC,QAAQ,CAACJ,MAAM,CAACK,IAAI,CAAC,GAAE;MAAA;MAAArB,aAAA,GAAAiB,CAAA;MACtE,MAAMK,UAAU;MAAA;MAAA,CAAAtB,aAAA,GAAAG,CAAA,QAAGG,MAAA,CAAAO,OAAI,CAACU,IAAI,CAACf,SAAS,EAAEQ,MAAM,CAACK,IAAI,EAAEZ,UAAU,CAAC;MAAC;MAAAT,aAAA,GAAAG,CAAA;MACjE;MAAI;MAAA,CAAAH,aAAA,GAAAiB,CAAA,UAAAf,IAAA,CAAAW,OAAE,CAACW,UAAU,CAACF,UAAU,CAAC;MAAA;MAAA,CAAAtB,aAAA,GAAAiB,CAAA,UAAIf,IAAA,CAAAW,OAAE,CAACY,QAAQ,CAACH,UAAU,CAAC,CAACJ,WAAW,EAAE,GAAE;QAAA;QAAAlB,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QACtE,OAAOmB,UAAU;MACnB,CAAC;MAAA;MAAA;QAAAtB,aAAA,GAAAiB,CAAA;MAAA;MACD,MAAMS,gBAAgB;MAAA;MAAA,CAAA1B,aAAA,GAAAG,CAAA,QAAGI,OAAO,CAC9BD,MAAA,CAAAO,OAAI,CAACU,IAAI,CAACf,SAAS,EAAEQ,MAAM,CAACK,IAAI,CAAC,EACjCZ,UAAU,EACVC,OAAO,CACR;MAAC;MAAAV,aAAA,GAAAG,CAAA;MACF,IAAIuB,gBAAgB,EAAE;QAAA;QAAA1B,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QACpB,OAAOuB,gBAAgB;MACzB,CAAC;MAAA;MAAA;QAAA1B,aAAA,GAAAiB,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAjB,aAAA,GAAAiB,CAAA;IAAA;EACH;EAAC;EAAAjB,aAAA,GAAAG,CAAA;EACD,OAAO,IAAI;AACb,CAAC;AAAC;AAAAH,aAAA,GAAAG,CAAA;AAEOwB,OAAA,CAAApB,OAAA,GAAAA,OAAA","ignoreList":[]}
