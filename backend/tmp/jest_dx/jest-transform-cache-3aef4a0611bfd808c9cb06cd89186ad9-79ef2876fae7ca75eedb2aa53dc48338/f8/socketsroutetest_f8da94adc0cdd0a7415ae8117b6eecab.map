{"file":"/Users/ethanbett/Documents/Repos/crossed-js/backend/tests/routes/sockets.route.test.ts","mappings":"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","names":[],"sources":["/Users/ethanbett/Documents/Repos/crossed-js/backend/tests/routes/sockets.route.test.ts"],"sourcesContent":["import Fastify, { type FastifyInstance } from \"fastify\";\nimport fastifyIO from \"fastify-socket.io\";\nimport { io as createClient, type Socket } from \"socket.io-client\";\nimport { AddressInfo } from \"net\";\nimport jwt from \"jsonwebtoken\";\nimport { DataSource } from \"typeorm\";\nimport type { PluginDataSource } from \"typeorm-fastify-plugin\";\n\nimport socketsRoutes from \"../../src/routes/private/sockets\";\nimport { User } from \"../../src/entities/User\";\nimport { Room } from \"../../src/entities/Room\";\nimport { Crossword } from \"../../src/entities/Crossword\";\nimport { GameStats } from \"../../src/entities/GameStats\";\nimport { config } from \"../../src/config/config\";\nimport { redisService } from \"../../src/services/RedisService\";\nimport {\n  emailQueue,\n  gameInactivityQueue,\n  gameTimeoutQueue,\n  statusCleanupQueue,\n} from \"../../src/jobs/queues\";\nimport { createPostgresTestManager } from \"../utils/postgres\";\nimport { createRedisTestManager } from \"../utils/redis\";\n\njest.setTimeout(60000);\n\nconst postgres = createPostgresTestManager({\n  label: \"Sockets route tests\",\n  entities: [User, Room, Crossword, GameStats],\n  env: {\n    database: [\n      \"SOCKETS_ROUTE_TEST_DB\",\n      \"ROOM_SERVICE_TEST_DB\",\n      \"POSTGRES_DB\",\n    ],\n    schema: [\n      \"SOCKETS_ROUTE_TEST_SCHEMA\",\n      \"ROOM_SERVICE_TEST_SCHEMA\",\n    ],\n    host: [\n      \"SOCKETS_ROUTE_TEST_DB_HOST\",\n      \"ROOM_SERVICE_TEST_DB_HOST\",\n      \"PGHOST\",\n    ],\n    port: [\n      \"SOCKETS_ROUTE_TEST_DB_PORT\",\n      \"ROOM_SERVICE_TEST_DB_PORT\",\n      \"PGPORT\",\n    ],\n    username: [\n      \"SOCKETS_ROUTE_TEST_DB_USER\",\n      \"ROOM_SERVICE_TEST_DB_USER\",\n      \"PGUSER\",\n    ],\n    password: [\n      \"SOCKETS_ROUTE_TEST_DB_PASSWORD\",\n      \"ROOM_SERVICE_TEST_DB_PASSWORD\",\n      \"PGPASSWORD\",\n    ],\n  },\n  defaults: {\n    database: \"crossed_test\",\n    schema: \"sockets_route_test\",\n    host: \"127.0.0.1\",\n    port: 5432,\n    username: \"postgres\",\n    password: \"postgres\",\n  },\n});\n\nconst redisManager = createRedisTestManager({\n  url: config.redis.default,\n  label: \"Sockets route tests Redis\",\n});\n\nlet dataSource: DataSource;\nlet app: FastifyInstance;\nlet serverUrl: string;\nconst activeClients: Socket[] = [];\n\nconst TABLES_TO_TRUNCATE = [\n  \"game_stats\",\n  \"room_players\",\n  \"room\",\n  \"crossword\",\n  \"user\",\n];\n\nconst waitFor = async <T>(\n  action: () => Promise<T>,\n  timeout = 5000,\n  interval = 25,\n): Promise<T> => {\n  const started = Date.now();\n  let lastError: unknown;\n\n  while (Date.now() - started <= timeout) {\n    try {\n      return await action();\n    } catch (error) {\n      lastError = error;\n      await new Promise((resolve) => setTimeout(resolve, interval));\n    }\n  }\n\n  if (lastError instanceof Error) {\n    throw lastError;\n  }\n\n  throw new Error(\"Timed out waiting for condition\");\n};\n\nconst createUser = async (overrides: Partial<User> = {}) => {\n  const repository = dataSource.getRepository(User);\n  const user = repository.create({\n    username: `socket-user-${Math.random().toString(36).slice(2, 8)}`,\n    email: `${Date.now()}-${Math.random()}@example.com`,\n    password: \"password\",\n    status: \"offline\",\n    roles: [\"user\"],\n    eloRating: 1200,\n    ...overrides,\n  });\n  return repository.save(user);\n};\n\nconst createCrossword = async (overrides: Partial<Crossword> = {}) => {\n  const repository = dataSource.getRepository(Crossword);\n  const crossword = repository.create({\n    clues: { across: [\"A clue\"], down: [\"Down clue\"] },\n    answers: { across: [\"A\"], down: [\"D\"] },\n    author: \"Test Author\",\n    created_by: \"Tester\",\n    creator_link: \"https://example.com\",\n    circles: [],\n    date: new Date(\"2024-01-01T00:00:00.000Z\"),\n    dow: \"Monday\",\n    grid: [\"A\", \"B\", \"C\", \"D\"],\n    gridnums: [\"1\", \"2\", \"3\", \"4\"],\n    shadecircles: false,\n    col_size: 2,\n    row_size: 2,\n    jnote: \"Test note\",\n    notepad: \"Test notepad\",\n    title: \"Socket Test Crossword\",\n    ...overrides,\n  });\n  return repository.save(crossword);\n};\n\nconst createRoomForUser = async (\n  user: User,\n  overrides: Partial<Room> = {},\n) => {\n  const repository = dataSource.getRepository(Room);\n  const crossword = overrides.crossword ?? await createCrossword();\n  const room = repository.create({\n    type: \"1v1\",\n    status: \"pending\",\n    difficulty: \"easy\",\n    players: [user],\n    crossword,\n    scores: { [user.id]: 0 },\n    found_letters: [],\n    ...overrides,\n  });\n  const saved = await repository.save(room);\n  return repository.findOneOrFail({ where: { id: saved.id } });\n};\n\nconst buildAuthToken = (user: User) =>\n  jwt.sign(\n    { sub: user.id, roles: user.roles },\n    config.auth.secretAccessToken,\n    { expiresIn: \"1h\" },\n  );\n\nconst connectClient = async (user: User) => {\n  const token = buildAuthToken(user);\n  const client = createClient(serverUrl, {\n    auth: { authToken: token },\n    transports: [\"websocket\"],\n    forceNew: true,\n  });\n\n  activeClients.push(client);\n\n  await new Promise<void>((resolve, reject) => {\n    client.once(\"connect\", () => resolve());\n    client.once(\"connect_error\", (error) => reject(error));\n  });\n\n  await waitFor(async () => {\n    const stored = await dataSource.getRepository(User).findOneByOrFail({\n      id: user.id,\n    });\n    if (stored.status !== \"online\") {\n      throw new Error(\"User not online yet\");\n    }\n    return stored;\n  });\n\n  await waitFor(async () => {\n    const isRegistered = await redisService.isUserOnThisServer(user.id);\n    if (!isRegistered) {\n      throw new Error(\"User not registered on this server\");\n    }\n    return true;\n  });\n\n  return client;\n};\n\nconst disconnectClient = async (client: Socket) => {\n  if (!client.connected) {\n    const index = activeClients.indexOf(client);\n    if (index !== -1) {\n      activeClients.splice(index, 1);\n    }\n    return;\n  }\n\n  await new Promise<void>((resolve) => {\n    client.once(\"disconnect\", () => resolve());\n    client.disconnect();\n  });\n\n  const index = activeClients.indexOf(client);\n  if (index !== -1) {\n    activeClients.splice(index, 1);\n  }\n};\n\nbeforeAll(async () => {\n  await postgres.setup();\n  dataSource = postgres.dataSource;\n\n  await redisManager.setup();\n  await redisManager.flush();\n\n  app = Fastify({ logger: false });\n  await app.register(fastifyIO, { cors: config.cors });\n  app.decorate(\"orm\", dataSource as unknown as PluginDataSource);\n\n  socketsRoutes(app as any, {}, () => {});\n  await app.ready();\n\n  await app.listen({ port: 0, host: \"127.0.0.1\" });\n  const address = app.server.address() as AddressInfo;\n  serverUrl = `http://127.0.0.1:${address.port}`;\n});\n\nbeforeEach(async () => {\n  await postgres.truncate(TABLES_TO_TRUNCATE);\n  await redisManager.flush();\n});\n\nafterEach(async () => {\n  while (activeClients.length > 0) {\n    const client = activeClients.pop();\n    if (client) {\n      await disconnectClient(client);\n    }\n  }\n});\n\nafterAll(async () => {\n  await app.close();\n  try {\n    await redisManager.flush();\n  } catch {\n    // ignore cleanup errors\n  }\n  await redisManager.close();\n  await Promise.allSettled([\n    emailQueue.close(),\n    statusCleanupQueue.close(),\n    gameTimeoutQueue.close(),\n    gameInactivityQueue.close(),\n  ]);\n  await redisService.close();\n  const { fastify: globalFastify } = await import(\"../../src/fastify\");\n  await globalFastify.close();\n  await postgres.close();\n});\n\ndescribe(\"sockets routes\", () => {\n  it(\"registers user presence on connect and cleans up on disconnect\", async () => {\n    const user = await createUser();\n    const room = await createRoomForUser(user);\n\n    const token = buildAuthToken(user);\n    const client = createClient(serverUrl, {\n      auth: { authToken: token },\n      transports: [\"websocket\"],\n      forceNew: true,\n    });\n    activeClients.push(client);\n\n    const connectionMessage = new Promise<{ data: string }>((resolve) => {\n      client.once(\"connection\", (payload) => resolve(payload));\n    });\n\n    await new Promise<void>((resolve, reject) => {\n      client.once(\"connect\", () => resolve());\n      client.once(\"connect_error\", (error) => reject(error));\n    });\n\n    const payload = await connectionMessage;\n    expect(payload.data).toContain(\"connected\");\n\n    await waitFor(async () => {\n      const stored = await dataSource.getRepository(User).findOneByOrFail({\n        id: user.id,\n      });\n      if (stored.status !== \"online\") {\n        throw new Error(\"User not online yet\");\n      }\n      return stored;\n    });\n\n    await waitFor(async () => {\n      const isRegistered = await redisService.isUserOnThisServer(user.id);\n      if (!isRegistered) {\n        throw new Error(\"User not registered on this server\");\n      }\n      return true;\n    });\n\n    const serverSocket = await waitFor(async () => {\n      const s = app.io.of(\"/\").sockets.get(client.id);\n      if (!s) {\n        throw new Error(\"Socket not registered on server\");\n      }\n      if (!s.rooms.has(room.id.toString())) {\n        throw new Error(\"Room join not complete\");\n      }\n      if (!s.rooms.has(`user_${user.id}`)) {\n        throw new Error(\"User room join not complete\");\n      }\n      return s;\n    });\n\n    expect(serverSocket.rooms.has(room.id.toString())).toBe(true);\n    expect(serverSocket.rooms.has(`user_${user.id}`)).toBe(true);\n\n    await disconnectClient(client);\n\n    await waitFor(async () => {\n      const stored = await dataSource.getRepository(User).findOneByOrFail({\n        id: user.id,\n      });\n      if (stored.status !== \"offline\") {\n        throw new Error(\"User not offline yet\");\n      }\n      return stored;\n    });\n\n    await waitFor(async () => {\n      const userServer = await redisService.getUserServer(user.id);\n      if (userServer !== null) {\n        throw new Error(\"User presence still registered\");\n      }\n      return true;\n    });\n  });\n\n  it(\"joins a room via join_room_bus and broadcasts the room state\", async () => {\n    const user = await createUser();\n    const room = await createRoomForUser(user);\n    const client = await connectClient(user);\n\n    const roomEvent = new Promise<any>((resolve, reject) => {\n      const timer = setTimeout(\n        () => reject(new Error(\"Timed out waiting for room event\")),\n        5000,\n      );\n      client.once(\"room\", (data) => {\n        clearTimeout(timer);\n        resolve(data);\n      });\n    });\n\n    client.emit(\"join_room_bus\", { roomId: room.id, message: \"load\" });\n\n    const broadcast = await roomEvent;\n    expect(broadcast.id).toBe(room.id);\n    expect(Array.isArray(broadcast.players)).toBe(true);\n    expect(broadcast.players.some((player: any) => player.id === user.id)).toBe(\n      true,\n    );\n\n    await disconnectClient(client);\n  });\n\n  it(\"relays room_cancelled events published through Redis\", async () => {\n    const user = await createUser();\n    const room = await createRoomForUser(user);\n    const client = await connectClient(user);\n\n    const cancellationEvent = new Promise<any>((resolve, reject) => {\n      const timer = setTimeout(\n        () => reject(new Error(\"Timed out waiting for cancellation event\")),\n        5000,\n      );\n      client.once(\"room_cancelled\", (data) => {\n        clearTimeout(timer);\n        resolve(data);\n      });\n    });\n\n    const message = {\n      type: \"room_cancelled\",\n      data: {\n        roomId: room.id,\n        message: \"Room cancelled by host\",\n        reason: \"host_left\",\n        players: [user.id],\n      },\n    };\n\n    await redisService.publish(\"game_events\", JSON.stringify(message));\n\n    const payload = await cancellationEvent;\n    expect(payload.roomId).toBe(room.id);\n    expect(payload.reason).toBe(\"host_left\");\n    expect(payload.message).toBe(\"Room cancelled by host\");\n\n    await disconnectClient(client);\n  });\n});\n"],"version":3}
