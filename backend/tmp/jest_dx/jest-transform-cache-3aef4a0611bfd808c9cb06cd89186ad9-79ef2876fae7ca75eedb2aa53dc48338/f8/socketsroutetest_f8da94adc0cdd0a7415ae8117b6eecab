ce2017ddbc4a86838504677660eff94e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fastify_1 = __importDefault(require("fastify"));
const fastify_socket_io_1 = __importDefault(require("fastify-socket.io"));
const socket_io_client_1 = require("socket.io-client");
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const sockets_1 = __importDefault(require("../../src/routes/private/sockets"));
const User_1 = require("../../src/entities/User");
const Room_1 = require("../../src/entities/Room");
const Crossword_1 = require("../../src/entities/Crossword");
const GameStats_1 = require("../../src/entities/GameStats");
const config_1 = require("../../src/config/config");
const RedisService_1 = require("../../src/services/RedisService");
const queues_1 = require("../../src/jobs/queues");
const postgres_1 = require("../utils/postgres");
const redis_1 = require("../utils/redis");
jest.setTimeout(60000);
const postgres = (0, postgres_1.createPostgresTestManager)({
    label: "Sockets route tests",
    entities: [User_1.User, Room_1.Room, Crossword_1.Crossword, GameStats_1.GameStats],
    env: {
        database: [
            "SOCKETS_ROUTE_TEST_DB",
            "ROOM_SERVICE_TEST_DB",
            "POSTGRES_DB",
        ],
        schema: [
            "SOCKETS_ROUTE_TEST_SCHEMA",
            "ROOM_SERVICE_TEST_SCHEMA",
        ],
        host: [
            "SOCKETS_ROUTE_TEST_DB_HOST",
            "ROOM_SERVICE_TEST_DB_HOST",
            "PGHOST",
        ],
        port: [
            "SOCKETS_ROUTE_TEST_DB_PORT",
            "ROOM_SERVICE_TEST_DB_PORT",
            "PGPORT",
        ],
        username: [
            "SOCKETS_ROUTE_TEST_DB_USER",
            "ROOM_SERVICE_TEST_DB_USER",
            "PGUSER",
        ],
        password: [
            "SOCKETS_ROUTE_TEST_DB_PASSWORD",
            "ROOM_SERVICE_TEST_DB_PASSWORD",
            "PGPASSWORD",
        ],
    },
    defaults: {
        database: "crossed_test",
        schema: "sockets_route_test",
        host: "127.0.0.1",
        port: 5432,
        username: "postgres",
        password: "postgres",
    },
});
const redisManager = (0, redis_1.createRedisTestManager)({
    url: config_1.config.redis.default,
    label: "Sockets route tests Redis",
});
let dataSource;
let app;
let serverUrl;
const activeClients = [];
const TABLES_TO_TRUNCATE = [
    "game_stats",
    "room_players",
    "room",
    "crossword",
    "user",
];
const waitFor = async (action, timeout = 5000, interval = 25) => {
    const started = Date.now();
    let lastError;
    while (Date.now() - started <= timeout) {
        try {
            return await action();
        }
        catch (error) {
            lastError = error;
            await new Promise((resolve) => setTimeout(resolve, interval));
        }
    }
    if (lastError instanceof Error) {
        throw lastError;
    }
    throw new Error("Timed out waiting for condition");
};
const createUser = async (overrides = {}) => {
    const repository = dataSource.getRepository(User_1.User);
    const user = repository.create({
        username: `socket-user-${Math.random().toString(36).slice(2, 8)}`,
        email: `${Date.now()}-${Math.random()}@example.com`,
        password: "password",
        status: "offline",
        roles: ["user"],
        eloRating: 1200,
        ...overrides,
    });
    return repository.save(user);
};
const createCrossword = async (overrides = {}) => {
    const repository = dataSource.getRepository(Crossword_1.Crossword);
    const crossword = repository.create({
        clues: { across: ["A clue"], down: ["Down clue"] },
        answers: { across: ["A"], down: ["D"] },
        author: "Test Author",
        created_by: "Tester",
        creator_link: "https://example.com",
        circles: [],
        date: new Date("2024-01-01T00:00:00.000Z"),
        dow: "Monday",
        grid: ["A", "B", "C", "D"],
        gridnums: ["1", "2", "3", "4"],
        shadecircles: false,
        col_size: 2,
        row_size: 2,
        jnote: "Test note",
        notepad: "Test notepad",
        title: "Socket Test Crossword",
        ...overrides,
    });
    return repository.save(crossword);
};
const createRoomForUser = async (user, overrides = {}) => {
    const repository = dataSource.getRepository(Room_1.Room);
    const crossword = overrides.crossword ?? await createCrossword();
    const room = repository.create({
        type: "1v1",
        status: "pending",
        difficulty: "easy",
        players: [user],
        crossword,
        scores: { [user.id]: 0 },
        found_letters: [],
        ...overrides,
    });
    const saved = await repository.save(room);
    return repository.findOneOrFail({ where: { id: saved.id } });
};
const buildAuthToken = (user) => jsonwebtoken_1.default.sign({ sub: user.id, roles: user.roles }, config_1.config.auth.secretAccessToken, { expiresIn: "1h" });
const connectClient = async (user) => {
    const token = buildAuthToken(user);
    const client = (0, socket_io_client_1.io)(serverUrl, {
        auth: { authToken: token },
        transports: ["websocket"],
        forceNew: true,
    });
    activeClients.push(client);
    await new Promise((resolve, reject) => {
        client.once("connect", () => resolve());
        client.once("connect_error", (error) => reject(error));
    });
    await waitFor(async () => {
        const stored = await dataSource.getRepository(User_1.User).findOneByOrFail({
            id: user.id,
        });
        if (stored.status !== "online") {
            throw new Error("User not online yet");
        }
        return stored;
    });
    await waitFor(async () => {
        const isRegistered = await RedisService_1.redisService.isUserOnThisServer(user.id);
        if (!isRegistered) {
            throw new Error("User not registered on this server");
        }
        return true;
    });
    return client;
};
const disconnectClient = async (client) => {
    if (!client.connected) {
        const index = activeClients.indexOf(client);
        if (index !== -1) {
            activeClients.splice(index, 1);
        }
        return;
    }
    await new Promise((resolve) => {
        client.once("disconnect", () => resolve());
        client.disconnect();
    });
    const index = activeClients.indexOf(client);
    if (index !== -1) {
        activeClients.splice(index, 1);
    }
};
beforeAll(async () => {
    await postgres.setup();
    dataSource = postgres.dataSource;
    await redisManager.setup();
    await redisManager.flush();
    app = (0, fastify_1.default)({ logger: false });
    await app.register(fastify_socket_io_1.default, { cors: config_1.config.cors });
    app.decorate("orm", dataSource);
    (0, sockets_1.default)(app, {}, () => { });
    await app.ready();
    await app.listen({ port: 0, host: "127.0.0.1" });
    const address = app.server.address();
    serverUrl = `http://127.0.0.1:${address.port}`;
});
beforeEach(async () => {
    await postgres.truncate(TABLES_TO_TRUNCATE);
    await redisManager.flush();
});
afterEach(async () => {
    while (activeClients.length > 0) {
        const client = activeClients.pop();
        if (client) {
            await disconnectClient(client);
        }
    }
});
afterAll(async () => {
    await app.close();
    try {
        await redisManager.flush();
    }
    catch {
        // ignore cleanup errors
    }
    await redisManager.close();
    await Promise.allSettled([
        queues_1.emailQueue.close(),
        queues_1.statusCleanupQueue.close(),
        queues_1.gameTimeoutQueue.close(),
        queues_1.gameInactivityQueue.close(),
    ]);
    await RedisService_1.redisService.close();
    const { fastify: globalFastify } = await Promise.resolve().then(() => __importStar(require("../../src/fastify")));
    await globalFastify.close();
    await postgres.close();
});
describe("sockets routes", () => {
    it("registers user presence on connect and cleans up on disconnect", async () => {
        const user = await createUser();
        const room = await createRoomForUser(user);
        const token = buildAuthToken(user);
        const client = (0, socket_io_client_1.io)(serverUrl, {
            auth: { authToken: token },
            transports: ["websocket"],
            forceNew: true,
        });
        activeClients.push(client);
        const connectionMessage = new Promise((resolve) => {
            client.once("connection", (payload) => resolve(payload));
        });
        await new Promise((resolve, reject) => {
            client.once("connect", () => resolve());
            client.once("connect_error", (error) => reject(error));
        });
        const payload = await connectionMessage;
        expect(payload.data).toContain("connected");
        await waitFor(async () => {
            const stored = await dataSource.getRepository(User_1.User).findOneByOrFail({
                id: user.id,
            });
            if (stored.status !== "online") {
                throw new Error("User not online yet");
            }
            return stored;
        });
        await waitFor(async () => {
            const isRegistered = await RedisService_1.redisService.isUserOnThisServer(user.id);
            if (!isRegistered) {
                throw new Error("User not registered on this server");
            }
            return true;
        });
        const serverSocket = await waitFor(async () => {
            const s = app.io.of("/").sockets.get(client.id);
            if (!s) {
                throw new Error("Socket not registered on server");
            }
            if (!s.rooms.has(room.id.toString())) {
                throw new Error("Room join not complete");
            }
            if (!s.rooms.has(`user_${user.id}`)) {
                throw new Error("User room join not complete");
            }
            return s;
        });
        expect(serverSocket.rooms.has(room.id.toString())).toBe(true);
        expect(serverSocket.rooms.has(`user_${user.id}`)).toBe(true);
        await disconnectClient(client);
        await waitFor(async () => {
            const stored = await dataSource.getRepository(User_1.User).findOneByOrFail({
                id: user.id,
            });
            if (stored.status !== "offline") {
                throw new Error("User not offline yet");
            }
            return stored;
        });
        await waitFor(async () => {
            const userServer = await RedisService_1.redisService.getUserServer(user.id);
            if (userServer !== null) {
                throw new Error("User presence still registered");
            }
            return true;
        });
    });
    it("joins a room via join_room_bus and broadcasts the room state", async () => {
        const user = await createUser();
        const room = await createRoomForUser(user);
        const client = await connectClient(user);
        const roomEvent = new Promise((resolve, reject) => {
            const timer = setTimeout(() => reject(new Error("Timed out waiting for room event")), 5000);
            client.once("room", (data) => {
                clearTimeout(timer);
                resolve(data);
            });
        });
        client.emit("join_room_bus", { roomId: room.id, message: "load" });
        const broadcast = await roomEvent;
        expect(broadcast.id).toBe(room.id);
        expect(Array.isArray(broadcast.players)).toBe(true);
        expect(broadcast.players.some((player) => player.id === user.id)).toBe(true);
        await disconnectClient(client);
    });
    it("relays room_cancelled events published through Redis", async () => {
        const user = await createUser();
        const room = await createRoomForUser(user);
        const client = await connectClient(user);
        const cancellationEvent = new Promise((resolve, reject) => {
            const timer = setTimeout(() => reject(new Error("Timed out waiting for cancellation event")), 5000);
            client.once("room_cancelled", (data) => {
                clearTimeout(timer);
                resolve(data);
            });
        });
        const message = {
            type: "room_cancelled",
            data: {
                roomId: room.id,
                message: "Room cancelled by host",
                reason: "host_left",
                players: [user.id],
            },
        };
        await RedisService_1.redisService.publish("game_events", JSON.stringify(message));
        const payload = await cancellationEvent;
        expect(payload.roomId).toBe(room.id);
        expect(payload.reason).toBe("host_left");
        expect(payload.message).toBe("Room cancelled by host");
        await disconnectClient(client);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
