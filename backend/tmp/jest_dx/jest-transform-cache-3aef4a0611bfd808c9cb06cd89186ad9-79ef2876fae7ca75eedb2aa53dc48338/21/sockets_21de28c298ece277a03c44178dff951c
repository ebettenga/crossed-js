5644741fd1f28221621432a98915469c
"use strict";

/* istanbul ignore next */
function cov_1avoc7lxb5() {
  var path = "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/routes/private/sockets.ts";
  var hash = "71312519becbd35e6f505551e3f7f9ad9fdd4387";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/routes/private/sockets.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 59
        }
      },
      "3": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 59
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 45
        }
      },
      "5": {
        start: {
          line: 7,
          column: 14
        },
        end: {
          line: 7,
          column: 41
        }
      },
      "6": {
        start: {
          line: 8,
          column: 23
        },
        end: {
          line: 8,
          column: 61
        }
      },
      "7": {
        start: {
          line: 9,
          column: 29
        },
        end: {
          line: 9,
          column: 73
        }
      },
      "8": {
        start: {
          line: 11,
          column: 22
        },
        end: {
          line: 13,
          column: 6
        }
      },
      "9": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "10": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 23,
          column: 5
        }
      },
      "11": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 68
        }
      },
      "12": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 57
        }
      },
      "13": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 16
        }
      },
      "14": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 27,
          column: 66
        }
      },
      "15": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 66
        }
      },
      "16": {
        start: {
          line: 29,
          column: 31
        },
        end: {
          line: 29,
          column: 90
        }
      },
      "17": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 58,
          column: 7
        }
      },
      "18": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "19": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 33,
          column: 45
        }
      },
      "20": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "21": {
        start: {
          line: 35,
          column: 76
        },
        end: {
          line: 35,
          column: 86
        }
      },
      "22": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 46,
          column: 17
        }
      },
      "23": {
        start: {
          line: 38,
          column: 43
        },
        end: {
          line: 38,
          column: 105
        }
      },
      "24": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 45,
          column: 21
        }
      },
      "25": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 44,
          column: 27
        }
      },
      "26": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "27": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 78
        }
      },
      "28": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 62,
          column: 7
        }
      },
      "29": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 63
        }
      },
      "30": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 286,
          column: 7
        }
      },
      "31": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "32": {
        start: {
          line: 66,
          column: 25
        },
        end: {
          line: 66,
          column: 71
        }
      },
      "33": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 74
        }
      },
      "34": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "35": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 76,
          column: 15
        }
      },
      "36": {
        start: {
          line: 78,
          column: 26
        },
        end: {
          line: 78,
          column: 69
        }
      },
      "37": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "38": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 85,
          column: 17
        }
      },
      "39": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 52
        }
      },
      "40": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 83,
          column: 51
        }
      },
      "41": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 79
        }
      },
      "42": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 43
        }
      },
      "43": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 49
        }
      },
      "44": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 101,
          column: 15
        }
      },
      "45": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 99,
          column: 17
        }
      },
      "46": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 95,
          column: 21
        }
      },
      "47": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 94,
          column: 58
        }
      },
      "48": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 62
        }
      },
      "49": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 23
        }
      },
      "50": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 81
        }
      },
      "51": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 114,
          column: 15
        }
      },
      "52": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 54
        }
      },
      "53": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 113,
          column: 19
        }
      },
      "54": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 111,
          column: 23
        }
      },
      "55": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 112,
          column: 84
        }
      },
      "56": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "57": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 120,
          column: 19
        }
      },
      "58": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "59": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 140,
          column: 17
        }
      },
      "60": {
        start: {
          line: 124,
          column: 33
        },
        end: {
          line: 124,
          column: 75
        }
      },
      "61": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 128,
          column: 21
        }
      },
      "62": {
        start: {
          line: 126,
          column: 24
        },
        end: {
          line: 126,
          column: 63
        }
      },
      "63": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 127,
          column: 31
        }
      },
      "64": {
        start: {
          line: 129,
          column: 20
        },
        end: {
          line: 129,
          column: 52
        }
      },
      "65": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 130,
          column: 88
        }
      },
      "66": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 97
        }
      },
      "67": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 139,
          column: 21
        }
      },
      "68": {
        start: {
          line: 135,
          column: 24
        },
        end: {
          line: 135,
          column: 70
        }
      },
      "69": {
        start: {
          line: 138,
          column: 24
        },
        end: {
          line: 138,
          column: 56
        }
      },
      "70": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "71": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 160,
          column: 17
        }
      },
      "72": {
        start: {
          line: 144,
          column: 33
        },
        end: {
          line: 144,
          column: 75
        }
      },
      "73": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 148,
          column: 21
        }
      },
      "74": {
        start: {
          line: 146,
          column: 24
        },
        end: {
          line: 146,
          column: 63
        }
      },
      "75": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 147,
          column: 31
        }
      },
      "76": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 149,
          column: 52
        }
      },
      "77": {
        start: {
          line: 150,
          column: 20
        },
        end: {
          line: 150,
          column: 88
        }
      },
      "78": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 151,
          column: 92
        }
      },
      "79": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 159,
          column: 21
        }
      },
      "80": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 155,
          column: 70
        }
      },
      "81": {
        start: {
          line: 158,
          column: 24
        },
        end: {
          line: 158,
          column: 56
        }
      },
      "82": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 177,
          column: 15
        }
      },
      "83": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 176,
          column: 17
        }
      },
      "84": {
        start: {
          line: 165,
          column: 40
        },
        end: {
          line: 165,
          column: 99
        }
      },
      "85": {
        start: {
          line: 167,
          column: 37
        },
        end: {
          line: 167,
          column: 57
        }
      },
      "86": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 76
        }
      },
      "87": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 171,
          column: 82
        }
      },
      "88": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 78
        }
      },
      "89": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 175,
          column: 81
        }
      },
      "90": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 191,
          column: 15
        }
      },
      "91": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 190,
          column: 17
        }
      },
      "92": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 181,
          column: 88
        }
      },
      "93": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 189,
          column: 21
        }
      },
      "94": {
        start: {
          line: 185,
          column: 24
        },
        end: {
          line: 185,
          column: 70
        }
      },
      "95": {
        start: {
          line: 188,
          column: 24
        },
        end: {
          line: 188,
          column: 56
        }
      },
      "96": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 206,
          column: 15
        }
      },
      "97": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 205,
          column: 17
        }
      },
      "98": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 196,
          column: 54
        }
      },
      "99": {
        start: {
          line: 199,
          column: 20
        },
        end: {
          line: 204,
          column: 21
        }
      },
      "100": {
        start: {
          line: 200,
          column: 24
        },
        end: {
          line: 200,
          column: 70
        }
      },
      "101": {
        start: {
          line: 203,
          column: 24
        },
        end: {
          line: 203,
          column: 56
        }
      },
      "102": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 221,
          column: 15
        }
      },
      "103": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 220,
          column: 17
        }
      },
      "104": {
        start: {
          line: 209,
          column: 33
        },
        end: {
          line: 209,
          column: 79
        }
      },
      "105": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 211,
          column: 73
        }
      },
      "106": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 219,
          column: 21
        }
      },
      "107": {
        start: {
          line: 215,
          column: 24
        },
        end: {
          line: 215,
          column: 70
        }
      },
      "108": {
        start: {
          line: 218,
          column: 24
        },
        end: {
          line: 218,
          column: 56
        }
      },
      "109": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 239,
          column: 15
        }
      },
      "110": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 238,
          column: 17
        }
      },
      "111": {
        start: {
          line: 224,
          column: 66
        },
        end: {
          line: 224,
          column: 82
        }
      },
      "112": {
        start: {
          line: 225,
          column: 33
        },
        end: {
          line: 225,
          column: 114
        }
      },
      "113": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 226,
          column: 52
        }
      },
      "114": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 82
        }
      },
      "115": {
        start: {
          line: 228,
          column: 43
        },
        end: {
          line: 228,
          column: 82
        }
      },
      "116": {
        start: {
          line: 228,
          column: 72
        },
        end: {
          line: 228,
          column: 81
        }
      },
      "117": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 233,
          column: 23
        }
      },
      "118": {
        start: {
          line: 236,
          column: 20
        },
        end: {
          line: 236,
          column: 54
        }
      },
      "119": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 237,
          column: 84
        }
      },
      "120": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 257,
          column: 15
        }
      },
      "121": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 256,
          column: 17
        }
      },
      "122": {
        start: {
          line: 242,
          column: 39
        },
        end: {
          line: 242,
          column: 55
        }
      },
      "123": {
        start: {
          line: 243,
          column: 33
        },
        end: {
          line: 243,
          column: 83
        }
      },
      "124": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 244,
          column: 52
        }
      },
      "125": {
        start: {
          line: 245,
          column: 20
        },
        end: {
          line: 245,
          column: 82
        }
      },
      "126": {
        start: {
          line: 246,
          column: 43
        },
        end: {
          line: 246,
          column: 82
        }
      },
      "127": {
        start: {
          line: 246,
          column: 72
        },
        end: {
          line: 246,
          column: 81
        }
      },
      "128": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 251,
          column: 23
        }
      },
      "129": {
        start: {
          line: 254,
          column: 20
        },
        end: {
          line: 254,
          column: 54
        }
      },
      "130": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 84
        }
      },
      "131": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 274,
          column: 15
        }
      },
      "132": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 273,
          column: 17
        }
      },
      "133": {
        start: {
          line: 260,
          column: 39
        },
        end: {
          line: 260,
          column: 55
        }
      },
      "134": {
        start: {
          line: 261,
          column: 33
        },
        end: {
          line: 261,
          column: 74
        }
      },
      "135": {
        start: {
          line: 262,
          column: 20
        },
        end: {
          line: 262,
          column: 82
        }
      },
      "136": {
        start: {
          line: 263,
          column: 43
        },
        end: {
          line: 263,
          column: 82
        }
      },
      "137": {
        start: {
          line: 263,
          column: 72
        },
        end: {
          line: 263,
          column: 81
        }
      },
      "138": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 268,
          column: 23
        }
      },
      "139": {
        start: {
          line: 271,
          column: 20
        },
        end: {
          line: 271,
          column: 54
        }
      },
      "140": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 84
        }
      },
      "141": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 277,
          column: 15
        }
      },
      "142": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 36
        }
      },
      "143": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 46
        }
      },
      "144": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "145": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 69
        }
      },
      "146": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 32
        }
      },
      "147": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 287,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "verifyUser",
        decl: {
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 25
          }
        },
        loc: {
          start: {
            line: 10,
            column: 56
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "default_1",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 37
          },
          end: {
            line: 288,
            column: 1
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 57
          },
          end: {
            line: 31,
            column: 58
          }
        },
        loc: {
          start: {
            line: 31,
            column: 85
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 60,
            column: 59
          },
          end: {
            line: 60,
            column: 60
          }
        },
        loc: {
          start: {
            line: 60,
            column: 81
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 60
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 64,
            column: 32
          },
          end: {
            line: 64,
            column: 33
          }
        },
        loc: {
          start: {
            line: 64,
            column: 50
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 64
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 91,
            column: 23
          },
          end: {
            line: 91,
            column: 24
          }
        },
        loc: {
          start: {
            line: 91,
            column: 41
          },
          end: {
            line: 101,
            column: 13
          }
        },
        line: 91
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 103,
            column: 36
          },
          end: {
            line: 103,
            column: 37
          }
        },
        loc: {
          start: {
            line: 103,
            column: 42
          },
          end: {
            line: 114,
            column: 13
          }
        },
        line: 103
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 107,
            column: 26
          },
          end: {
            line: 107,
            column: 27
          }
        },
        loc: {
          start: {
            line: 107,
            column: 38
          },
          end: {
            line: 113,
            column: 17
          }
        },
        line: 107
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 115,
            column: 35
          },
          end: {
            line: 115,
            column: 36
          }
        },
        loc: {
          start: {
            line: 115,
            column: 47
          },
          end: {
            line: 121,
            column: 13
          }
        },
        line: 115
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 122,
            column: 39
          },
          end: {
            line: 122,
            column: 40
          }
        },
        loc: {
          start: {
            line: 122,
            column: 55
          },
          end: {
            line: 141,
            column: 13
          }
        },
        line: 122
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 142,
            column: 34
          },
          end: {
            line: 142,
            column: 35
          }
        },
        loc: {
          start: {
            line: 142,
            column: 50
          },
          end: {
            line: 161,
            column: 13
          }
        },
        line: 142
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 162,
            column: 31
          },
          end: {
            line: 162,
            column: 32
          }
        },
        loc: {
          start: {
            line: 162,
            column: 66
          },
          end: {
            line: 177,
            column: 13
          }
        },
        line: 162
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 179,
            column: 33
          },
          end: {
            line: 179,
            column: 34
          }
        },
        loc: {
          start: {
            line: 179,
            column: 56
          },
          end: {
            line: 191,
            column: 13
          }
        },
        line: 179
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 192,
            column: 38
          },
          end: {
            line: 192,
            column: 39
          }
        },
        loc: {
          start: {
            line: 192,
            column: 54
          },
          end: {
            line: 206,
            column: 13
          }
        },
        line: 192
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 207,
            column: 33
          },
          end: {
            line: 207,
            column: 34
          }
        },
        loc: {
          start: {
            line: 207,
            column: 55
          },
          end: {
            line: 221,
            column: 13
          }
        },
        line: 207
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 222,
            column: 35
          },
          end: {
            line: 222,
            column: 36
          }
        },
        loc: {
          start: {
            line: 222,
            column: 51
          },
          end: {
            line: 239,
            column: 13
          }
        },
        line: 222
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 228,
            column: 60
          },
          end: {
            line: 228,
            column: 61
          }
        },
        loc: {
          start: {
            line: 228,
            column: 72
          },
          end: {
            line: 228,
            column: 81
          }
        },
        line: 228
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 240,
            column: 42
          },
          end: {
            line: 240,
            column: 43
          }
        },
        loc: {
          start: {
            line: 240,
            column: 58
          },
          end: {
            line: 257,
            column: 13
          }
        },
        line: 240
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 246,
            column: 60
          },
          end: {
            line: 246,
            column: 61
          }
        },
        loc: {
          start: {
            line: 246,
            column: 72
          },
          end: {
            line: 246,
            column: 81
          }
        },
        line: 246
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 258,
            column: 42
          },
          end: {
            line: 258,
            column: 43
          }
        },
        loc: {
          start: {
            line: 258,
            column: 58
          },
          end: {
            line: 274,
            column: 13
          }
        },
        line: 258
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 263,
            column: 60
          },
          end: {
            line: 263,
            column: 61
          }
        },
        loc: {
          start: {
            line: 263,
            column: 72
          },
          end: {
            line: 263,
            column: 81
          }
        },
        line: 263
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 275,
            column: 30
          },
          end: {
            line: 275,
            column: 31
          }
        },
        loc: {
          start: {
            line: 275,
            column: 36
          },
          end: {
            line: 277,
            column: 13
          }
        },
        line: 275
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 20
          },
          end: {
            line: 45,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 20
          },
          end: {
            line: 45,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 20
          },
          end: {
            line: 81,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 20
          },
          end: {
            line: 81,
            column: 45
          }
        }, {
          start: {
            line: 81,
            column: 49
          },
          end: {
            line: 81,
            column: 74
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 93,
            column: 20
          },
          end: {
            line: 95,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 20
          },
          end: {
            line: 95,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "6": {
        loc: {
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 128,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 128,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "7": {
        loc: {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 139,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 139,
            column: 21
          }
        }, {
          start: {
            line: 137,
            column: 25
          },
          end: {
            line: 139,
            column: 21
          }
        }],
        line: 134
      },
      "8": {
        loc: {
          start: {
            line: 145,
            column: 20
          },
          end: {
            line: 148,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 20
          },
          end: {
            line: 148,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "9": {
        loc: {
          start: {
            line: 154,
            column: 20
          },
          end: {
            line: 159,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 20
          },
          end: {
            line: 159,
            column: 21
          }
        }, {
          start: {
            line: 157,
            column: 25
          },
          end: {
            line: 159,
            column: 21
          }
        }],
        line: 154
      },
      "10": {
        loc: {
          start: {
            line: 184,
            column: 20
          },
          end: {
            line: 189,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 20
          },
          end: {
            line: 189,
            column: 21
          }
        }, {
          start: {
            line: 187,
            column: 25
          },
          end: {
            line: 189,
            column: 21
          }
        }],
        line: 184
      },
      "11": {
        loc: {
          start: {
            line: 199,
            column: 20
          },
          end: {
            line: 204,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 20
          },
          end: {
            line: 204,
            column: 21
          }
        }, {
          start: {
            line: 202,
            column: 25
          },
          end: {
            line: 204,
            column: 21
          }
        }],
        line: 199
      },
      "12": {
        loc: {
          start: {
            line: 214,
            column: 20
          },
          end: {
            line: 219,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 20
          },
          end: {
            line: 219,
            column: 21
          }
        }, {
          start: {
            line: 217,
            column: 25
          },
          end: {
            line: 219,
            column: 21
          }
        }],
        line: 214
      },
      "13": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/ethanbett/Documents/Repos/crossed-js/backend/src/routes/private/sockets.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/routes/private/sockets.ts"],
      sourcesContent: ["import { FastifyInstance } from \"fastify\";\nimport { RoomService } from \"../../services/RoomService\";\nimport { AuthService } from \"../../services/AuthService\";\nimport { User } from \"../../entities/User\";\nimport { ForbiddenError, UserNotFoundError } from \"../../errors/api\";\nimport { Socket } from \"socket.io\";\nimport { redisService } from \"../../services/RedisService\";\nimport { createSocketEventService } from \"../../services/SocketEventService\";\nimport { Room } from \"../../entities/Room\";\n\nexport type Guess = {\n  roomId: number;\n  x: number;\n  y: number;\n  guess: string;\n};\n\nexport type JoinRoom = {\n  difficulty: string;\n  type: \"1v1\" | \"2v2\" | \"free4all\";\n};\n\nexport type Message = {\n  message: string;\n};\n\nexport type RoomMessage = {\n  roomId: number;\n} & Message;\n\nexport type LoadRoom = {\n  roomId: number;\n};\n\nexport type Challenge = {\n  roomId: number;\n  challengedId: number;\n  difficulty: string;\n  context?: string;\n};\n\nasync function verifyUser(\n  authService: AuthService,\n  fastify: FastifyInstance,\n  socket: Socket,\n) {\n  const userToken = authService.verify(fastify, {\n    token: socket.handshake.auth.authToken,\n  });\n  const user = await fastify.orm.getRepository(User).findOne({\n    where: {\n      // @ts-ignore\n      id: userToken.sub,\n    },\n  });\n\n  if (!user) {\n    fastify.log.info(`User with ID ${userToken.sub} not found`);\n    throw new UserNotFoundError(userToken.sub as string);\n  }\n\n  return user;\n}\n\nexport default function (\n  fastify: FastifyInstance,\n  _: object,\n  next: (err?: Error) => void,\n): void {\n  const authService = new AuthService(fastify.orm);\n  const roomService = new RoomService(fastify.orm);\n  const socketEventService = createSocketEventService(fastify);\n\n  // Subscribe to game events from Redis\n  redisService.subscribe(\"game_events\", async (channel, message) => {\n    try {\n      const event = JSON.parse(message);\n\n      if (event.type === \"room_cancelled\") {\n        const { roomId, message: cancelMessage, reason, players } = event.data;\n\n        // Only emit to players that are connected to this server\n        for (const playerId of players) {\n          const isOnThisServer = await redisService.isUserOnThisServer(\n            playerId,\n          );\n          if (isOnThisServer) {\n            fastify.io.to(`user_${playerId}`).emit(\"room_cancelled\", {\n              message: cancelMessage,\n              roomId,\n              reason,\n            });\n          }\n        }\n\n        // Also emit to the room channel for any spectators on this server\n        fastify.io.to(roomId.toString()).emit(\"room_cancelled\", {\n          message: cancelMessage,\n          roomId,\n          reason,\n        });\n      }\n    } catch (error) {\n      fastify.log.error({ err: error }, \"Error handling Redis message\");\n    }\n  });\n\n  // Subscribe to socket events from Redis\n  redisService.subscribe(\"socket_events\", (channel, message) => {\n    socketEventService.handleSocketEvent(channel, message);\n  });\n\n  // connection stuff\n  fastify.io.on(\"connection\", async (socket) => {\n    try {\n      const user = await verifyUser(authService, fastify, socket);\n\n      // Register this user's socket connection with this server\n      await redisService.registerUserSocket(user.id);\n\n      // Set user as online\n      await fastify.orm.getRepository(User).update(user.id, {\n        status: \"online\",\n      });\n      await socketEventService.emitToUsers([user.id], \"user_status_change\", {\n        userId: user.id,\n        status: \"online\",\n      });\n\n      // Add user to all their active rooms\n      const rooms = await roomService.getRoomsByUserId(user.id);\n      for (const room of rooms) {\n        // Join both playing and pending rooms to receive updates\n        if (room.status === \"playing\" || room.status === \"pending\") {\n          socket.join(room.id.toString());\n          socket.join(`user_${user.id}`);\n          fastify.log.info(`User ${user.id} joined room ${room.id}`);\n        }\n      }\n\n      // Join a room for user-specific events\n      socket.join(`user_${user.id}`);\n\n      fastify.log.info(\"a user connected\");\n      // middleware to parse JSON payloads\n      socket.use((packet, next) => {\n        try {\n          if (typeof packet[1] === \"string\") {\n            packet[1] = JSON.parse(packet[1]);\n          }\n        } catch (e) {\n          fastify.log.error(\"Invalid JSON payload\");\n        }\n        next();\n      });\n      socket.emit(\"connection\", { data: `id: ${socket.id} is connected` });\n\n      socket.on(\"disconnect\", () => {\n        fastify.log.info(\"user disconnected\");\n        // Set user as offline and unregister their socket\n        fastify.orm.getRepository(User).update(user.id, { status: \"offline\" })\n          .then(async () => {\n            await socketEventService.emitToUsers(\n              [user.id],\n              \"user_status_change\",\n              {\n                userId: user.id,\n                status: \"offline\",\n              },\n            );\n            await redisService.unregisterUserSocket(user.id);\n          });\n      });\n\n      socket.on(\"heartbeat\", async () => {\n        // Update the user's lastActiveAt timestamp\n        await fastify.orm.getRepository(User).update(user.id, {\n          status: \"online\",\n          lastActiveAt: new Date(),\n        });\n      });\n\n      socket.on(\"join_room_bus\", async (data: RoomMessage) => {\n        try {\n          const room = await roomService.getRoomById(data.roomId);\n          if (!room) {\n            socket.emit(\"error\", \"Room not found\");\n            return;\n          }\n          socket.join(room.id.toString());\n          await socketEventService.emitToRoom(room.id, \"room\", room.toJSON());\n          fastify.log.info(\n            `User ${user.id} joined room ${room.id} via join_room_bus`,\n          );\n        } catch (e) {\n          if (e instanceof UserNotFoundError) {\n            socket.emit(\"error\", \"Authentication failed\");\n          } else {\n            socket.emit(\"error\", e.message);\n          }\n        }\n      });\n\n      socket.on(\"loadRoom\", async (data: LoadRoom) => {\n        try {\n          const room = await roomService.getRoomById(data.roomId);\n          if (!room) {\n            socket.emit(\"error\", \"Room not found\");\n            return;\n          }\n          socket.join(room.id.toString());\n          await socketEventService.emitToRoom(room.id, \"room\", room.toJSON());\n          fastify.log.info(\n            `User ${user.id} joined room ${room.id} via loadRoom`,\n          );\n        } catch (e) {\n          if (e instanceof UserNotFoundError) {\n            socket.emit(\"error\", \"Authentication failed\");\n          } else {\n            socket.emit(\"error\", e.message);\n          }\n        }\n      });\n\n      socket.on(\"guess\", async ({ roomId, x, y, guess }) => {\n        try {\n          // Process guess without an explicit DB transaction here\n          const updatedRoom = await roomService.handleGuess(\n            roomId,\n            user.id,\n            x,\n            y,\n            guess,\n          );\n\n          // Broadcast updated room state to all players\n          const roomJSON = updatedRoom.toJSON();\n          // Emit locally to connected clients on this server\n          fastify.io.to(roomId.toString()).emit(\"room\", roomJSON);\n          // Also publish to other servers\n          await socketEventService.emitToRoom(roomId, \"room\", roomJSON);\n        } catch (error) {\n          fastify.log.error({ err: error }, \"Error handling guess\");\n          socket.emit(\"error\", { message: \"Failed to process guess\" });\n        }\n      });\n\n      // chat stuff\n      socket.on(\n        \"message\",\n        async ({ message }: Message) => {\n          try {\n            await socketEventService.emitToUsers([user.id], \"message\", message);\n          } catch (e) {\n            if (e instanceof UserNotFoundError) {\n              socket.emit(\"error\", \"Authentication failed\");\n            } else {\n              socket.emit(\"error\", e.message);\n            }\n          }\n        },\n      );\n\n      socket.on(\"message_room\", async (data: RoomMessage) => {\n        try {\n          socket.broadcast\n            .to(data.roomId.toString())\n            .emit(\"message\", data.roomId);\n        } catch (e) {\n          if (e instanceof UserNotFoundError) {\n            socket.emit(\"error\", \"Authentication failed\");\n          } else {\n            socket.emit(\"error\", e.message);\n          }\n        }\n      });\n\n      socket.on(\"forfeit\", async ({ roomId }: LoadRoom) => {\n        try {\n          const room = await roomService.forfeitGame(roomId, user.id);\n\n          // Emit the updated room state to all players\n          fastify.io.to(room.id.toString()).emit(\"room\", room);\n        } catch (e) {\n          if (e instanceof UserNotFoundError) {\n            socket.emit(\"error\", \"Authentication failed\");\n          } else {\n            socket.emit(\"error\", e.message);\n          }\n        }\n      });\n\n      socket.on(\"challenge\", async (data: string) => {\n        try {\n          const { challengedId, difficulty, context } = JSON.parse(data) as Challenge;\n          const room = await roomService.createChallengeRoom(\n            user.id,\n            challengedId,\n            difficulty,\n            context,\n          );\n          socket.join(room.id.toString());\n          fastify.io.to(room.id.toString()).emit(\"room\", room.toJSON());\n          const participantIds = room.players.map((player) => player.id);\n          await socketEventService.emitToUsers(\n            participantIds,\n            \"challenges:updated\",\n            {\n              roomId: room.id,\n              status: room.status,\n              action: \"created\",\n            },\n          );\n        } catch (error) {\n          fastify.log.error({ err: error });\n          socket.emit(\"error\", { message: \"Failed to create challenge\" });\n        }\n      });\n\n      socket.on(\"accept_challenge\", async (data: string) => {\n        try {\n          const { roomId } = JSON.parse(data) as { roomId: number };\n          const room = await roomService.acceptChallenge(roomId, user.id);\n          socket.join(room.id.toString());\n          fastify.io.to(room.id.toString()).emit(\"room\", room.toJSON());\n          const participantIds = room.players.map((player) => player.id);\n          await socketEventService.emitToUsers(\n            participantIds,\n            \"challenges:updated\",\n            {\n              roomId: room.id,\n              status: room.status,\n              action: \"accepted\",\n            },\n          );\n        } catch (error) {\n          fastify.log.error({ err: error });\n          socket.emit(\"error\", { message: \"Failed to accept challenge\" });\n        }\n      });\n\n      socket.on(\"reject_challenge\", async (data: string) => {\n        try {\n          const { roomId } = JSON.parse(data) as { roomId: number };\n          const room = await roomService.rejectChallenge(roomId);\n          fastify.io.to(room.id.toString()).emit(\"room\", room.toJSON());\n          const participantIds = room.players.map((player) => player.id);\n          await socketEventService.emitToUsers(\n            participantIds,\n            \"challenges:updated\",\n            {\n              roomId: room.id,\n              status: room.status,\n              action: \"rejected\",\n            },\n          );\n        } catch (error) {\n          fastify.log.error({ err: error });\n          socket.emit(\"error\", { message: \"Failed to reject challenge\" });\n        }\n      });\n\n      socket.on(\"ping\", () => {\n        socket.emit(\"pong\");\n      });\n    } catch (error) {\n      fastify.log.error({ err: error });\n      if (error instanceof ForbiddenError) {\n        socket.emit(\"error\", { code: \"auth/invalid-token\" });\n      }\n      socket.disconnect();\n    }\n  });\n\n  next();\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "71312519becbd35e6f505551e3f7f9ad9fdd4387"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1avoc7lxb5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1avoc7lxb5();
cov_1avoc7lxb5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1avoc7lxb5().s[1]++;
exports.default = default_1;
const RoomService_1 =
/* istanbul ignore next */
(cov_1avoc7lxb5().s[2]++, require("../../services/RoomService"));
const AuthService_1 =
/* istanbul ignore next */
(cov_1avoc7lxb5().s[3]++, require("../../services/AuthService"));
const User_1 =
/* istanbul ignore next */
(cov_1avoc7lxb5().s[4]++, require("../../entities/User"));
const api_1 =
/* istanbul ignore next */
(cov_1avoc7lxb5().s[5]++, require("../../errors/api"));
const RedisService_1 =
/* istanbul ignore next */
(cov_1avoc7lxb5().s[6]++, require("../../services/RedisService"));
const SocketEventService_1 =
/* istanbul ignore next */
(cov_1avoc7lxb5().s[7]++, require("../../services/SocketEventService"));
async function verifyUser(authService, fastify, socket) {
  /* istanbul ignore next */
  cov_1avoc7lxb5().f[0]++;
  const userToken =
  /* istanbul ignore next */
  (cov_1avoc7lxb5().s[8]++, authService.verify(fastify, {
    token: socket.handshake.auth.authToken
  }));
  const user =
  /* istanbul ignore next */
  (cov_1avoc7lxb5().s[9]++, await fastify.orm.getRepository(User_1.User).findOne({
    where: {
      // @ts-ignore
      id: userToken.sub
    }
  }));
  /* istanbul ignore next */
  cov_1avoc7lxb5().s[10]++;
  if (!user) {
    /* istanbul ignore next */
    cov_1avoc7lxb5().b[0][0]++;
    cov_1avoc7lxb5().s[11]++;
    fastify.log.info(`User with ID ${userToken.sub} not found`);
    /* istanbul ignore next */
    cov_1avoc7lxb5().s[12]++;
    throw new api_1.UserNotFoundError(userToken.sub);
  } else
  /* istanbul ignore next */
  {
    cov_1avoc7lxb5().b[0][1]++;
  }
  cov_1avoc7lxb5().s[13]++;
  return user;
}
function default_1(fastify, _, next) {
  /* istanbul ignore next */
  cov_1avoc7lxb5().f[1]++;
  const authService =
  /* istanbul ignore next */
  (cov_1avoc7lxb5().s[14]++, new AuthService_1.AuthService(fastify.orm));
  const roomService =
  /* istanbul ignore next */
  (cov_1avoc7lxb5().s[15]++, new RoomService_1.RoomService(fastify.orm));
  const socketEventService =
  /* istanbul ignore next */
  (cov_1avoc7lxb5().s[16]++, (0, SocketEventService_1.createSocketEventService)(fastify));
  // Subscribe to game events from Redis
  /* istanbul ignore next */
  cov_1avoc7lxb5().s[17]++;
  RedisService_1.redisService.subscribe("game_events", async (channel, message) => {
    /* istanbul ignore next */
    cov_1avoc7lxb5().f[2]++;
    cov_1avoc7lxb5().s[18]++;
    try {
      const event =
      /* istanbul ignore next */
      (cov_1avoc7lxb5().s[19]++, JSON.parse(message));
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[20]++;
      if (event.type === "room_cancelled") {
        /* istanbul ignore next */
        cov_1avoc7lxb5().b[1][0]++;
        const {
          roomId,
          message: cancelMessage,
          reason,
          players
        } =
        /* istanbul ignore next */
        (cov_1avoc7lxb5().s[21]++, event.data);
        // Only emit to players that are connected to this server
        /* istanbul ignore next */
        cov_1avoc7lxb5().s[22]++;
        for (const playerId of players) {
          const isOnThisServer =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[23]++, await RedisService_1.redisService.isUserOnThisServer(playerId));
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[24]++;
          if (isOnThisServer) {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[2][0]++;
            cov_1avoc7lxb5().s[25]++;
            fastify.io.to(`user_${playerId}`).emit("room_cancelled", {
              message: cancelMessage,
              roomId,
              reason
            });
          } else
          /* istanbul ignore next */
          {
            cov_1avoc7lxb5().b[2][1]++;
          }
        }
        // Also emit to the room channel for any spectators on this server
        /* istanbul ignore next */
        cov_1avoc7lxb5().s[26]++;
        fastify.io.to(roomId.toString()).emit("room_cancelled", {
          message: cancelMessage,
          roomId,
          reason
        });
      } else
      /* istanbul ignore next */
      {
        cov_1avoc7lxb5().b[1][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[27]++;
      fastify.log.error({
        err: error
      }, "Error handling Redis message");
    }
  });
  // Subscribe to socket events from Redis
  /* istanbul ignore next */
  cov_1avoc7lxb5().s[28]++;
  RedisService_1.redisService.subscribe("socket_events", (channel, message) => {
    /* istanbul ignore next */
    cov_1avoc7lxb5().f[3]++;
    cov_1avoc7lxb5().s[29]++;
    socketEventService.handleSocketEvent(channel, message);
  });
  // connection stuff
  /* istanbul ignore next */
  cov_1avoc7lxb5().s[30]++;
  fastify.io.on("connection", async socket => {
    /* istanbul ignore next */
    cov_1avoc7lxb5().f[4]++;
    cov_1avoc7lxb5().s[31]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_1avoc7lxb5().s[32]++, await verifyUser(authService, fastify, socket));
      // Register this user's socket connection with this server
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[33]++;
      await RedisService_1.redisService.registerUserSocket(user.id);
      // Set user as online
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[34]++;
      await fastify.orm.getRepository(User_1.User).update(user.id, {
        status: "online"
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[35]++;
      await socketEventService.emitToUsers([user.id], "user_status_change", {
        userId: user.id,
        status: "online"
      });
      // Add user to all their active rooms
      const rooms =
      /* istanbul ignore next */
      (cov_1avoc7lxb5().s[36]++, await roomService.getRoomsByUserId(user.id));
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[37]++;
      for (const room of rooms) {
        /* istanbul ignore next */
        cov_1avoc7lxb5().s[38]++;
        // Join both playing and pending rooms to receive updates
        if (
        /* istanbul ignore next */
        (cov_1avoc7lxb5().b[4][0]++, room.status === "playing") ||
        /* istanbul ignore next */
        (cov_1avoc7lxb5().b[4][1]++, room.status === "pending")) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().b[3][0]++;
          cov_1avoc7lxb5().s[39]++;
          socket.join(room.id.toString());
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[40]++;
          socket.join(`user_${user.id}`);
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[41]++;
          fastify.log.info(`User ${user.id} joined room ${room.id}`);
        } else
        /* istanbul ignore next */
        {
          cov_1avoc7lxb5().b[3][1]++;
        }
      }
      // Join a room for user-specific events
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[42]++;
      socket.join(`user_${user.id}`);
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[43]++;
      fastify.log.info("a user connected");
      // middleware to parse JSON payloads
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[44]++;
      socket.use((packet, next) => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[5]++;
        cov_1avoc7lxb5().s[45]++;
        try {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[46]++;
          if (typeof packet[1] === "string") {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[5][0]++;
            cov_1avoc7lxb5().s[47]++;
            packet[1] = JSON.parse(packet[1]);
          } else
          /* istanbul ignore next */
          {
            cov_1avoc7lxb5().b[5][1]++;
          }
        } catch (e) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[48]++;
          fastify.log.error("Invalid JSON payload");
        }
        /* istanbul ignore next */
        cov_1avoc7lxb5().s[49]++;
        next();
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[50]++;
      socket.emit("connection", {
        data: `id: ${socket.id} is connected`
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[51]++;
      socket.on("disconnect", () => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[6]++;
        cov_1avoc7lxb5().s[52]++;
        fastify.log.info("user disconnected");
        // Set user as offline and unregister their socket
        /* istanbul ignore next */
        cov_1avoc7lxb5().s[53]++;
        fastify.orm.getRepository(User_1.User).update(user.id, {
          status: "offline"
        }).then(async () => {
          /* istanbul ignore next */
          cov_1avoc7lxb5().f[7]++;
          cov_1avoc7lxb5().s[54]++;
          await socketEventService.emitToUsers([user.id], "user_status_change", {
            userId: user.id,
            status: "offline"
          });
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[55]++;
          await RedisService_1.redisService.unregisterUserSocket(user.id);
        });
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[56]++;
      socket.on("heartbeat", async () => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[8]++;
        cov_1avoc7lxb5().s[57]++;
        // Update the user's lastActiveAt timestamp
        await fastify.orm.getRepository(User_1.User).update(user.id, {
          status: "online",
          lastActiveAt: new Date()
        });
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[58]++;
      socket.on("join_room_bus", async data => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[9]++;
        cov_1avoc7lxb5().s[59]++;
        try {
          const room =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[60]++, await roomService.getRoomById(data.roomId));
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[61]++;
          if (!room) {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[6][0]++;
            cov_1avoc7lxb5().s[62]++;
            socket.emit("error", "Room not found");
            /* istanbul ignore next */
            cov_1avoc7lxb5().s[63]++;
            return;
          } else
          /* istanbul ignore next */
          {
            cov_1avoc7lxb5().b[6][1]++;
          }
          cov_1avoc7lxb5().s[64]++;
          socket.join(room.id.toString());
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[65]++;
          await socketEventService.emitToRoom(room.id, "room", room.toJSON());
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[66]++;
          fastify.log.info(`User ${user.id} joined room ${room.id} via join_room_bus`);
        } catch (e) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[67]++;
          if (e instanceof api_1.UserNotFoundError) {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[7][0]++;
            cov_1avoc7lxb5().s[68]++;
            socket.emit("error", "Authentication failed");
          } else {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[7][1]++;
            cov_1avoc7lxb5().s[69]++;
            socket.emit("error", e.message);
          }
        }
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[70]++;
      socket.on("loadRoom", async data => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[10]++;
        cov_1avoc7lxb5().s[71]++;
        try {
          const room =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[72]++, await roomService.getRoomById(data.roomId));
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[73]++;
          if (!room) {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[8][0]++;
            cov_1avoc7lxb5().s[74]++;
            socket.emit("error", "Room not found");
            /* istanbul ignore next */
            cov_1avoc7lxb5().s[75]++;
            return;
          } else
          /* istanbul ignore next */
          {
            cov_1avoc7lxb5().b[8][1]++;
          }
          cov_1avoc7lxb5().s[76]++;
          socket.join(room.id.toString());
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[77]++;
          await socketEventService.emitToRoom(room.id, "room", room.toJSON());
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[78]++;
          fastify.log.info(`User ${user.id} joined room ${room.id} via loadRoom`);
        } catch (e) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[79]++;
          if (e instanceof api_1.UserNotFoundError) {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[9][0]++;
            cov_1avoc7lxb5().s[80]++;
            socket.emit("error", "Authentication failed");
          } else {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[9][1]++;
            cov_1avoc7lxb5().s[81]++;
            socket.emit("error", e.message);
          }
        }
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[82]++;
      socket.on("guess", async ({
        roomId,
        x,
        y,
        guess
      }) => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[11]++;
        cov_1avoc7lxb5().s[83]++;
        try {
          // Process guess without an explicit DB transaction here
          const updatedRoom =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[84]++, await roomService.handleGuess(roomId, user.id, x, y, guess));
          // Broadcast updated room state to all players
          const roomJSON =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[85]++, updatedRoom.toJSON());
          // Emit locally to connected clients on this server
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[86]++;
          fastify.io.to(roomId.toString()).emit("room", roomJSON);
          // Also publish to other servers
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[87]++;
          await socketEventService.emitToRoom(roomId, "room", roomJSON);
        } catch (error) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[88]++;
          fastify.log.error({
            err: error
          }, "Error handling guess");
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[89]++;
          socket.emit("error", {
            message: "Failed to process guess"
          });
        }
      });
      // chat stuff
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[90]++;
      socket.on("message", async ({
        message
      }) => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[12]++;
        cov_1avoc7lxb5().s[91]++;
        try {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[92]++;
          await socketEventService.emitToUsers([user.id], "message", message);
        } catch (e) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[93]++;
          if (e instanceof api_1.UserNotFoundError) {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[10][0]++;
            cov_1avoc7lxb5().s[94]++;
            socket.emit("error", "Authentication failed");
          } else {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[10][1]++;
            cov_1avoc7lxb5().s[95]++;
            socket.emit("error", e.message);
          }
        }
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[96]++;
      socket.on("message_room", async data => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[13]++;
        cov_1avoc7lxb5().s[97]++;
        try {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[98]++;
          socket.broadcast.to(data.roomId.toString()).emit("message", data.roomId);
        } catch (e) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[99]++;
          if (e instanceof api_1.UserNotFoundError) {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[11][0]++;
            cov_1avoc7lxb5().s[100]++;
            socket.emit("error", "Authentication failed");
          } else {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[11][1]++;
            cov_1avoc7lxb5().s[101]++;
            socket.emit("error", e.message);
          }
        }
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[102]++;
      socket.on("forfeit", async ({
        roomId
      }) => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[14]++;
        cov_1avoc7lxb5().s[103]++;
        try {
          const room =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[104]++, await roomService.forfeitGame(roomId, user.id));
          // Emit the updated room state to all players
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[105]++;
          fastify.io.to(room.id.toString()).emit("room", room);
        } catch (e) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[106]++;
          if (e instanceof api_1.UserNotFoundError) {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[12][0]++;
            cov_1avoc7lxb5().s[107]++;
            socket.emit("error", "Authentication failed");
          } else {
            /* istanbul ignore next */
            cov_1avoc7lxb5().b[12][1]++;
            cov_1avoc7lxb5().s[108]++;
            socket.emit("error", e.message);
          }
        }
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[109]++;
      socket.on("challenge", async data => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[15]++;
        cov_1avoc7lxb5().s[110]++;
        try {
          const {
            challengedId,
            difficulty,
            context
          } =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[111]++, JSON.parse(data));
          const room =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[112]++, await roomService.createChallengeRoom(user.id, challengedId, difficulty, context));
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[113]++;
          socket.join(room.id.toString());
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[114]++;
          fastify.io.to(room.id.toString()).emit("room", room.toJSON());
          const participantIds =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[115]++, room.players.map(player => {
            /* istanbul ignore next */
            cov_1avoc7lxb5().f[16]++;
            cov_1avoc7lxb5().s[116]++;
            return player.id;
          }));
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[117]++;
          await socketEventService.emitToUsers(participantIds, "challenges:updated", {
            roomId: room.id,
            status: room.status,
            action: "created"
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[118]++;
          fastify.log.error({
            err: error
          });
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[119]++;
          socket.emit("error", {
            message: "Failed to create challenge"
          });
        }
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[120]++;
      socket.on("accept_challenge", async data => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[17]++;
        cov_1avoc7lxb5().s[121]++;
        try {
          const {
            roomId
          } =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[122]++, JSON.parse(data));
          const room =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[123]++, await roomService.acceptChallenge(roomId, user.id));
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[124]++;
          socket.join(room.id.toString());
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[125]++;
          fastify.io.to(room.id.toString()).emit("room", room.toJSON());
          const participantIds =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[126]++, room.players.map(player => {
            /* istanbul ignore next */
            cov_1avoc7lxb5().f[18]++;
            cov_1avoc7lxb5().s[127]++;
            return player.id;
          }));
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[128]++;
          await socketEventService.emitToUsers(participantIds, "challenges:updated", {
            roomId: room.id,
            status: room.status,
            action: "accepted"
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[129]++;
          fastify.log.error({
            err: error
          });
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[130]++;
          socket.emit("error", {
            message: "Failed to accept challenge"
          });
        }
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[131]++;
      socket.on("reject_challenge", async data => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[19]++;
        cov_1avoc7lxb5().s[132]++;
        try {
          const {
            roomId
          } =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[133]++, JSON.parse(data));
          const room =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[134]++, await roomService.rejectChallenge(roomId));
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[135]++;
          fastify.io.to(room.id.toString()).emit("room", room.toJSON());
          const participantIds =
          /* istanbul ignore next */
          (cov_1avoc7lxb5().s[136]++, room.players.map(player => {
            /* istanbul ignore next */
            cov_1avoc7lxb5().f[20]++;
            cov_1avoc7lxb5().s[137]++;
            return player.id;
          }));
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[138]++;
          await socketEventService.emitToUsers(participantIds, "challenges:updated", {
            roomId: room.id,
            status: room.status,
            action: "rejected"
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[139]++;
          fastify.log.error({
            err: error
          });
          /* istanbul ignore next */
          cov_1avoc7lxb5().s[140]++;
          socket.emit("error", {
            message: "Failed to reject challenge"
          });
        }
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[141]++;
      socket.on("ping", () => {
        /* istanbul ignore next */
        cov_1avoc7lxb5().f[21]++;
        cov_1avoc7lxb5().s[142]++;
        socket.emit("pong");
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[143]++;
      fastify.log.error({
        err: error
      });
      /* istanbul ignore next */
      cov_1avoc7lxb5().s[144]++;
      if (error instanceof api_1.ForbiddenError) {
        /* istanbul ignore next */
        cov_1avoc7lxb5().b[13][0]++;
        cov_1avoc7lxb5().s[145]++;
        socket.emit("error", {
          code: "auth/invalid-token"
        });
      } else
      /* istanbul ignore next */
      {
        cov_1avoc7lxb5().b[13][1]++;
      }
      cov_1avoc7lxb5().s[146]++;
      socket.disconnect();
    }
  });
  /* istanbul ignore next */
  cov_1avoc7lxb5().s[147]++;
  next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
