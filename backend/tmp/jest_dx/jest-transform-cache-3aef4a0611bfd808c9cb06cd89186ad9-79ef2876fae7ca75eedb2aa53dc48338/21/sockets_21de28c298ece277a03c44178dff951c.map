{"version":3,"names":["cov_1avoc7lxb5","actualCoverage","s","exports","default","default_1","RoomService_1","require","AuthService_1","User_1","api_1","RedisService_1","SocketEventService_1","verifyUser","authService","fastify","socket","f","userToken","verify","token","handshake","auth","authToken","user","orm","getRepository","User","findOne","where","id","sub","b","log","info","UserNotFoundError","_","next","AuthService","roomService","RoomService","socketEventService","createSocketEventService","redisService","subscribe","channel","message","event","JSON","parse","type","roomId","cancelMessage","reason","players","data","playerId","isOnThisServer","isUserOnThisServer","io","to","emit","toString","error","err","handleSocketEvent","on","registerUserSocket","update","status","emitToUsers","userId","rooms","getRoomsByUserId","room","join","use","packet","e","then","unregisterUserSocket","lastActiveAt","Date","getRoomById","emitToRoom","toJSON","x","y","guess","updatedRoom","handleGuess","roomJSON","broadcast","forfeitGame","challengedId","difficulty","context","createChallengeRoom","participantIds","map","player","action","acceptChallenge","rejectChallenge","ForbiddenError","code","disconnect"],"sources":["/Users/ethanbett/Documents/Repos/crossed-js/backend/src/routes/private/sockets.ts"],"sourcesContent":["import { FastifyInstance } from \"fastify\";\nimport { RoomService } from \"../../services/RoomService\";\nimport { AuthService } from \"../../services/AuthService\";\nimport { User } from \"../../entities/User\";\nimport { ForbiddenError, UserNotFoundError } from \"../../errors/api\";\nimport { Socket } from \"socket.io\";\nimport { redisService } from \"../../services/RedisService\";\nimport { createSocketEventService } from \"../../services/SocketEventService\";\nimport { Room } from \"../../entities/Room\";\n\nexport type Guess = {\n  roomId: number;\n  x: number;\n  y: number;\n  guess: string;\n};\n\nexport type JoinRoom = {\n  difficulty: string;\n  type: \"1v1\" | \"2v2\" | \"free4all\";\n};\n\nexport type Message = {\n  message: string;\n};\n\nexport type RoomMessage = {\n  roomId: number;\n} & Message;\n\nexport type LoadRoom = {\n  roomId: number;\n};\n\nexport type Challenge = {\n  roomId: number;\n  challengedId: number;\n  difficulty: string;\n  context?: string;\n};\n\nasync function verifyUser(\n  authService: AuthService,\n  fastify: FastifyInstance,\n  socket: Socket,\n) {\n  const userToken = authService.verify(fastify, {\n    token: socket.handshake.auth.authToken,\n  });\n  const user = await fastify.orm.getRepository(User).findOne({\n    where: {\n      // @ts-ignore\n      id: userToken.sub,\n    },\n  });\n\n  if (!user) {\n    fastify.log.info(`User with ID ${userToken.sub} not found`);\n    throw new UserNotFoundError(userToken.sub as string);\n  }\n\n  return user;\n}\n\nexport default function (\n  fastify: FastifyInstance,\n  _: object,\n  next: (err?: Error) => void,\n): void {\n  const authService = new AuthService(fastify.orm);\n  const roomService = new RoomService(fastify.orm);\n  const socketEventService = createSocketEventService(fastify);\n\n  // Subscribe to game events from Redis\n  redisService.subscribe(\"game_events\", async (channel, message) => {\n    try {\n      const event = JSON.parse(message);\n\n      if (event.type === \"room_cancelled\") {\n        const { roomId, message: cancelMessage, reason, players } = event.data;\n\n        // Only emit to players that are connected to this server\n        for (const playerId of players) {\n          const isOnThisServer = await redisService.isUserOnThisServer(\n            playerId,\n          );\n          if (isOnThisServer) {\n            fastify.io.to(`user_${playerId}`).emit(\"room_cancelled\", {\n              message: cancelMessage,\n              roomId,\n              reason,\n            });\n          }\n        }\n\n        // Also emit to the room channel for any spectators on this server\n        fastify.io.to(roomId.toString()).emit(\"room_cancelled\", {\n          message: cancelMessage,\n          roomId,\n          reason,\n        });\n      }\n    } catch (error) {\n      fastify.log.error({ err: error }, \"Error handling Redis message\");\n    }\n  });\n\n  // Subscribe to socket events from Redis\n  redisService.subscribe(\"socket_events\", (channel, message) => {\n    socketEventService.handleSocketEvent(channel, message);\n  });\n\n  // connection stuff\n  fastify.io.on(\"connection\", async (socket) => {\n    try {\n      const user = await verifyUser(authService, fastify, socket);\n\n      // Register this user's socket connection with this server\n      await redisService.registerUserSocket(user.id);\n\n      // Set user as online\n      await fastify.orm.getRepository(User).update(user.id, {\n        status: \"online\",\n      });\n      await socketEventService.emitToUsers([user.id], \"user_status_change\", {\n        userId: user.id,\n        status: \"online\",\n      });\n\n      // Add user to all their active rooms\n      const rooms = await roomService.getRoomsByUserId(user.id);\n      for (const room of rooms) {\n        // Join both playing and pending rooms to receive updates\n        if (room.status === \"playing\" || room.status === \"pending\") {\n          socket.join(room.id.toString());\n          socket.join(`user_${user.id}`);\n          fastify.log.info(`User ${user.id} joined room ${room.id}`);\n        }\n      }\n\n      // Join a room for user-specific events\n      socket.join(`user_${user.id}`);\n\n      fastify.log.info(\"a user connected\");\n      // middleware to parse JSON payloads\n      socket.use((packet, next) => {\n        try {\n          if (typeof packet[1] === \"string\") {\n            packet[1] = JSON.parse(packet[1]);\n          }\n        } catch (e) {\n          fastify.log.error(\"Invalid JSON payload\");\n        }\n        next();\n      });\n      socket.emit(\"connection\", { data: `id: ${socket.id} is connected` });\n\n      socket.on(\"disconnect\", () => {\n        fastify.log.info(\"user disconnected\");\n        // Set user as offline and unregister their socket\n        fastify.orm.getRepository(User).update(user.id, { status: \"offline\" })\n          .then(async () => {\n            await socketEventService.emitToUsers(\n              [user.id],\n              \"user_status_change\",\n              {\n                userId: user.id,\n                status: \"offline\",\n              },\n            );\n            await redisService.unregisterUserSocket(user.id);\n          });\n      });\n\n      socket.on(\"heartbeat\", async () => {\n        // Update the user's lastActiveAt timestamp\n        await fastify.orm.getRepository(User).update(user.id, {\n          status: \"online\",\n          lastActiveAt: new Date(),\n        });\n      });\n\n      socket.on(\"join_room_bus\", async (data: RoomMessage) => {\n        try {\n          const room = await roomService.getRoomById(data.roomId);\n          if (!room) {\n            socket.emit(\"error\", \"Room not found\");\n            return;\n          }\n          socket.join(room.id.toString());\n          await socketEventService.emitToRoom(room.id, \"room\", room.toJSON());\n          fastify.log.info(\n            `User ${user.id} joined room ${room.id} via join_room_bus`,\n          );\n        } catch (e) {\n          if (e instanceof UserNotFoundError) {\n            socket.emit(\"error\", \"Authentication failed\");\n          } else {\n            socket.emit(\"error\", e.message);\n          }\n        }\n      });\n\n      socket.on(\"loadRoom\", async (data: LoadRoom) => {\n        try {\n          const room = await roomService.getRoomById(data.roomId);\n          if (!room) {\n            socket.emit(\"error\", \"Room not found\");\n            return;\n          }\n          socket.join(room.id.toString());\n          await socketEventService.emitToRoom(room.id, \"room\", room.toJSON());\n          fastify.log.info(\n            `User ${user.id} joined room ${room.id} via loadRoom`,\n          );\n        } catch (e) {\n          if (e instanceof UserNotFoundError) {\n            socket.emit(\"error\", \"Authentication failed\");\n          } else {\n            socket.emit(\"error\", e.message);\n          }\n        }\n      });\n\n      socket.on(\"guess\", async ({ roomId, x, y, guess }) => {\n        try {\n          // Process guess without an explicit DB transaction here\n          const updatedRoom = await roomService.handleGuess(\n            roomId,\n            user.id,\n            x,\n            y,\n            guess,\n          );\n\n          // Broadcast updated room state to all players\n          const roomJSON = updatedRoom.toJSON();\n          // Emit locally to connected clients on this server\n          fastify.io.to(roomId.toString()).emit(\"room\", roomJSON);\n          // Also publish to other servers\n          await socketEventService.emitToRoom(roomId, \"room\", roomJSON);\n        } catch (error) {\n          fastify.log.error({ err: error }, \"Error handling guess\");\n          socket.emit(\"error\", { message: \"Failed to process guess\" });\n        }\n      });\n\n      // chat stuff\n      socket.on(\n        \"message\",\n        async ({ message }: Message) => {\n          try {\n            await socketEventService.emitToUsers([user.id], \"message\", message);\n          } catch (e) {\n            if (e instanceof UserNotFoundError) {\n              socket.emit(\"error\", \"Authentication failed\");\n            } else {\n              socket.emit(\"error\", e.message);\n            }\n          }\n        },\n      );\n\n      socket.on(\"message_room\", async (data: RoomMessage) => {\n        try {\n          socket.broadcast\n            .to(data.roomId.toString())\n            .emit(\"message\", data.roomId);\n        } catch (e) {\n          if (e instanceof UserNotFoundError) {\n            socket.emit(\"error\", \"Authentication failed\");\n          } else {\n            socket.emit(\"error\", e.message);\n          }\n        }\n      });\n\n      socket.on(\"forfeit\", async ({ roomId }: LoadRoom) => {\n        try {\n          const room = await roomService.forfeitGame(roomId, user.id);\n\n          // Emit the updated room state to all players\n          fastify.io.to(room.id.toString()).emit(\"room\", room);\n        } catch (e) {\n          if (e instanceof UserNotFoundError) {\n            socket.emit(\"error\", \"Authentication failed\");\n          } else {\n            socket.emit(\"error\", e.message);\n          }\n        }\n      });\n\n      socket.on(\"challenge\", async (data: string) => {\n        try {\n          const { challengedId, difficulty, context } = JSON.parse(data) as Challenge;\n          const room = await roomService.createChallengeRoom(\n            user.id,\n            challengedId,\n            difficulty,\n            context,\n          );\n          socket.join(room.id.toString());\n          fastify.io.to(room.id.toString()).emit(\"room\", room.toJSON());\n          const participantIds = room.players.map((player) => player.id);\n          await socketEventService.emitToUsers(\n            participantIds,\n            \"challenges:updated\",\n            {\n              roomId: room.id,\n              status: room.status,\n              action: \"created\",\n            },\n          );\n        } catch (error) {\n          fastify.log.error({ err: error });\n          socket.emit(\"error\", { message: \"Failed to create challenge\" });\n        }\n      });\n\n      socket.on(\"accept_challenge\", async (data: string) => {\n        try {\n          const { roomId } = JSON.parse(data) as { roomId: number };\n          const room = await roomService.acceptChallenge(roomId, user.id);\n          socket.join(room.id.toString());\n          fastify.io.to(room.id.toString()).emit(\"room\", room.toJSON());\n          const participantIds = room.players.map((player) => player.id);\n          await socketEventService.emitToUsers(\n            participantIds,\n            \"challenges:updated\",\n            {\n              roomId: room.id,\n              status: room.status,\n              action: \"accepted\",\n            },\n          );\n        } catch (error) {\n          fastify.log.error({ err: error });\n          socket.emit(\"error\", { message: \"Failed to accept challenge\" });\n        }\n      });\n\n      socket.on(\"reject_challenge\", async (data: string) => {\n        try {\n          const { roomId } = JSON.parse(data) as { roomId: number };\n          const room = await roomService.rejectChallenge(roomId);\n          fastify.io.to(room.id.toString()).emit(\"room\", room.toJSON());\n          const participantIds = room.players.map((player) => player.id);\n          await socketEventService.emitToUsers(\n            participantIds,\n            \"challenges:updated\",\n            {\n              roomId: room.id,\n              status: room.status,\n              action: \"rejected\",\n            },\n          );\n        } catch (error) {\n          fastify.log.error({ err: error });\n          socket.emit(\"error\", { message: \"Failed to reject challenge\" });\n        }\n      });\n\n      socket.on(\"ping\", () => {\n        socket.emit(\"pong\");\n      });\n    } catch (error) {\n      fastify.log.error({ err: error });\n      if (error instanceof ForbiddenError) {\n        socket.emit(\"error\", { code: \"auth/invalid-token\" });\n      }\n      socket.disconnect();\n    }\n  });\n\n  next();\n}\n"],"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","ignoreList":[]}
